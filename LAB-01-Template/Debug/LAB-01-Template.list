
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f34  08002f34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f3c  08002f3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08002fb4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000120  08002fb4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bae  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001621  00000000  00000000  00029c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002df5  00000000  00000000  0002b26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000610  00000000  00000000  0002e068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005c8  00000000  00000000  0002e678  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002b3b1  00000000  00000000  0002ec40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000682a  00000000  00000000  00059ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00106492  00000000  00000000  0006081b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00166cad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001884  00000000  00000000  00166d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  001685ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00168618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002d68 	.word	0x08002d68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002d68 	.word	0x08002d68

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SystemClock_Config>:
 80005e0:	b500      	push	{lr}
 80005e2:	b093      	sub	sp, #76	; 0x4c
 80005e4:	2301      	movs	r3, #1
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9306      	str	r3, [sp, #24]
 80005f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005f6:	9207      	str	r2, [sp, #28]
 80005f8:	2219      	movs	r2, #25
 80005fa:	9208      	str	r2, [sp, #32]
 80005fc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000600:	9209      	str	r2, [sp, #36]	; 0x24
 8000602:	930a      	str	r3, [sp, #40]	; 0x28
 8000604:	2309      	movs	r3, #9
 8000606:	930b      	str	r3, [sp, #44]	; 0x2c
 8000608:	2307      	movs	r3, #7
 800060a:	930c      	str	r3, [sp, #48]	; 0x30
 800060c:	4668      	mov	r0, sp
 800060e:	f000 fbdd 	bl	8000dcc <HAL_RCC_OscConfig>
 8000612:	b100      	cbz	r0, 8000616 <SystemClock_Config+0x36>
 8000614:	e7fe      	b.n	8000614 <SystemClock_Config+0x34>
 8000616:	f000 fb9b 	bl	8000d50 <HAL_PWREx_EnableOverDrive>
 800061a:	b100      	cbz	r0, 800061e <SystemClock_Config+0x3e>
 800061c:	e7fe      	b.n	800061c <SystemClock_Config+0x3c>
 800061e:	230f      	movs	r3, #15
 8000620:	930d      	str	r3, [sp, #52]	; 0x34
 8000622:	2302      	movs	r3, #2
 8000624:	930e      	str	r3, [sp, #56]	; 0x38
 8000626:	2300      	movs	r3, #0
 8000628:	930f      	str	r3, [sp, #60]	; 0x3c
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	9310      	str	r3, [sp, #64]	; 0x40
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	9311      	str	r3, [sp, #68]	; 0x44
 8000636:	2107      	movs	r1, #7
 8000638:	a80d      	add	r0, sp, #52	; 0x34
 800063a:	f000 fe05 	bl	8001248 <HAL_RCC_ClockConfig>
 800063e:	b100      	cbz	r0, 8000642 <SystemClock_Config+0x62>
 8000640:	e7fe      	b.n	8000640 <SystemClock_Config+0x60>
 8000642:	b013      	add	sp, #76	; 0x4c
 8000644:	f85d fb04 	ldr.w	pc, [sp], #4

08000648 <CPU_CACHE_Enable>:
 8000648:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800064a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <CPU_CACHE_Enable+0x7c>)
 8000654:	2100      	movs	r1, #0
 8000656:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000668:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800066e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000672:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000676:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800067a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800067e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000682:	e00f      	b.n	80006a4 <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000684:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800068a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800068e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000692:	490c      	ldr	r1, [pc, #48]	; (80006c4 <CPU_CACHE_Enable+0x7c>)
 8000694:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000698:	1e53      	subs	r3, r2, #1
 800069a:	2a00      	cmp	r2, #0
 800069c:	d1f2      	bne.n	8000684 <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	b118      	cbz	r0, 80006aa <CPU_CACHE_Enable+0x62>
 80006a2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006a4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80006a8:	e7ed      	b.n	8000686 <CPU_CACHE_Enable+0x3e>
 80006aa:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006ae:	694b      	ldr	r3, [r1, #20]
 80006b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b4:	614b      	str	r3, [r1, #20]
 80006b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Sys_Init>:
 80006c8:	b508      	push	{r3, lr}
 80006ca:	f7ff ffbd 	bl	8000648 <CPU_CACHE_Enable>
 80006ce:	f000 f9cd 	bl	8000a6c <HAL_Init>
 80006d2:	f7ff ff85 	bl	80005e0 <SystemClock_Config>
 80006d6:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <Sys_Init+0x1c>)
 80006d8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <Sys_Init+0x20>)
 80006de:	f000 f925 	bl	800092c <initUart>
 80006e2:	bd08      	pop	{r3, pc}
 80006e4:	40011000 	.word	0x40011000
 80006e8:	20000098 	.word	0x20000098

080006ec <SysTick_Handler>:
 80006ec:	b508      	push	{r3, lr}
 80006ee:	f000 f9d3 	bl	8000a98 <HAL_IncTick>
 80006f2:	bd08      	pop	{r3, pc}

080006f4 <main>:

//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
 80006f4:	b570      	push	{r4, r5, r6, lr}
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80006f6:	f7ff ffe7 	bl	80006c8 <Sys_Init>
    char choice = 0;
    //char counter = 1;
    //char arr[13];
   // int i = 1;

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80006fa:	4847      	ldr	r0, [pc, #284]	; (8000818 <main+0x124>)
 80006fc:	f001 fca8 	bl	8002050 <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 8000700:	4c46      	ldr	r4, [pc, #280]	; (800081c <main+0x128>)
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	6898      	ldr	r0, [r3, #8]
 8000706:	f001 fac5 	bl	8001c94 <fflush>

    printf("\033[44;33m"); //Changes color of text and background
 800070a:	4845      	ldr	r0, [pc, #276]	; (8000820 <main+0x12c>)
 800070c:	f001 fca0 	bl	8002050 <iprintf>
    fflush(stdout);
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	6898      	ldr	r0, [r3, #8]
 8000714:	f001 fabe 	bl	8001c94 <fflush>

    printf("\033[12;H\033[s");
 8000718:	4842      	ldr	r0, [pc, #264]	; (8000824 <main+0x130>)
 800071a:	f001 fc99 	bl	8002050 <iprintf>
    fflush(stdout);
 800071e:	6823      	ldr	r3, [r4, #0]
 8000720:	6898      	ldr	r0, [r3, #8]
 8000722:	f001 fab7 	bl	8001c94 <fflush>
    //sets scrolling window for lines 12-24
    printf("\033[12;24r");
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <main+0x134>)
 8000728:	f001 fc92 	bl	8002050 <iprintf>
    fflush(stdout);
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	6898      	ldr	r0, [r3, #8]
 8000730:	f001 fab0 	bl	8001c94 <fflush>

    printf("\033[;H");
 8000734:	483d      	ldr	r0, [pc, #244]	; (800082c <main+0x138>)
 8000736:	f001 fc8b 	bl	8002050 <iprintf>
    fflush(stdout);
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	6898      	ldr	r0, [r3, #8]
 800073e:	f001 faa9 	bl	8001c94 <fflush>

    printf("\033[2;25H"); //Moves Cursor to Center Text
 8000742:	483b      	ldr	r0, [pc, #236]	; (8000830 <main+0x13c>)
 8000744:	f001 fc84 	bl	8002050 <iprintf>
    fflush(stdout);
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	6898      	ldr	r0, [r3, #8]
 800074c:	f001 faa2 	bl	8001c94 <fflush>
    printf("PRESS <ESC> OR <CTRL>+[ TO QUIT\r\n\n");
 8000750:	4838      	ldr	r0, [pc, #224]	; (8000834 <main+0x140>)
 8000752:	f001 fd05 	bl	8002160 <puts>
 8000756:	e025      	b.n	80007a4 <main+0xb0>
    		printf("\033[33mThe keyboard character is \033[31m%c\033[33m.",choice);
      		fflush(stdout);
    	}

    	else{
   			printf("\033[u");
 8000758:	4e37      	ldr	r6, [pc, #220]	; (8000838 <main+0x144>)
 800075a:	4630      	mov	r0, r6
 800075c:	f001 fc78 	bl	8002050 <iprintf>
    		fflush(stdout);
 8000760:	4d2e      	ldr	r5, [pc, #184]	; (800081c <main+0x128>)
 8000762:	682b      	ldr	r3, [r5, #0]
 8000764:	6898      	ldr	r0, [r3, #8]
 8000766:	f001 fa95 	bl	8001c94 <fflush>
    		printf("\033[33;5mThe keyboard character $%x is \033[4m'not printable'\033[24m.\033[25m",choice);
 800076a:	b2e1      	uxtb	r1, r4
 800076c:	4833      	ldr	r0, [pc, #204]	; (800083c <main+0x148>)
 800076e:	f001 fc6f 	bl	8002050 <iprintf>
    		fflush(stdout);
 8000772:	682b      	ldr	r3, [r5, #0]
 8000774:	6898      	ldr	r0, [r3, #8]
 8000776:	f001 fa8d 	bl	8001c94 <fflush>
    		printf("\033[u");
 800077a:	4630      	mov	r0, r6
 800077c:	f001 fc68 	bl	8002050 <iprintf>
    		fflush(stdout);
 8000780:	682b      	ldr	r3, [r5, #0]
 8000782:	6898      	ldr	r0, [r3, #8]
 8000784:	f001 fa86 	bl	8001c94 <fflush>
   			printf("\033D");
 8000788:	482d      	ldr	r0, [pc, #180]	; (8000840 <main+0x14c>)
 800078a:	f001 fc61 	bl	8002050 <iprintf>
   			fflush(stdout);
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	6898      	ldr	r0, [r3, #8]
 8000792:	f001 fa7f 	bl	8001c94 <fflush>

   			printf("\033[s");
 8000796:	482b      	ldr	r0, [pc, #172]	; (8000844 <main+0x150>)
 8000798:	f001 fc5a 	bl	8002050 <iprintf>
   			fflush(stdout);
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	6898      	ldr	r0, [r3, #8]
 80007a0:	f001 fa78 	bl	8001c94 <fflush>
    	choice = getchar();
 80007a4:	f001 fb6e 	bl	8001e84 <getchar>
 80007a8:	4604      	mov	r4, r0
 80007aa:	b2c3      	uxtb	r3, r0
    	if (choice == 27) //check for esc or ^[ to end program
 80007ac:	2b1b      	cmp	r3, #27
 80007ae:	d01b      	beq.n	80007e8 <main+0xf4>
    	else if ((choice >= 32) && (choice < 127)  ) //Check if character is printable
 80007b0:	3b20      	subs	r3, #32
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b5e      	cmp	r3, #94	; 0x5e
 80007b6:	d8cf      	bhi.n	8000758 <main+0x64>
    		printf("\033[6;H");
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <main+0x154>)
 80007ba:	f001 fc49 	bl	8002050 <iprintf>
    		fflush(stdout);
 80007be:	4d17      	ldr	r5, [pc, #92]	; (800081c <main+0x128>)
 80007c0:	682b      	ldr	r3, [r5, #0]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	f001 fa66 	bl	8001c94 <fflush>
    		printf("\033[2K\r"); //Erase the current line
 80007c8:	4820      	ldr	r0, [pc, #128]	; (800084c <main+0x158>)
 80007ca:	f001 fc41 	bl	8002050 <iprintf>
    		fflush(stdout);
 80007ce:	682b      	ldr	r3, [r5, #0]
 80007d0:	6898      	ldr	r0, [r3, #8]
 80007d2:	f001 fa5f 	bl	8001c94 <fflush>
    		printf("\033[33mThe keyboard character is \033[31m%c\033[33m.",choice);
 80007d6:	b2e1      	uxtb	r1, r4
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <main+0x15c>)
 80007da:	f001 fc39 	bl	8002050 <iprintf>
      		fflush(stdout);
 80007de:	682b      	ldr	r3, [r5, #0]
 80007e0:	6898      	ldr	r0, [r3, #8]
 80007e2:	f001 fa57 	bl	8001c94 <fflush>
 80007e6:	e7dd      	b.n	80007a4 <main+0xb0>
    		printf("\a"); //Should have terminal beep
 80007e8:	2007      	movs	r0, #7
 80007ea:	f001 fc49 	bl	8002080 <putchar>
    		fflush(stdout);
 80007ee:	4c0b      	ldr	r4, [pc, #44]	; (800081c <main+0x128>)
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	6898      	ldr	r0, [r3, #8]
 80007f4:	f001 fa4e 	bl	8001c94 <fflush>
    		printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <main+0x124>)
 80007fa:	f001 fc29 	bl	8002050 <iprintf>
    		fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	6898      	ldr	r0, [r3, #8]
 8000802:	f001 fa47 	bl	8001c94 <fflush>
    		printf("\033[33;44mProgram Halted");
 8000806:	4813      	ldr	r0, [pc, #76]	; (8000854 <main+0x160>)
 8000808:	f001 fc22 	bl	8002050 <iprintf>
    		fflush(stdout);
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	f001 fa40 	bl	8001c94 <fflush>

    	}*/


	}
}
 8000814:	2000      	movs	r0, #0
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	08002d98 	.word	0x08002d98
 800081c:	2000000c 	.word	0x2000000c
 8000820:	08002da4 	.word	0x08002da4
 8000824:	08002db0 	.word	0x08002db0
 8000828:	08002dbc 	.word	0x08002dbc
 800082c:	08002d9c 	.word	0x08002d9c
 8000830:	08002dc8 	.word	0x08002dc8
 8000834:	08002dd0 	.word	0x08002dd0
 8000838:	08002e4c 	.word	0x08002e4c
 800083c:	08002e50 	.word	0x08002e50
 8000840:	08002e94 	.word	0x08002e94
 8000844:	08002e98 	.word	0x08002e98
 8000848:	08002e0c 	.word	0x08002e0c
 800084c:	08002e14 	.word	0x08002e14
 8000850:	08002e1c 	.word	0x08002e1c
 8000854:	08002df4 	.word	0x08002df4

08000858 <HAL_UART_MspInit>:
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	6803      	ldr	r3, [r0, #0]
 800085e:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <HAL_UART_MspInit+0xc0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d004      	beq.n	800086e <HAL_UART_MspInit+0x16>
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <HAL_UART_MspInit+0xc4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d02c      	beq.n	80008c4 <HAL_UART_MspInit+0x6c>
 800086a:	b00b      	add	sp, #44	; 0x2c
 800086c:	bd30      	pop	{r4, r5, pc}
 800086e:	4c2c      	ldr	r4, [pc, #176]	; (8000920 <HAL_UART_MspInit+0xc8>)
 8000870:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6323      	str	r3, [r4, #48]	; 0x30
 8000878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	9b01      	ldr	r3, [sp, #4]
 8000882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	2302      	movs	r3, #2
 800088a:	9306      	str	r3, [sp, #24]
 800088c:	2301      	movs	r3, #1
 800088e:	9307      	str	r3, [sp, #28]
 8000890:	2303      	movs	r3, #3
 8000892:	9308      	str	r3, [sp, #32]
 8000894:	2307      	movs	r3, #7
 8000896:	9309      	str	r3, [sp, #36]	; 0x24
 8000898:	4d22      	ldr	r5, [pc, #136]	; (8000924 <HAL_UART_MspInit+0xcc>)
 800089a:	a905      	add	r1, sp, #20
 800089c:	4628      	mov	r0, r5
 800089e:	f000 f967 	bl	8000b70 <HAL_GPIO_Init>
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	9305      	str	r3, [sp, #20]
 80008a8:	a905      	add	r1, sp, #20
 80008aa:	4628      	mov	r0, r5
 80008ac:	f000 f960 	bl	8000b70 <HAL_GPIO_Init>
 80008b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6463      	str	r3, [r4, #68]	; 0x44
 80008b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	9b02      	ldr	r3, [sp, #8]
 80008c2:	e7d2      	b.n	800086a <HAL_UART_MspInit+0x12>
 80008c4:	4c16      	ldr	r4, [pc, #88]	; (8000920 <HAL_UART_MspInit+0xc8>)
 80008c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6323      	str	r3, [r4, #48]	; 0x30
 80008ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	9303      	str	r3, [sp, #12]
 80008d6:	9b03      	ldr	r3, [sp, #12]
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	9305      	str	r3, [sp, #20]
 80008dc:	2302      	movs	r3, #2
 80008de:	9306      	str	r3, [sp, #24]
 80008e0:	2301      	movs	r3, #1
 80008e2:	9307      	str	r3, [sp, #28]
 80008e4:	2303      	movs	r3, #3
 80008e6:	9308      	str	r3, [sp, #32]
 80008e8:	2308      	movs	r3, #8
 80008ea:	9309      	str	r3, [sp, #36]	; 0x24
 80008ec:	4d0e      	ldr	r5, [pc, #56]	; (8000928 <HAL_UART_MspInit+0xd0>)
 80008ee:	a905      	add	r1, sp, #20
 80008f0:	4628      	mov	r0, r5
 80008f2:	f000 f93d 	bl	8000b70 <HAL_GPIO_Init>
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	9305      	str	r3, [sp, #20]
 80008fa:	a905      	add	r1, sp, #20
 80008fc:	4628      	mov	r0, r5
 80008fe:	f000 f937 	bl	8000b70 <HAL_GPIO_Init>
 8000902:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	6463      	str	r3, [r4, #68]	; 0x44
 800090a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800090c:	f003 0320 	and.w	r3, r3, #32
 8000910:	9304      	str	r3, [sp, #16]
 8000912:	9b04      	ldr	r3, [sp, #16]
 8000914:	e7a9      	b.n	800086a <HAL_UART_MspInit+0x12>
 8000916:	bf00      	nop
 8000918:	40011000 	.word	0x40011000
 800091c:	40011400 	.word	0x40011400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020800 	.word	0x40020800

0800092c <initUart>:
 800092c:	b508      	push	{r3, lr}
 800092e:	6002      	str	r2, [r0, #0]
 8000930:	6041      	str	r1, [r0, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	6082      	str	r2, [r0, #8]
 8000936:	60c2      	str	r2, [r0, #12]
 8000938:	6102      	str	r2, [r0, #16]
 800093a:	210c      	movs	r1, #12
 800093c:	6141      	str	r1, [r0, #20]
 800093e:	6182      	str	r2, [r0, #24]
 8000940:	f001 f8c7 	bl	8001ad2 <HAL_UART_Init>
 8000944:	bd08      	pop	{r3, pc}
	...

08000948 <_write>:
 8000948:	b510      	push	{r4, lr}
 800094a:	4614      	mov	r4, r2
 800094c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000950:	b292      	uxth	r2, r2
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <_write+0x14>)
 8000954:	f000 ff9d 	bl	8001892 <HAL_UART_Transmit>
 8000958:	4620      	mov	r0, r4
 800095a:	bd10      	pop	{r4, pc}
 800095c:	20000098 	.word	0x20000098

08000960 <_read>:
 8000960:	b508      	push	{r3, lr}
 8000962:	2200      	movs	r2, #0
 8000964:	700a      	strb	r2, [r1, #0]
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2201      	movs	r2, #1
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <_read+0x18>)
 800096e:	f000 fffe 	bl	800196e <HAL_UART_Receive>
 8000972:	2001      	movs	r0, #1
 8000974:	bd08      	pop	{r3, pc}
 8000976:	bf00      	nop
 8000978:	20000098 	.word	0x20000098

0800097c <Reset_Handler>:
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x2>)
 800097e:	4685      	mov	sp, r0
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x6>)
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopForever+0xa>)
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopForever+0xe>)
 8000986:	2300      	movs	r3, #0
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:
 800098a:	58d4      	ldr	r4, [r2, r3]
 800098c:	50c4      	str	r4, [r0, r3]
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:
 8000990:	18c4      	adds	r4, r0, r3
 8000992:	428c      	cmp	r4, r1
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopForever+0x12>)
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopForever+0x16>)
 800099a:	2300      	movs	r3, #0
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:
 80009a2:	42a2      	cmp	r2, r4
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>
 80009a6:	f000 f813 	bl	80009d0 <SystemInit>
 80009aa:	f001 fa7d 	bl	8001ea8 <__libc_init_array>
 80009ae:	f7ff fea1 	bl	80006f4 <main>

080009b2 <LoopForever>:
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
 80009b4:	20080000 	.word	0x20080000
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000070 	.word	0x20000070
 80009c0:	08002f44 	.word	0x08002f44
 80009c4:	20000070 	.word	0x20000070
 80009c8:	20000120 	.word	0x20000120

080009cc <ADC_IRQHandler>:
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <SystemInit+0x40>)
 80009d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <SystemInit+0x44>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	f041 0101 	orr.w	r1, r1, #1
 80009e8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009ea:	2000      	movs	r0, #0
 80009ec:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009ee:	681c      	ldr	r4, [r3, #0]
 80009f0:	4909      	ldr	r1, [pc, #36]	; (8000a18 <SystemInit+0x48>)
 80009f2:	4021      	ands	r1, r4
 80009f4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <SystemInit+0x4c>)
 80009f8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000a00:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a02:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a08:	6093      	str	r3, [r2, #8]
#endif
}
 8000a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	40023800 	.word	0x40023800
 8000a18:	fef6ffff 	.word	0xfef6ffff
 8000a1c:	24003010 	.word	0x24003010

08000a20 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b510      	push	{r4, lr}
 8000a26:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_InitTick+0x40>)
 8000a2a:	7818      	ldrb	r0, [r3, #0]
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <HAL_InitTick+0x44>)
 8000a36:	6810      	ldr	r0, [r2, #0]
 8000a38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a3c:	f000 f882 	bl	8000b44 <HAL_SYSTICK_Config>
 8000a40:	b968      	cbnz	r0, 8000a5e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	2c0f      	cmp	r4, #15
 8000a44:	d901      	bls.n	8000a4a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
 8000a48:	e00a      	b.n	8000a60 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a52:	f000 f845 	bl	8000ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a56:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_InitTick+0x40>)
 8000a58:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
}
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000000 	.word	0x20000000

08000a6c <HAL_Init>:
{
 8000a6c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_Init+0x28>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f81b 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f7ff ffcc 	bl	8000a24 <HAL_InitTick>
  HAL_MspInit();
 8000a8c:	f7ff ffc8 	bl	8000a20 <HAL_MspInit>
}
 8000a90:	2000      	movs	r0, #0
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <HAL_IncTick+0x10>)
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_IncTick+0x14>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000118 	.word	0x20000118
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ab0:	4b01      	ldr	r3, [pc, #4]	; (8000ab8 <HAL_GetTick+0x8>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000118 	.word	0x20000118

08000abc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000abe:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	0200      	lsls	r0, r0, #8
 8000aca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ace:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ad0:	4a02      	ldr	r2, [pc, #8]	; (8000adc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ad2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000ad4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	05fa0000 	.word	0x05fa0000

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_NVIC_SetPriority+0x58>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aea:	f1c3 0407 	rsb	r4, r3, #7
 8000aee:	2c04      	cmp	r4, #4
 8000af0:	bf28      	it	cs
 8000af2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af4:	1d1d      	adds	r5, r3, #4
 8000af6:	2d06      	cmp	r5, #6
 8000af8:	d914      	bls.n	8000b24 <HAL_NVIC_SetPriority+0x44>
 8000afa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 35ff 	mov.w	r5, #4294967295
 8000b00:	fa05 f404 	lsl.w	r4, r5, r4
 8000b04:	ea21 0104 	bic.w	r1, r1, r4
 8000b08:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b0e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b12:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b14:	2800      	cmp	r0, #0
 8000b16:	db07      	blt.n	8000b28 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	0109      	lsls	r1, r1, #4
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_NVIC_SetPriority+0x5c>)
 8000b1e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b20:	bc30      	pop	{r4, r5}
 8000b22:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b24:	2300      	movs	r3, #0
 8000b26:	e7e9      	b.n	8000afc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	f000 000f 	and.w	r0, r0, #15
 8000b2c:	0109      	lsls	r1, r1, #4
 8000b2e:	b2c9      	uxtb	r1, r1
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_NVIC_SetPriority+0x60>)
 8000b32:	5419      	strb	r1, [r3, r0]
 8000b34:	e7f4      	b.n	8000b20 <HAL_NVIC_SetPriority+0x40>
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	e000e400 	.word	0xe000e400
 8000b40:	e000ed14 	.word	0xe000ed14

08000b44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	3801      	subs	r0, #1
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d20a      	bcs.n	8000b62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_SYSTICK_Config+0x24>)
 8000b4e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_SYSTICK_Config+0x28>)
 8000b52:	21f0      	movs	r1, #240	; 0xf0
 8000b54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	2000      	movs	r0, #0
 8000b5a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	f200 80e2 	bhi.w	8000d3c <HAL_GPIO_Init+0x1cc>
{
 8000b78:	b4f0      	push	{r4, r5, r6, r7}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	e039      	b.n	8000bf2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b7e:	2209      	movs	r2, #9
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000b82:	2200      	movs	r2, #0
 8000b84:	40b2      	lsls	r2, r6
 8000b86:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b88:	3402      	adds	r4, #2
 8000b8a:	4e6d      	ldr	r6, [pc, #436]	; (8000d40 <HAL_GPIO_Init+0x1d0>)
 8000b8c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b90:	4a6c      	ldr	r2, [pc, #432]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000b92:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b94:	43ea      	mvns	r2, r5
 8000b96:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9a:	684f      	ldr	r7, [r1, #4]
 8000b9c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ba0:	d001      	beq.n	8000ba6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000ba2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000ba6:	4c67      	ldr	r4, [pc, #412]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000ba8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000baa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	684f      	ldr	r7, [r1, #4]
 8000bb2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000bb6:	d001      	beq.n	8000bbc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000bb8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000bbc:	4c61      	ldr	r4, [pc, #388]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000bbe:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	684f      	ldr	r7, [r1, #4]
 8000bc8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000bcc:	d001      	beq.n	8000bd2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000bce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000bd2:	4c5c      	ldr	r4, [pc, #368]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000bd4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000bd6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bda:	684e      	ldr	r6, [r1, #4]
 8000bdc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000be0:	d001      	beq.n	8000be6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000be2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000be6:	4c57      	ldr	r4, [pc, #348]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000be8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bea:	3301      	adds	r3, #1
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	f200 80a2 	bhi.w	8000d36 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	680c      	ldr	r4, [r1, #0]
 8000bf8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000bfc:	42aa      	cmp	r2, r5
 8000bfe:	d1f4      	bne.n	8000bea <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c00:	684c      	ldr	r4, [r1, #4]
 8000c02:	2c12      	cmp	r4, #18
 8000c04:	bf18      	it	ne
 8000c06:	2c02      	cmpne	r4, #2
 8000c08:	d110      	bne.n	8000c2c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000c0a:	08de      	lsrs	r6, r3, #3
 8000c0c:	3608      	adds	r6, #8
 8000c0e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c12:	f003 0407 	and.w	r4, r3, #7
 8000c16:	00a7      	lsls	r7, r4, #2
 8000c18:	240f      	movs	r4, #15
 8000c1a:	40bc      	lsls	r4, r7
 8000c1c:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c20:	690c      	ldr	r4, [r1, #16]
 8000c22:	40bc      	lsls	r4, r7
 8000c24:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c28:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000c2c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c2e:	005f      	lsls	r7, r3, #1
 8000c30:	2603      	movs	r6, #3
 8000c32:	40be      	lsls	r6, r7
 8000c34:	43f6      	mvns	r6, r6
 8000c36:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c3a:	684c      	ldr	r4, [r1, #4]
 8000c3c:	f004 0403 	and.w	r4, r4, #3
 8000c40:	40bc      	lsls	r4, r7
 8000c42:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000c46:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c48:	684c      	ldr	r4, [r1, #4]
 8000c4a:	f104 3cff 	add.w	ip, r4, #4294967295
 8000c4e:	2c11      	cmp	r4, #17
 8000c50:	bf18      	it	ne
 8000c52:	f1bc 0f01 	cmpne.w	ip, #1
 8000c56:	d901      	bls.n	8000c5c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c58:	2c12      	cmp	r4, #18
 8000c5a:	d111      	bne.n	8000c80 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000c5c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c5e:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c62:	68cc      	ldr	r4, [r1, #12]
 8000c64:	40bc      	lsls	r4, r7
 8000c66:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000c6a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c6c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6e:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c72:	684c      	ldr	r4, [r1, #4]
 8000c74:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000c7e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c80:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c82:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c84:	688a      	ldr	r2, [r1, #8]
 8000c86:	40ba      	lsls	r2, r7
 8000c88:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000c8a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8c:	684a      	ldr	r2, [r1, #4]
 8000c8e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c92:	d0aa      	beq.n	8000bea <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	4a2c      	ldr	r2, [pc, #176]	; (8000d48 <HAL_GPIO_Init+0x1d8>)
 8000c96:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000c98:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000c9c:	6454      	str	r4, [r2, #68]	; 0x44
 8000c9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ca0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ca4:	9201      	str	r2, [sp, #4]
 8000ca6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ca8:	089c      	lsrs	r4, r3, #2
 8000caa:	1ca6      	adds	r6, r4, #2
 8000cac:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <HAL_GPIO_Init+0x1d0>)
 8000cae:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cb2:	f003 0203 	and.w	r2, r3, #3
 8000cb6:	0096      	lsls	r6, r2, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	40b2      	lsls	r2, r6
 8000cbc:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cc0:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <HAL_GPIO_Init+0x1dc>)
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f43f af5d 	beq.w	8000b82 <HAL_GPIO_Init+0x12>
 8000cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d022      	beq.n	8000d16 <HAL_GPIO_Init+0x1a6>
 8000cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d020      	beq.n	8000d1a <HAL_GPIO_Init+0x1aa>
 8000cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	d01e      	beq.n	8000d1e <HAL_GPIO_Init+0x1ae>
 8000ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d01c      	beq.n	8000d22 <HAL_GPIO_Init+0x1b2>
 8000ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d01a      	beq.n	8000d26 <HAL_GPIO_Init+0x1b6>
 8000cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	d018      	beq.n	8000d2a <HAL_GPIO_Init+0x1ba>
 8000cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	d016      	beq.n	8000d2e <HAL_GPIO_Init+0x1be>
 8000d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d014      	beq.n	8000d32 <HAL_GPIO_Init+0x1c2>
 8000d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	f43f af36 	beq.w	8000b7e <HAL_GPIO_Init+0xe>
 8000d12:	220a      	movs	r2, #10
 8000d14:	e736      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d16:	2201      	movs	r2, #1
 8000d18:	e734      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	e732      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d1e:	2203      	movs	r2, #3
 8000d20:	e730      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d22:	2204      	movs	r2, #4
 8000d24:	e72e      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d26:	2205      	movs	r2, #5
 8000d28:	e72c      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d2a:	2206      	movs	r2, #6
 8000d2c:	e72a      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d2e:	2207      	movs	r2, #7
 8000d30:	e728      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d32:	2208      	movs	r2, #8
 8000d34:	e726      	b.n	8000b84 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d36:	b002      	add	sp, #8
 8000d38:	bcf0      	pop	{r4, r5, r6, r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40013c00 	.word	0x40013c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_PWREx_EnableOverDrive+0x74>)
 8000d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d72:	f7ff fe9d 	bl	8000ab0 <HAL_GetTick>
 8000d76:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d80:	d108      	bne.n	8000d94 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d82:	f7ff fe95 	bl	8000ab0 <HAL_GetTick>
 8000d86:	1b00      	subs	r0, r0, r4
 8000d88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d8c:	d9f4      	bls.n	8000d78 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000d8e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000d90:	b002      	add	sp, #8
 8000d92:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000d9e:	f7ff fe87 	bl	8000ab0 <HAL_GetTick>
 8000da2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dac:	d107      	bne.n	8000dbe <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dae:	f7ff fe7f 	bl	8000ab0 <HAL_GetTick>
 8000db2:	1b00      	subs	r0, r0, r4
 8000db4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000db8:	d9f4      	bls.n	8000da4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000dba:	2003      	movs	r0, #3
 8000dbc:	e7e8      	b.n	8000d90 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	e7e6      	b.n	8000d90 <HAL_PWREx_EnableOverDrive+0x40>
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40007000 	.word	0x40007000

08000dcc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	f000 81dc 	beq.w	800118a <HAL_RCC_OscConfig+0x3be>
{
 8000dd2:	b570      	push	{r4, r5, r6, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd8:	6803      	ldr	r3, [r0, #0]
 8000dda:	f013 0f01 	tst.w	r3, #1
 8000dde:	d029      	beq.n	8000e34 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de0:	4ba2      	ldr	r3, [pc, #648]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d01a      	beq.n	8000e22 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dec:	4b9f      	ldr	r3, [pc, #636]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d00f      	beq.n	8000e18 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfe:	d040      	beq.n	8000e82 <HAL_RCC_OscConfig+0xb6>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d154      	bne.n	8000eae <HAL_RCC_OscConfig+0xe2>
 8000e04:	4b99      	ldr	r3, [pc, #612]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e039      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e18:	4b94      	ldr	r3, [pc, #592]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e20:	d0ea      	beq.n	8000df8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b92      	ldr	r3, [pc, #584]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e2a:	d003      	beq.n	8000e34 <HAL_RCC_OscConfig+0x68>
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 81ad 	beq.w	800118e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f013 0f02 	tst.w	r3, #2
 8000e3a:	d075      	beq.n	8000f28 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e3c:	4b8b      	ldr	r3, [pc, #556]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f013 0f0c 	tst.w	r3, #12
 8000e44:	d05e      	beq.n	8000f04 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e46:	4b89      	ldr	r3, [pc, #548]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d053      	beq.n	8000efa <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e52:	68e3      	ldr	r3, [r4, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 808a 	beq.w	8000f6e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5a:	4a84      	ldr	r2, [pc, #528]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e64:	f7ff fe24 	bl	8000ab0 <HAL_GetTick>
 8000e68:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6a:	4b80      	ldr	r3, [pc, #512]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f013 0f02 	tst.w	r3, #2
 8000e72:	d173      	bne.n	8000f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fe1c 	bl	8000ab0 <HAL_GetTick>
 8000e78:	1b40      	subs	r0, r0, r5
 8000e7a:	2802      	cmp	r0, #2
 8000e7c:	d9f5      	bls.n	8000e6a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000e7e:	2003      	movs	r0, #3
 8000e80:	e188      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	4a7a      	ldr	r2, [pc, #488]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	b32b      	cbz	r3, 8000edc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000e90:	f7ff fe0e 	bl	8000ab0 <HAL_GetTick>
 8000e94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	4b75      	ldr	r3, [pc, #468]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e9e:	d1c9      	bne.n	8000e34 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fe06 	bl	8000ab0 <HAL_GetTick>
 8000ea4:	1b40      	subs	r0, r0, r5
 8000ea6:	2864      	cmp	r0, #100	; 0x64
 8000ea8:	d9f5      	bls.n	8000e96 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000eaa:	2003      	movs	r0, #3
 8000eac:	e172      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb2:	d009      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xfc>
 8000eb4:	4b6d      	ldr	r3, [pc, #436]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e7e1      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
 8000ec8:	4b68      	ldr	r3, [pc, #416]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e7d7      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000edc:	f7ff fde8 	bl	8000ab0 <HAL_GetTick>
 8000ee0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee2:	4b62      	ldr	r3, [pc, #392]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eea:	d0a3      	beq.n	8000e34 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fde0 	bl	8000ab0 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	2864      	cmp	r0, #100	; 0x64
 8000ef4:	d9f5      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e14c      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f02:	d1a6      	bne.n	8000e52 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f04:	4b59      	ldr	r3, [pc, #356]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f013 0f02 	tst.w	r3, #2
 8000f0c:	d004      	beq.n	8000f18 <HAL_RCC_OscConfig+0x14c>
 8000f0e:	68e3      	ldr	r3, [r4, #12]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d001      	beq.n	8000f18 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000f14:	2001      	movs	r0, #1
 8000f16:	e13d      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4a54      	ldr	r2, [pc, #336]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f20:	6921      	ldr	r1, [r4, #16]
 8000f22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f26:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	f013 0f08 	tst.w	r3, #8
 8000f2e:	d046      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f30:	6963      	ldr	r3, [r4, #20]
 8000f32:	b383      	cbz	r3, 8000f96 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f34:	4a4d      	ldr	r2, [pc, #308]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f36:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fdb7 	bl	8000ab0 <HAL_GetTick>
 8000f42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f48:	f013 0f02 	tst.w	r3, #2
 8000f4c:	d137      	bne.n	8000fbe <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fdaf 	bl	8000ab0 <HAL_GetTick>
 8000f52:	1b40      	subs	r0, r0, r5
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d9f5      	bls.n	8000f44 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
 8000f5a:	e11b      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4a43      	ldr	r2, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f5e:	6813      	ldr	r3, [r2, #0]
 8000f60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f64:	6921      	ldr	r1, [r4, #16]
 8000f66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e7dc      	b.n	8000f28 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000f6e:	4a3f      	ldr	r2, [pc, #252]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f78:	f7ff fd9a 	bl	8000ab0 <HAL_GetTick>
 8000f7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f013 0f02 	tst.w	r3, #2
 8000f86:	d0cf      	beq.n	8000f28 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f88:	f7ff fd92 	bl	8000ab0 <HAL_GetTick>
 8000f8c:	1b40      	subs	r0, r0, r5
 8000f8e:	2802      	cmp	r0, #2
 8000f90:	d9f5      	bls.n	8000f7e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000f92:	2003      	movs	r0, #3
 8000f94:	e0fe      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f96:	4a35      	ldr	r2, [pc, #212]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000f98:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fd86 	bl	8000ab0 <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000faa:	f013 0f02 	tst.w	r3, #2
 8000fae:	d006      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fd7e 	bl	8000ab0 <HAL_GetTick>
 8000fb4:	1b40      	subs	r0, r0, r5
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9f5      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
 8000fbc:	e0ea      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	f013 0f04 	tst.w	r3, #4
 8000fc4:	d07e      	beq.n	80010c4 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fce:	d11e      	bne.n	800100e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fe4:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <HAL_RCC_OscConfig+0x2a4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fee:	d010      	beq.n	8001012 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	68a3      	ldr	r3, [r4, #8]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d021      	beq.n	800103a <HAL_RCC_OscConfig+0x26e>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d13c      	bne.n	8001074 <HAL_RCC_OscConfig+0x2a8>
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8000ffc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	671a      	str	r2, [r3, #112]	; 0x70
 8001004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001006:	f022 0204 	bic.w	r2, r2, #4
 800100a:	671a      	str	r2, [r3, #112]	; 0x70
 800100c:	e01a      	b.n	8001044 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800100e:	2500      	movs	r5, #0
 8001010:	e7e9      	b.n	8000fe6 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_RCC_OscConfig+0x2a4>)
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800101c:	f7ff fd48 	bl	8000ab0 <HAL_GetTick>
 8001020:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_RCC_OscConfig+0x2a4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f413 7f80 	tst.w	r3, #256	; 0x100
 800102a:	d1e1      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800102c:	f7ff fd40 	bl	8000ab0 <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	2864      	cmp	r0, #100	; 0x64
 8001034:	d9f5      	bls.n	8001022 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001036:	2003      	movs	r0, #3
 8001038:	e0ac      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 800103c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001044:	68a3      	ldr	r3, [r4, #8]
 8001046:	b35b      	cbz	r3, 80010a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001048:	f7ff fd32 	bl	8000ab0 <HAL_GetTick>
 800104c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_RCC_OscConfig+0x2a0>)
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	f013 0f02 	tst.w	r3, #2
 8001056:	d134      	bne.n	80010c2 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001058:	f7ff fd2a 	bl	8000ab0 <HAL_GetTick>
 800105c:	1b80      	subs	r0, r0, r6
 800105e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001062:	4298      	cmp	r0, r3
 8001064:	d9f3      	bls.n	800104e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001066:	2003      	movs	r0, #3
 8001068:	e094      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001074:	2b05      	cmp	r3, #5
 8001076:	d009      	beq.n	800108c <HAL_RCC_OscConfig+0x2c0>
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 800107a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800107c:	f022 0201 	bic.w	r2, r2, #1
 8001080:	671a      	str	r2, [r3, #112]	; 0x70
 8001082:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001084:	f022 0204 	bic.w	r2, r2, #4
 8001088:	671a      	str	r2, [r3, #112]	; 0x70
 800108a:	e7db      	b.n	8001044 <HAL_RCC_OscConfig+0x278>
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 800108e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001090:	f042 0204 	orr.w	r2, r2, #4
 8001094:	671a      	str	r2, [r3, #112]	; 0x70
 8001096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	671a      	str	r2, [r3, #112]	; 0x70
 800109e:	e7d1      	b.n	8001044 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff fd06 	bl	8000ab0 <HAL_GetTick>
 80010a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 80010a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010aa:	f013 0f02 	tst.w	r3, #2
 80010ae:	d008      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcfe 	bl	8000ab0 <HAL_GetTick>
 80010b4:	1b80      	subs	r0, r0, r6
 80010b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d9f3      	bls.n	80010a6 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
 80010c0:	e068      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010c2:	b9f5      	cbnz	r5, 8001102 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c4:	69a3      	ldr	r3, [r4, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ca:	4a34      	ldr	r2, [pc, #208]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 80010cc:	6892      	ldr	r2, [r2, #8]
 80010ce:	f002 020c 	and.w	r2, r2, #12
 80010d2:	2a08      	cmp	r2, #8
 80010d4:	d060      	beq.n	8001198 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d019      	beq.n	800110e <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010da:	4a30      	ldr	r2, [pc, #192]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fce4 	bl	8000ab0 <HAL_GetTick>
 80010e8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010f2:	d048      	beq.n	8001186 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f4:	f7ff fcdc 	bl	8000ab0 <HAL_GetTick>
 80010f8:	1b00      	subs	r0, r0, r4
 80010fa:	2802      	cmp	r0, #2
 80010fc:	d9f5      	bls.n	80010ea <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80010fe:	2003      	movs	r0, #3
 8001100:	e048      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	4a26      	ldr	r2, [pc, #152]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 8001104:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	e7da      	b.n	80010c4 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800110e:	4a23      	ldr	r2, [pc, #140]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001116:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001118:	f7ff fcca 	bl	8000ab0 <HAL_GetTick>
 800111c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001126:	d006      	beq.n	8001136 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff fcc2 	bl	8000ab0 <HAL_GetTick>
 800112c:	1b40      	subs	r0, r0, r5
 800112e:	2802      	cmp	r0, #2
 8001130:	d9f5      	bls.n	800111e <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8001132:	2003      	movs	r0, #3
 8001134:	e02e      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001136:	69e3      	ldr	r3, [r4, #28]
 8001138:	6a22      	ldr	r2, [r4, #32]
 800113a:	4313      	orrs	r3, r2
 800113c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800113e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001142:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001144:	0852      	lsrs	r2, r2, #1
 8001146:	3a01      	subs	r2, #1
 8001148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800114c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800114e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001152:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001154:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 800115a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001162:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001164:	f7ff fca4 	bl	8000ab0 <HAL_GetTick>
 8001168:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_RCC_OscConfig+0x3d0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001174:	f7ff fc9c 	bl	8000ab0 <HAL_GetTick>
 8001178:	1b00      	subs	r0, r0, r4
 800117a:	2802      	cmp	r0, #2
 800117c:	d9f5      	bls.n	800116a <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800117e:	2003      	movs	r0, #3
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001182:	2000      	movs	r0, #0
 8001184:	e006      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
 8001186:	2000      	movs	r0, #0
 8001188:	e004      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
}
 800118c:	4770      	bx	lr
        return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e000      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001192:	2000      	movs	r0, #0
}
 8001194:	b002      	add	sp, #8
 8001196:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
 800119a:	e7fb      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d044      	beq.n	8001236 <HAL_RCC_GetSysClockFreq+0x96>
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b0:	4823      	ldr	r0, [pc, #140]	; (8001240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011b2:	4770      	bx	lr
{
 80011b4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011d0:	2300      	movs	r3, #0
 80011d2:	481c      	ldr	r0, [pc, #112]	; (8001244 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011d4:	fba1 0100 	umull	r0, r1, r1, r0
 80011d8:	f7ff f882 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011e4:	3301      	adds	r3, #1
 80011e6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80011e8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011ec:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011f8:	461e      	mov	r6, r3
 80011fa:	2700      	movs	r7, #0
 80011fc:	015c      	lsls	r4, r3, #5
 80011fe:	2500      	movs	r5, #0
 8001200:	1ae4      	subs	r4, r4, r3
 8001202:	eb65 0507 	sbc.w	r5, r5, r7
 8001206:	01a9      	lsls	r1, r5, #6
 8001208:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800120c:	01a0      	lsls	r0, r4, #6
 800120e:	1b00      	subs	r0, r0, r4
 8001210:	eb61 0105 	sbc.w	r1, r1, r5
 8001214:	00cb      	lsls	r3, r1, #3
 8001216:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800121a:	00c4      	lsls	r4, r0, #3
 800121c:	19a0      	adds	r0, r4, r6
 800121e:	eb43 0107 	adc.w	r1, r3, r7
 8001222:	028b      	lsls	r3, r1, #10
 8001224:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001228:	0284      	lsls	r4, r0, #10
 800122a:	4620      	mov	r0, r4
 800122c:	4619      	mov	r1, r3
 800122e:	2300      	movs	r3, #0
 8001230:	f7ff f856 	bl	80002e0 <__aeabi_uldivmod>
 8001234:	e7d2      	b.n	80011dc <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	00f42400 	.word	0x00f42400
 8001244:	017d7840 	.word	0x017d7840

08001248 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001248:	2800      	cmp	r0, #0
 800124a:	f000 80a2 	beq.w	8001392 <HAL_RCC_ClockConfig+0x14a>
{
 800124e:	b570      	push	{r4, r5, r6, lr}
 8001250:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_RCC_ClockConfig+0x154>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	428b      	cmp	r3, r1
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_RCC_ClockConfig+0x154>)
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	f023 030f 	bic.w	r3, r3, #15
 8001266:	430b      	orrs	r3, r1
 8001268:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	428b      	cmp	r3, r1
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
}
 8001276:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	f013 0f02 	tst.w	r3, #2
 800127e:	d017      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	f013 0f04 	tst.w	r3, #4
 8001284:	d004      	beq.n	8001290 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001286:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 8001288:	6893      	ldr	r3, [r2, #8]
 800128a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800128e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	f013 0f08 	tst.w	r3, #8
 8001296:	d004      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001298:	4a41      	ldr	r2, [pc, #260]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 800129a:	6893      	ldr	r3, [r2, #8]
 800129c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012a0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a2:	4a3f      	ldr	r2, [pc, #252]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 80012a4:	6893      	ldr	r3, [r2, #8]
 80012a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012aa:	68a0      	ldr	r0, [r4, #8]
 80012ac:	4303      	orrs	r3, r0
 80012ae:	6093      	str	r3, [r2, #8]
 80012b0:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	f013 0f01 	tst.w	r3, #1
 80012b8:	d031      	beq.n	800131e <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d020      	beq.n	8001302 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d025      	beq.n	8001310 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	4a36      	ldr	r2, [pc, #216]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	f012 0f02 	tst.w	r2, #2
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ce:	4934      	ldr	r1, [pc, #208]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 80012d0:	688a      	ldr	r2, [r1, #8]
 80012d2:	f022 0203 	bic.w	r2, r2, #3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80012da:	f7ff fbe9 	bl	8000ab0 <HAL_GetTick>
 80012de:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	6862      	ldr	r2, [r4, #4]
 80012ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012ee:	d016      	beq.n	800131e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f0:	f7ff fbde 	bl	8000ab0 <HAL_GetTick>
 80012f4:	1b80      	subs	r0, r0, r6
 80012f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d9f0      	bls.n	80012e0 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80012fe:	2003      	movs	r0, #3
 8001300:	e7b9      	b.n	8001276 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800130a:	d1e0      	bne.n	80012ce <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
 800130e:	e7b2      	b.n	8001276 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001318:	d1d9      	bne.n	80012ce <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	e7ab      	b.n	8001276 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_RCC_ClockConfig+0x154>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	42ab      	cmp	r3, r5
 8001328:	d90c      	bls.n	8001344 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_RCC_ClockConfig+0x154>)
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f023 030f 	bic.w	r3, r3, #15
 8001332:	432b      	orrs	r3, r5
 8001334:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	42ab      	cmp	r3, r5
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
 8001342:	e798      	b.n	8001276 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	f013 0f04 	tst.w	r3, #4
 800134a:	d006      	beq.n	800135a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 800134e:	6893      	ldr	r3, [r2, #8]
 8001350:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001354:	68e1      	ldr	r1, [r4, #12]
 8001356:	430b      	orrs	r3, r1
 8001358:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f013 0f08 	tst.w	r3, #8
 8001360:	d007      	beq.n	8001372 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 8001364:	6893      	ldr	r3, [r2, #8]
 8001366:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800136a:	6921      	ldr	r1, [r4, #16]
 800136c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001370:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001372:	f7ff ff15 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x15c>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	40d8      	lsrs	r0, r3
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_ClockConfig+0x160>)
 8001386:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001388:	200f      	movs	r0, #15
 800138a:	f7ff fb4b 	bl	8000a24 <HAL_InitTick>
  return HAL_OK;
 800138e:	2000      	movs	r0, #0
 8001390:	e771      	b.n	8001276 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
}
 8001394:	4770      	bx	lr
        return HAL_ERROR;
 8001396:	2001      	movs	r0, #1
 8001398:	e76d      	b.n	8001276 <HAL_RCC_ClockConfig+0x2e>
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08002d80 	.word	0x08002d80
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013ac:	4b01      	ldr	r3, [pc, #4]	; (80013b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000

080013b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013ba:	f7ff fff7 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80013c6:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	bd08      	pop	{r3, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	08002d90 	.word	0x08002d90

080013d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013da:	f7ff ffe7 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80013e6:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80013ea:	40d8      	lsrs	r0, r3
 80013ec:	bd08      	pop	{r3, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	08002d90 	.word	0x08002d90

080013f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013f8:	b510      	push	{r4, lr}
 80013fa:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013fc:	6883      	ldr	r3, [r0, #8]
 80013fe:	6902      	ldr	r2, [r0, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	6942      	ldr	r2, [r0, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	69c2      	ldr	r2, [r0, #28]
 8001408:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800140a:	6801      	ldr	r1, [r0, #0]
 800140c:	6808      	ldr	r0, [r1, #0]
 800140e:	4a99      	ldr	r2, [pc, #612]	; (8001674 <UART_SetConfig+0x27c>)
 8001410:	4002      	ands	r2, r0
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	6853      	ldr	r3, [r2, #4]
 800141a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141e:	68e1      	ldr	r1, [r4, #12]
 8001420:	430b      	orrs	r3, r1
 8001422:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001424:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001426:	6a23      	ldr	r3, [r4, #32]
 8001428:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800142a:	6821      	ldr	r1, [r4, #0]
 800142c:	688b      	ldr	r3, [r1, #8]
 800142e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	4a8f      	ldr	r2, [pc, #572]	; (8001678 <UART_SetConfig+0x280>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d018      	beq.n	8001470 <UART_SetConfig+0x78>
 800143e:	4a8f      	ldr	r2, [pc, #572]	; (800167c <UART_SetConfig+0x284>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d028      	beq.n	8001496 <UART_SetConfig+0x9e>
 8001444:	4a8e      	ldr	r2, [pc, #568]	; (8001680 <UART_SetConfig+0x288>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d03d      	beq.n	80014c6 <UART_SetConfig+0xce>
 800144a:	4a8e      	ldr	r2, [pc, #568]	; (8001684 <UART_SetConfig+0x28c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d050      	beq.n	80014f2 <UART_SetConfig+0xfa>
 8001450:	4a8d      	ldr	r2, [pc, #564]	; (8001688 <UART_SetConfig+0x290>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d062      	beq.n	800151c <UART_SetConfig+0x124>
 8001456:	4a8d      	ldr	r2, [pc, #564]	; (800168c <UART_SetConfig+0x294>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d077      	beq.n	800154c <UART_SetConfig+0x154>
 800145c:	4a8c      	ldr	r2, [pc, #560]	; (8001690 <UART_SetConfig+0x298>)
 800145e:	4293      	cmp	r3, r2
 8001460:	f000 808c 	beq.w	800157c <UART_SetConfig+0x184>
 8001464:	4a8b      	ldr	r2, [pc, #556]	; (8001694 <UART_SetConfig+0x29c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	f000 80a0 	beq.w	80015ac <UART_SetConfig+0x1b4>
 800146c:	2310      	movs	r3, #16
 800146e:	e0b6      	b.n	80015de <UART_SetConfig+0x1e6>
 8001470:	4b89      	ldr	r3, [pc, #548]	; (8001698 <UART_SetConfig+0x2a0>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d809      	bhi.n	8001492 <UART_SetConfig+0x9a>
 800147e:	e8df f003 	tbb	[pc, r3]
 8001482:	0402      	.short	0x0402
 8001484:	06ad      	.short	0x06ad
 8001486:	2301      	movs	r3, #1
 8001488:	e0a9      	b.n	80015de <UART_SetConfig+0x1e6>
 800148a:	2304      	movs	r3, #4
 800148c:	e0a7      	b.n	80015de <UART_SetConfig+0x1e6>
 800148e:	2308      	movs	r3, #8
 8001490:	e0a5      	b.n	80015de <UART_SetConfig+0x1e6>
 8001492:	2310      	movs	r3, #16
 8001494:	e0a3      	b.n	80015de <UART_SetConfig+0x1e6>
 8001496:	4b80      	ldr	r3, [pc, #512]	; (8001698 <UART_SetConfig+0x2a0>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d80e      	bhi.n	80014c2 <UART_SetConfig+0xca>
 80014a4:	e8df f003 	tbb	[pc, r3]
 80014a8:	0d0d0d07 	.word	0x0d0d0d07
 80014ac:	0d0d0d09 	.word	0x0d0d0d09
 80014b0:	0d0d0da9 	.word	0x0d0d0da9
 80014b4:	0b          	.byte	0x0b
 80014b5:	00          	.byte	0x00
 80014b6:	2300      	movs	r3, #0
 80014b8:	e091      	b.n	80015de <UART_SetConfig+0x1e6>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e08f      	b.n	80015de <UART_SetConfig+0x1e6>
 80014be:	2308      	movs	r3, #8
 80014c0:	e08d      	b.n	80015de <UART_SetConfig+0x1e6>
 80014c2:	2310      	movs	r3, #16
 80014c4:	e08b      	b.n	80015de <UART_SetConfig+0x1e6>
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <UART_SetConfig+0x2a0>)
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d00a      	beq.n	80014ea <UART_SetConfig+0xf2>
 80014d4:	d906      	bls.n	80014e4 <UART_SetConfig+0xec>
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	f000 8091 	beq.w	80015fe <UART_SetConfig+0x206>
 80014dc:	2b30      	cmp	r3, #48	; 0x30
 80014de:	d106      	bne.n	80014ee <UART_SetConfig+0xf6>
 80014e0:	2308      	movs	r3, #8
 80014e2:	e07c      	b.n	80015de <UART_SetConfig+0x1e6>
 80014e4:	b91b      	cbnz	r3, 80014ee <UART_SetConfig+0xf6>
 80014e6:	2300      	movs	r3, #0
 80014e8:	e079      	b.n	80015de <UART_SetConfig+0x1e6>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e077      	b.n	80015de <UART_SetConfig+0x1e6>
 80014ee:	2310      	movs	r3, #16
 80014f0:	e075      	b.n	80015de <UART_SetConfig+0x1e6>
 80014f2:	4b69      	ldr	r3, [pc, #420]	; (8001698 <UART_SetConfig+0x2a0>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014fc:	2b40      	cmp	r3, #64	; 0x40
 80014fe:	d009      	beq.n	8001514 <UART_SetConfig+0x11c>
 8001500:	d905      	bls.n	800150e <UART_SetConfig+0x116>
 8001502:	2b80      	cmp	r3, #128	; 0x80
 8001504:	d07d      	beq.n	8001602 <UART_SetConfig+0x20a>
 8001506:	2bc0      	cmp	r3, #192	; 0xc0
 8001508:	d106      	bne.n	8001518 <UART_SetConfig+0x120>
 800150a:	2308      	movs	r3, #8
 800150c:	e067      	b.n	80015de <UART_SetConfig+0x1e6>
 800150e:	b91b      	cbnz	r3, 8001518 <UART_SetConfig+0x120>
 8001510:	2300      	movs	r3, #0
 8001512:	e064      	b.n	80015de <UART_SetConfig+0x1e6>
 8001514:	2304      	movs	r3, #4
 8001516:	e062      	b.n	80015de <UART_SetConfig+0x1e6>
 8001518:	2310      	movs	r3, #16
 800151a:	e060      	b.n	80015de <UART_SetConfig+0x1e6>
 800151c:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <UART_SetConfig+0x2a0>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800152a:	d00b      	beq.n	8001544 <UART_SetConfig+0x14c>
 800152c:	d907      	bls.n	800153e <UART_SetConfig+0x146>
 800152e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001532:	d068      	beq.n	8001606 <UART_SetConfig+0x20e>
 8001534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001538:	d106      	bne.n	8001548 <UART_SetConfig+0x150>
 800153a:	2308      	movs	r3, #8
 800153c:	e04f      	b.n	80015de <UART_SetConfig+0x1e6>
 800153e:	b91b      	cbnz	r3, 8001548 <UART_SetConfig+0x150>
 8001540:	2300      	movs	r3, #0
 8001542:	e04c      	b.n	80015de <UART_SetConfig+0x1e6>
 8001544:	2304      	movs	r3, #4
 8001546:	e04a      	b.n	80015de <UART_SetConfig+0x1e6>
 8001548:	2310      	movs	r3, #16
 800154a:	e048      	b.n	80015de <UART_SetConfig+0x1e6>
 800154c:	4b52      	ldr	r3, [pc, #328]	; (8001698 <UART_SetConfig+0x2a0>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001552:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155a:	d00b      	beq.n	8001574 <UART_SetConfig+0x17c>
 800155c:	d907      	bls.n	800156e <UART_SetConfig+0x176>
 800155e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001562:	d052      	beq.n	800160a <UART_SetConfig+0x212>
 8001564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001568:	d106      	bne.n	8001578 <UART_SetConfig+0x180>
 800156a:	2308      	movs	r3, #8
 800156c:	e037      	b.n	80015de <UART_SetConfig+0x1e6>
 800156e:	b91b      	cbnz	r3, 8001578 <UART_SetConfig+0x180>
 8001570:	2301      	movs	r3, #1
 8001572:	e034      	b.n	80015de <UART_SetConfig+0x1e6>
 8001574:	2304      	movs	r3, #4
 8001576:	e032      	b.n	80015de <UART_SetConfig+0x1e6>
 8001578:	2310      	movs	r3, #16
 800157a:	e030      	b.n	80015de <UART_SetConfig+0x1e6>
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <UART_SetConfig+0x2a0>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158a:	d00b      	beq.n	80015a4 <UART_SetConfig+0x1ac>
 800158c:	d907      	bls.n	800159e <UART_SetConfig+0x1a6>
 800158e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001592:	d03c      	beq.n	800160e <UART_SetConfig+0x216>
 8001594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001598:	d106      	bne.n	80015a8 <UART_SetConfig+0x1b0>
 800159a:	2308      	movs	r3, #8
 800159c:	e01f      	b.n	80015de <UART_SetConfig+0x1e6>
 800159e:	b91b      	cbnz	r3, 80015a8 <UART_SetConfig+0x1b0>
 80015a0:	2300      	movs	r3, #0
 80015a2:	e01c      	b.n	80015de <UART_SetConfig+0x1e6>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e01a      	b.n	80015de <UART_SetConfig+0x1e6>
 80015a8:	2310      	movs	r3, #16
 80015aa:	e018      	b.n	80015de <UART_SetConfig+0x1e6>
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <UART_SetConfig+0x2a0>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ba:	d00b      	beq.n	80015d4 <UART_SetConfig+0x1dc>
 80015bc:	d907      	bls.n	80015ce <UART_SetConfig+0x1d6>
 80015be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c2:	d026      	beq.n	8001612 <UART_SetConfig+0x21a>
 80015c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80015c8:	d106      	bne.n	80015d8 <UART_SetConfig+0x1e0>
 80015ca:	2308      	movs	r3, #8
 80015cc:	e007      	b.n	80015de <UART_SetConfig+0x1e6>
 80015ce:	b91b      	cbnz	r3, 80015d8 <UART_SetConfig+0x1e0>
 80015d0:	2300      	movs	r3, #0
 80015d2:	e004      	b.n	80015de <UART_SetConfig+0x1e6>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e002      	b.n	80015de <UART_SetConfig+0x1e6>
 80015d8:	2310      	movs	r3, #16
 80015da:	e000      	b.n	80015de <UART_SetConfig+0x1e6>
 80015dc:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015de:	69e2      	ldr	r2, [r4, #28]
 80015e0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80015e4:	d017      	beq.n	8001616 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	f200 80b3 	bhi.w	8001752 <UART_SetConfig+0x35a>
 80015ec:	e8df f003 	tbb	[pc, r3]
 80015f0:	b1958b76 	.word	0xb1958b76
 80015f4:	b1b1b19e 	.word	0xb1b1b19e
 80015f8:	a8          	.byte	0xa8
 80015f9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015fa:	2302      	movs	r3, #2
 80015fc:	e7ef      	b.n	80015de <UART_SetConfig+0x1e6>
 80015fe:	2302      	movs	r3, #2
 8001600:	e7ed      	b.n	80015de <UART_SetConfig+0x1e6>
 8001602:	2302      	movs	r3, #2
 8001604:	e7eb      	b.n	80015de <UART_SetConfig+0x1e6>
 8001606:	2302      	movs	r3, #2
 8001608:	e7e9      	b.n	80015de <UART_SetConfig+0x1e6>
 800160a:	2302      	movs	r3, #2
 800160c:	e7e7      	b.n	80015de <UART_SetConfig+0x1e6>
 800160e:	2302      	movs	r3, #2
 8001610:	e7e5      	b.n	80015de <UART_SetConfig+0x1e6>
 8001612:	2302      	movs	r3, #2
 8001614:	e7e3      	b.n	80015de <UART_SetConfig+0x1e6>
    switch (clocksource)
 8001616:	2b08      	cmp	r3, #8
 8001618:	d85d      	bhi.n	80016d6 <UART_SetConfig+0x2de>
 800161a:	e8df f003 	tbb	[pc, r3]
 800161e:	1f05      	.short	0x1f05
 8001620:	5c485c3f 	.word	0x5c485c3f
 8001624:	5c5c      	.short	0x5c5c
 8001626:	53          	.byte	0x53
 8001627:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001628:	f7ff fec6 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 800162c:	6862      	ldr	r2, [r4, #4]
 800162e:	0853      	lsrs	r3, r2, #1
 8001630:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001634:	fbb3 f3f2 	udiv	r3, r3, r2
 8001638:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800163a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800163c:	f1a3 0110 	sub.w	r1, r3, #16
 8001640:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001644:	4291      	cmp	r1, r2
 8001646:	f200 8087 	bhi.w	8001758 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800164a:	b29a      	uxth	r2, r3
 800164c:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001650:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001654:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	60d3      	str	r3, [r2, #12]
 800165a:	e050      	b.n	80016fe <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800165c:	f7ff febc 	bl	80013d8 <HAL_RCC_GetPCLK2Freq>
 8001660:	6862      	ldr	r2, [r4, #4]
 8001662:	0853      	lsrs	r3, r2, #1
 8001664:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001668:	fbb3 f3f2 	udiv	r3, r3, r2
 800166c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800166e:	2000      	movs	r0, #0
        break;
 8001670:	e7e4      	b.n	800163c <UART_SetConfig+0x244>
 8001672:	bf00      	nop
 8001674:	efff69f3 	.word	0xefff69f3
 8001678:	40011000 	.word	0x40011000
 800167c:	40004400 	.word	0x40004400
 8001680:	40004800 	.word	0x40004800
 8001684:	40004c00 	.word	0x40004c00
 8001688:	40005000 	.word	0x40005000
 800168c:	40011400 	.word	0x40011400
 8001690:	40007800 	.word	0x40007800
 8001694:	40007c00 	.word	0x40007c00
 8001698:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <UART_SetConfig+0x368>)
 80016a0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80016a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016aa:	2000      	movs	r0, #0
        break;
 80016ac:	e7c6      	b.n	800163c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016ae:	f7ff fd77 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 80016b2:	6862      	ldr	r2, [r4, #4]
 80016b4:	0853      	lsrs	r3, r2, #1
 80016b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80016be:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016c0:	2000      	movs	r0, #0
        break;
 80016c2:	e7bb      	b.n	800163c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016c4:	6862      	ldr	r2, [r4, #4]
 80016c6:	0853      	lsrs	r3, r2, #1
 80016c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80016cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80016d0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016d2:	2000      	movs	r0, #0
        break;
 80016d4:	e7b2      	b.n	800163c <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80016d8:	2300      	movs	r3, #0
 80016da:	e7af      	b.n	800163c <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016dc:	f7ff fe6c 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 80016e0:	6862      	ldr	r2, [r4, #4]
 80016e2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016ec:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016ee:	f1a3 0110 	sub.w	r1, r3, #16
 80016f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80016f6:	4291      	cmp	r1, r2
 80016f8:	d830      	bhi.n	800175c <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001702:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001704:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001706:	f7ff fe67 	bl	80013d8 <HAL_RCC_GetPCLK2Freq>
 800170a:	6862      	ldr	r2, [r4, #4]
 800170c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001710:	fbb3 f3f2 	udiv	r3, r3, r2
 8001714:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001716:	2000      	movs	r0, #0
        break;
 8001718:	e7e9      	b.n	80016ee <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800171a:	6862      	ldr	r2, [r4, #4]
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <UART_SetConfig+0x36c>)
 800171e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001722:	fbb3 f3f2 	udiv	r3, r3, r2
 8001726:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001728:	2000      	movs	r0, #0
        break;
 800172a:	e7e0      	b.n	80016ee <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800172c:	f7ff fd38 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 8001730:	6862      	ldr	r2, [r4, #4]
 8001732:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001736:	fbb3 f3f2 	udiv	r3, r3, r2
 800173a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800173c:	2000      	movs	r0, #0
        break;
 800173e:	e7d6      	b.n	80016ee <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001740:	6862      	ldr	r2, [r4, #4]
 8001742:	0853      	lsrs	r3, r2, #1
 8001744:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001748:	fbb3 f3f2 	udiv	r3, r3, r2
 800174c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800174e:	2000      	movs	r0, #0
        break;
 8001750:	e7cd      	b.n	80016ee <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8001752:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001754:	2300      	movs	r3, #0
 8001756:	e7ca      	b.n	80016ee <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001758:	2001      	movs	r0, #1
 800175a:	e7d0      	b.n	80016fe <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	e7ce      	b.n	80016fe <UART_SetConfig+0x306>
 8001760:	01e84800 	.word	0x01e84800
 8001764:	00f42400 	.word	0x00f42400

08001768 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800176a:	f013 0f01 	tst.w	r3, #1
 800176e:	d006      	beq.n	800177e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001770:	6802      	ldr	r2, [r0, #0]
 8001772:	6853      	ldr	r3, [r2, #4]
 8001774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001778:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800177a:	430b      	orrs	r3, r1
 800177c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800177e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001780:	f013 0f02 	tst.w	r3, #2
 8001784:	d006      	beq.n	8001794 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001786:	6802      	ldr	r2, [r0, #0]
 8001788:	6853      	ldr	r3, [r2, #4]
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001790:	430b      	orrs	r3, r1
 8001792:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001794:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001796:	f013 0f04 	tst.w	r3, #4
 800179a:	d006      	beq.n	80017aa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800179c:	6802      	ldr	r2, [r0, #0]
 800179e:	6853      	ldr	r3, [r2, #4]
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017ac:	f013 0f08 	tst.w	r3, #8
 80017b0:	d006      	beq.n	80017c0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017b2:	6802      	ldr	r2, [r0, #0]
 80017b4:	6853      	ldr	r3, [r2, #4]
 80017b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017ba:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80017bc:	430b      	orrs	r3, r1
 80017be:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017c2:	f013 0f10 	tst.w	r3, #16
 80017c6:	d006      	beq.n	80017d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017d0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80017d2:	430b      	orrs	r3, r1
 80017d4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80017d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017d8:	f013 0f20 	tst.w	r3, #32
 80017dc:	d006      	beq.n	80017ec <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80017de:	6802      	ldr	r2, [r0, #0]
 80017e0:	6893      	ldr	r3, [r2, #8]
 80017e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017e6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80017ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017f2:	d00a      	beq.n	800180a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017f4:	6802      	ldr	r2, [r0, #0]
 80017f6:	6853      	ldr	r3, [r2, #4]
 80017f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017fe:	430b      	orrs	r3, r1
 8001800:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001802:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001808:	d00b      	beq.n	8001822 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800180a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800180c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001810:	d006      	beq.n	8001820 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001812:	6802      	ldr	r2, [r0, #0]
 8001814:	6853      	ldr	r3, [r2, #4]
 8001816:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800181a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800181c:	430b      	orrs	r3, r1
 800181e:	6053      	str	r3, [r2, #4]
  }
}
 8001820:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001822:	6802      	ldr	r2, [r0, #0]
 8001824:	6853      	ldr	r3, [r2, #4]
 8001826:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800182a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800182c:	430b      	orrs	r3, r1
 800182e:	6053      	str	r3, [r2, #4]
 8001830:	e7eb      	b.n	800180a <UART_AdvFeatureConfig+0xa2>

08001832 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001836:	4605      	mov	r5, r0
 8001838:	460f      	mov	r7, r1
 800183a:	4616      	mov	r6, r2
 800183c:	4698      	mov	r8, r3
 800183e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	ea37 0303 	bics.w	r3, r7, r3
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	42b3      	cmp	r3, r6
 8001850:	d11c      	bne.n	800188c <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001852:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001856:	d0f3      	beq.n	8001840 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001858:	f7ff f92a 	bl	8000ab0 <HAL_GetTick>
 800185c:	eba0 0008 	sub.w	r0, r0, r8
 8001860:	42a0      	cmp	r0, r4
 8001862:	d801      	bhi.n	8001868 <UART_WaitOnFlagUntilTimeout+0x36>
 8001864:	2c00      	cmp	r4, #0
 8001866:	d1eb      	bne.n	8001840 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001868:	682a      	ldr	r2, [r5, #0]
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001870:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001872:	682a      	ldr	r2, [r5, #0]
 8001874:	6893      	ldr	r3, [r2, #8]
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 800187c:	2320      	movs	r3, #32
 800187e:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001880:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001882:	2300      	movs	r3, #0
 8001884:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8001888:	2003      	movs	r0, #3
 800188a:	e000      	b.n	800188e <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 800188c:	2000      	movs	r0, #0
}
 800188e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001892 <HAL_UART_Transmit>:
{
 8001892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800189a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800189c:	2b20      	cmp	r3, #32
 800189e:	d159      	bne.n	8001954 <HAL_UART_Transmit+0xc2>
 80018a0:	4604      	mov	r4, r0
 80018a2:	460d      	mov	r5, r1
 80018a4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80018a6:	fab2 f382 	clz	r3, r2
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2900      	cmp	r1, #0
 80018ae:	bf08      	it	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d153      	bne.n	800195e <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80018b6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d051      	beq.n	8001962 <HAL_UART_Transmit+0xd0>
 80018be:	2301      	movs	r3, #1
 80018c0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018c8:	2321      	movs	r3, #33	; 0x21
 80018ca:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80018cc:	f7ff f8f0 	bl	8000ab0 <HAL_GetTick>
 80018d0:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80018d2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80018d6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018da:	68a3      	ldr	r3, [r4, #8]
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e0:	d002      	beq.n	80018e8 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 80018e2:	f04f 0800 	mov.w	r8, #0
 80018e6:	e010      	b.n	800190a <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018e8:	6923      	ldr	r3, [r4, #16]
 80018ea:	b30b      	cbz	r3, 8001930 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 80018ec:	f04f 0800 	mov.w	r8, #0
 80018f0:	e00b      	b.n	800190a <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018f2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018fc:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80018fe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001902:	3b01      	subs	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800190a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800190e:	b29b      	uxth	r3, r3
 8001910:	b18b      	cbz	r3, 8001936 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001912:	9600      	str	r6, [sp, #0]
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff ff89 	bl	8001832 <UART_WaitOnFlagUntilTimeout>
 8001920:	bb08      	cbnz	r0, 8001966 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 8001922:	2d00      	cmp	r5, #0
 8001924:	d0e5      	beq.n	80018f2 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001926:	f815 2b01 	ldrb.w	r2, [r5], #1
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
 800192e:	e7e6      	b.n	80018fe <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 8001930:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001932:	2500      	movs	r5, #0
 8001934:	e7e9      	b.n	800190a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001936:	9600      	str	r6, [sp, #0]
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	2140      	movs	r1, #64	; 0x40
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff ff77 	bl	8001832 <UART_WaitOnFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	b980      	cbnz	r0, 800196a <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8001948:	2220      	movs	r2, #32
 800194a:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 800194c:	2200      	movs	r2, #0
 800194e:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8001952:	e000      	b.n	8001956 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
}
 8001956:	4618      	mov	r0, r3
 8001958:	b002      	add	sp, #8
 800195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e7f9      	b.n	8001956 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001962:	2302      	movs	r3, #2
 8001964:	e7f7      	b.n	8001956 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e7f5      	b.n	8001956 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e7f3      	b.n	8001956 <HAL_UART_Transmit+0xc4>

0800196e <HAL_UART_Receive>:
{
 800196e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001976:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001978:	2b20      	cmp	r3, #32
 800197a:	d17e      	bne.n	8001a7a <HAL_UART_Receive+0x10c>
 800197c:	4604      	mov	r4, r0
 800197e:	460d      	mov	r5, r1
 8001980:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001982:	fab2 f382 	clz	r3, r2
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2900      	cmp	r1, #0
 800198a:	bf08      	it	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d177      	bne.n	8001a82 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001992:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001996:	2b01      	cmp	r3, #1
 8001998:	d075      	beq.n	8001a86 <HAL_UART_Receive+0x118>
 800199a:	2301      	movs	r3, #1
 800199c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019a4:	2322      	movs	r3, #34	; 0x22
 80019a6:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80019a8:	f7ff f882 	bl	8000ab0 <HAL_GetTick>
 80019ac:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 80019ae:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80019b2:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019bc:	d006      	beq.n	80019cc <HAL_UART_Receive+0x5e>
 80019be:	b9a3      	cbnz	r3, 80019ea <HAL_UART_Receive+0x7c>
 80019c0:	6922      	ldr	r2, [r4, #16]
 80019c2:	b972      	cbnz	r2, 80019e2 <HAL_UART_Receive+0x74>
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019ca:	e014      	b.n	80019f6 <HAL_UART_Receive+0x88>
 80019cc:	6922      	ldr	r2, [r4, #16]
 80019ce:	b922      	cbnz	r2, 80019da <HAL_UART_Receive+0x6c>
 80019d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80019d4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019d8:	e00d      	b.n	80019f6 <HAL_UART_Receive+0x88>
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019e0:	e009      	b.n	80019f6 <HAL_UART_Receive+0x88>
 80019e2:	227f      	movs	r2, #127	; 0x7f
 80019e4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019e8:	e005      	b.n	80019f6 <HAL_UART_Receive+0x88>
 80019ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019ee:	d00a      	beq.n	8001a06 <HAL_UART_Receive+0x98>
 80019f0:	2200      	movs	r2, #0
 80019f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80019f6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019fe:	d00c      	beq.n	8001a1a <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8001a00:	f04f 0900 	mov.w	r9, #0
 8001a04:	e01d      	b.n	8001a42 <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8001a06:	6922      	ldr	r2, [r4, #16]
 8001a08:	b91a      	cbnz	r2, 8001a12 <HAL_UART_Receive+0xa4>
 8001a0a:	227f      	movs	r2, #127	; 0x7f
 8001a0c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a10:	e7f1      	b.n	80019f6 <HAL_UART_Receive+0x88>
 8001a12:	223f      	movs	r2, #63	; 0x3f
 8001a14:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a18:	e7ed      	b.n	80019f6 <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a1a:	6923      	ldr	r3, [r4, #16]
 8001a1c:	b113      	cbz	r3, 8001a24 <HAL_UART_Receive+0xb6>
      pdata16bits = NULL;
 8001a1e:	f04f 0900 	mov.w	r9, #0
 8001a22:	e00e      	b.n	8001a42 <HAL_UART_Receive+0xd4>
      pdata16bits = (uint16_t *) pData;
 8001a24:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001a26:	2500      	movs	r5, #0
 8001a28:	e00b      	b.n	8001a42 <HAL_UART_Receive+0xd4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	ea08 0303 	and.w	r3, r8, r3
 8001a32:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001a36:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001a42:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b18b      	cbz	r3, 8001a6e <HAL_UART_Receive+0x100>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a4a:	9600      	str	r6, [sp, #0]
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2120      	movs	r1, #32
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff feed 	bl	8001832 <UART_WaitOnFlagUntilTimeout>
 8001a58:	b9b8      	cbnz	r0, 8001a8a <HAL_UART_Receive+0x11c>
      if (pdata8bits == NULL)
 8001a5a:	2d00      	cmp	r5, #0
 8001a5c:	d0e5      	beq.n	8001a2a <HAL_UART_Receive+0xbc>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a62:	fa5f f388 	uxtb.w	r3, r8
 8001a66:	4013      	ands	r3, r2
 8001a68:	f805 3b01 	strb.w	r3, [r5], #1
 8001a6c:	e7e3      	b.n	8001a36 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 8001a6e:	2320      	movs	r3, #32
 8001a70:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001a78:	e000      	b.n	8001a7c <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 8001a7a:	2002      	movs	r0, #2
}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
 8001a84:	e7fa      	b.n	8001a7c <HAL_UART_Receive+0x10e>
    __HAL_LOCK(huart);
 8001a86:	2002      	movs	r0, #2
 8001a88:	e7f8      	b.n	8001a7c <HAL_UART_Receive+0x10e>
        return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	e7f6      	b.n	8001a7c <HAL_UART_Receive+0x10e>

08001a8e <UART_CheckIdleState>:
{
 8001a8e:	b510      	push	{r4, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a98:	f7ff f80a 	bl	8000ab0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	f012 0f08 	tst.w	r2, #8
 8001aa4:	d107      	bne.n	8001ab6 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001aaa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4603      	mov	r3, r0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff feb4 	bl	8001832 <UART_WaitOnFlagUntilTimeout>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d0eb      	beq.n	8001aa6 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001ace:	2003      	movs	r0, #3
 8001ad0:	e7ef      	b.n	8001ab2 <UART_CheckIdleState+0x24>

08001ad2 <HAL_UART_Init>:
  if (huart == NULL)
 8001ad2:	b368      	cbz	r0, 8001b30 <HAL_UART_Init+0x5e>
{
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001ada:	b303      	cbz	r3, 8001b1e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001adc:	2324      	movs	r3, #36	; 0x24
 8001ade:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fc84 	bl	80013f8 <UART_SetConfig>
 8001af0:	2801      	cmp	r0, #1
 8001af2:	d013      	beq.n	8001b1c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af6:	b9bb      	cbnz	r3, 8001b28 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	6853      	ldr	r3, [r2, #4]
 8001afc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b00:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	6893      	ldr	r3, [r2, #8]
 8001b06:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b0a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7ff ffb9 	bl	8001a8e <UART_CheckIdleState>
}
 8001b1c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b1e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001b22:	f7fe fe99 	bl	8000858 <HAL_UART_MspInit>
 8001b26:	e7d9      	b.n	8001adc <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff fe1d 	bl	8001768 <UART_AdvFeatureConfig>
 8001b2e:	e7e3      	b.n	8001af8 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
}
 8001b32:	4770      	bx	lr

08001b34 <__sflush_r>:
 8001b34:	898a      	ldrh	r2, [r1, #12]
 8001b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3a:	4605      	mov	r5, r0
 8001b3c:	0710      	lsls	r0, r2, #28
 8001b3e:	460c      	mov	r4, r1
 8001b40:	d458      	bmi.n	8001bf4 <__sflush_r+0xc0>
 8001b42:	684b      	ldr	r3, [r1, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	dc05      	bgt.n	8001b54 <__sflush_r+0x20>
 8001b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dc02      	bgt.n	8001b54 <__sflush_r+0x20>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b56:	2e00      	cmp	r6, #0
 8001b58:	d0f9      	beq.n	8001b4e <__sflush_r+0x1a>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b60:	682f      	ldr	r7, [r5, #0]
 8001b62:	6a21      	ldr	r1, [r4, #32]
 8001b64:	602b      	str	r3, [r5, #0]
 8001b66:	d032      	beq.n	8001bce <__sflush_r+0x9a>
 8001b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b6a:	89a3      	ldrh	r3, [r4, #12]
 8001b6c:	075a      	lsls	r2, r3, #29
 8001b6e:	d505      	bpl.n	8001b7c <__sflush_r+0x48>
 8001b70:	6863      	ldr	r3, [r4, #4]
 8001b72:	1ac0      	subs	r0, r0, r3
 8001b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b76:	b10b      	cbz	r3, 8001b7c <__sflush_r+0x48>
 8001b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b7a:	1ac0      	subs	r0, r0, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4602      	mov	r2, r0
 8001b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b82:	6a21      	ldr	r1, [r4, #32]
 8001b84:	4628      	mov	r0, r5
 8001b86:	47b0      	blx	r6
 8001b88:	1c43      	adds	r3, r0, #1
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	d106      	bne.n	8001b9c <__sflush_r+0x68>
 8001b8e:	6829      	ldr	r1, [r5, #0]
 8001b90:	291d      	cmp	r1, #29
 8001b92:	d848      	bhi.n	8001c26 <__sflush_r+0xf2>
 8001b94:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <__sflush_r+0x108>)
 8001b96:	40ca      	lsrs	r2, r1
 8001b98:	07d6      	lsls	r6, r2, #31
 8001b9a:	d544      	bpl.n	8001c26 <__sflush_r+0xf2>
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6062      	str	r2, [r4, #4]
 8001ba0:	04d9      	lsls	r1, r3, #19
 8001ba2:	6922      	ldr	r2, [r4, #16]
 8001ba4:	6022      	str	r2, [r4, #0]
 8001ba6:	d504      	bpl.n	8001bb2 <__sflush_r+0x7e>
 8001ba8:	1c42      	adds	r2, r0, #1
 8001baa:	d101      	bne.n	8001bb0 <__sflush_r+0x7c>
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	b903      	cbnz	r3, 8001bb2 <__sflush_r+0x7e>
 8001bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8001bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bb4:	602f      	str	r7, [r5, #0]
 8001bb6:	2900      	cmp	r1, #0
 8001bb8:	d0c9      	beq.n	8001b4e <__sflush_r+0x1a>
 8001bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bbe:	4299      	cmp	r1, r3
 8001bc0:	d002      	beq.n	8001bc8 <__sflush_r+0x94>
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f000 f99c 	bl	8001f00 <_free_r>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	6360      	str	r0, [r4, #52]	; 0x34
 8001bcc:	e7c0      	b.n	8001b50 <__sflush_r+0x1c>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	47b0      	blx	r6
 8001bd4:	1c41      	adds	r1, r0, #1
 8001bd6:	d1c8      	bne.n	8001b6a <__sflush_r+0x36>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0c5      	beq.n	8001b6a <__sflush_r+0x36>
 8001bde:	2b1d      	cmp	r3, #29
 8001be0:	d001      	beq.n	8001be6 <__sflush_r+0xb2>
 8001be2:	2b16      	cmp	r3, #22
 8001be4:	d101      	bne.n	8001bea <__sflush_r+0xb6>
 8001be6:	602f      	str	r7, [r5, #0]
 8001be8:	e7b1      	b.n	8001b4e <__sflush_r+0x1a>
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf0:	81a3      	strh	r3, [r4, #12]
 8001bf2:	e7ad      	b.n	8001b50 <__sflush_r+0x1c>
 8001bf4:	690f      	ldr	r7, [r1, #16]
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d0a9      	beq.n	8001b4e <__sflush_r+0x1a>
 8001bfa:	0793      	lsls	r3, r2, #30
 8001bfc:	680e      	ldr	r6, [r1, #0]
 8001bfe:	bf08      	it	eq
 8001c00:	694b      	ldreq	r3, [r1, #20]
 8001c02:	600f      	str	r7, [r1, #0]
 8001c04:	bf18      	it	ne
 8001c06:	2300      	movne	r3, #0
 8001c08:	eba6 0807 	sub.w	r8, r6, r7
 8001c0c:	608b      	str	r3, [r1, #8]
 8001c0e:	f1b8 0f00 	cmp.w	r8, #0
 8001c12:	dd9c      	ble.n	8001b4e <__sflush_r+0x1a>
 8001c14:	4643      	mov	r3, r8
 8001c16:	463a      	mov	r2, r7
 8001c18:	6a21      	ldr	r1, [r4, #32]
 8001c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	47b0      	blx	r6
 8001c20:	2800      	cmp	r0, #0
 8001c22:	dc06      	bgt.n	8001c32 <__sflush_r+0xfe>
 8001c24:	89a3      	ldrh	r3, [r4, #12]
 8001c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	e78e      	b.n	8001b50 <__sflush_r+0x1c>
 8001c32:	4407      	add	r7, r0
 8001c34:	eba8 0800 	sub.w	r8, r8, r0
 8001c38:	e7e9      	b.n	8001c0e <__sflush_r+0xda>
 8001c3a:	bf00      	nop
 8001c3c:	20400001 	.word	0x20400001

08001c40 <_fflush_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	690b      	ldr	r3, [r1, #16]
 8001c44:	4605      	mov	r5, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	b1db      	cbz	r3, 8001c82 <_fflush_r+0x42>
 8001c4a:	b118      	cbz	r0, 8001c54 <_fflush_r+0x14>
 8001c4c:	6983      	ldr	r3, [r0, #24]
 8001c4e:	b90b      	cbnz	r3, 8001c54 <_fflush_r+0x14>
 8001c50:	f000 f872 	bl	8001d38 <__sinit>
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <_fflush_r+0x48>)
 8001c56:	429c      	cmp	r4, r3
 8001c58:	d109      	bne.n	8001c6e <_fflush_r+0x2e>
 8001c5a:	686c      	ldr	r4, [r5, #4]
 8001c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c60:	b17b      	cbz	r3, 8001c82 <_fflush_r+0x42>
 8001c62:	4621      	mov	r1, r4
 8001c64:	4628      	mov	r0, r5
 8001c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c6a:	f7ff bf63 	b.w	8001b34 <__sflush_r>
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_fflush_r+0x4c>)
 8001c70:	429c      	cmp	r4, r3
 8001c72:	d101      	bne.n	8001c78 <_fflush_r+0x38>
 8001c74:	68ac      	ldr	r4, [r5, #8]
 8001c76:	e7f1      	b.n	8001c5c <_fflush_r+0x1c>
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <_fflush_r+0x50>)
 8001c7a:	429c      	cmp	r4, r3
 8001c7c:	bf08      	it	eq
 8001c7e:	68ec      	ldreq	r4, [r5, #12]
 8001c80:	e7ec      	b.n	8001c5c <_fflush_r+0x1c>
 8001c82:	2000      	movs	r0, #0
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
 8001c86:	bf00      	nop
 8001c88:	08002ebc 	.word	0x08002ebc
 8001c8c:	08002edc 	.word	0x08002edc
 8001c90:	08002e9c 	.word	0x08002e9c

08001c94 <fflush>:
 8001c94:	4601      	mov	r1, r0
 8001c96:	b920      	cbnz	r0, 8001ca2 <fflush+0xe>
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <fflush+0x18>)
 8001c9a:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <fflush+0x1c>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f000 b8d3 	b.w	8001e48 <_fwalk_reent>
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <fflush+0x20>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f7ff bfcb 	b.w	8001c40 <_fflush_r>
 8001caa:	bf00      	nop
 8001cac:	08002efc 	.word	0x08002efc
 8001cb0:	08001c41 	.word	0x08001c41
 8001cb4:	2000000c 	.word	0x2000000c

08001cb8 <std>:
 8001cb8:	2300      	movs	r3, #0
 8001cba:	b510      	push	{r4, lr}
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8001cc2:	6083      	str	r3, [r0, #8]
 8001cc4:	8181      	strh	r1, [r0, #12]
 8001cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8001cc8:	81c2      	strh	r2, [r0, #14]
 8001cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cce:	6183      	str	r3, [r0, #24]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	305c      	adds	r0, #92	; 0x5c
 8001cd6:	f000 f90b 	bl	8001ef0 <memset>
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <std+0x38>)
 8001cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <std+0x3c>)
 8001ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <std+0x40>)
 8001ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <std+0x44>)
 8001ce8:	6224      	str	r4, [r4, #32]
 8001cea:	6323      	str	r3, [r4, #48]	; 0x30
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	bf00      	nop
 8001cf0:	08002191 	.word	0x08002191
 8001cf4:	080021b3 	.word	0x080021b3
 8001cf8:	080021eb 	.word	0x080021eb
 8001cfc:	0800220f 	.word	0x0800220f

08001d00 <_cleanup_r>:
 8001d00:	4901      	ldr	r1, [pc, #4]	; (8001d08 <_cleanup_r+0x8>)
 8001d02:	f000 b8a1 	b.w	8001e48 <_fwalk_reent>
 8001d06:	bf00      	nop
 8001d08:	08001c41 	.word	0x08001c41

08001d0c <__sfmoreglue>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	1e4a      	subs	r2, r1, #1
 8001d10:	2568      	movs	r5, #104	; 0x68
 8001d12:	4355      	muls	r5, r2
 8001d14:	460e      	mov	r6, r1
 8001d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d1a:	f000 f93f 	bl	8001f9c <_malloc_r>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	b140      	cbz	r0, 8001d34 <__sfmoreglue+0x28>
 8001d22:	2100      	movs	r1, #0
 8001d24:	e9c0 1600 	strd	r1, r6, [r0]
 8001d28:	300c      	adds	r0, #12
 8001d2a:	60a0      	str	r0, [r4, #8]
 8001d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d30:	f000 f8de 	bl	8001ef0 <memset>
 8001d34:	4620      	mov	r0, r4
 8001d36:	bd70      	pop	{r4, r5, r6, pc}

08001d38 <__sinit>:
 8001d38:	6983      	ldr	r3, [r0, #24]
 8001d3a:	b510      	push	{r4, lr}
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	bb33      	cbnz	r3, 8001d8e <__sinit+0x56>
 8001d40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001d44:	6503      	str	r3, [r0, #80]	; 0x50
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <__sinit+0x58>)
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <__sinit+0x5c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6282      	str	r2, [r0, #40]	; 0x28
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	bf04      	itt	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	6183      	streq	r3, [r0, #24]
 8001d56:	f000 f81f 	bl	8001d98 <__sfp>
 8001d5a:	6060      	str	r0, [r4, #4]
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f000 f81b 	bl	8001d98 <__sfp>
 8001d62:	60a0      	str	r0, [r4, #8]
 8001d64:	4620      	mov	r0, r4
 8001d66:	f000 f817 	bl	8001d98 <__sfp>
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60e0      	str	r0, [r4, #12]
 8001d6e:	2104      	movs	r1, #4
 8001d70:	6860      	ldr	r0, [r4, #4]
 8001d72:	f7ff ffa1 	bl	8001cb8 <std>
 8001d76:	2201      	movs	r2, #1
 8001d78:	2109      	movs	r1, #9
 8001d7a:	68a0      	ldr	r0, [r4, #8]
 8001d7c:	f7ff ff9c 	bl	8001cb8 <std>
 8001d80:	2202      	movs	r2, #2
 8001d82:	2112      	movs	r1, #18
 8001d84:	68e0      	ldr	r0, [r4, #12]
 8001d86:	f7ff ff97 	bl	8001cb8 <std>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61a3      	str	r3, [r4, #24]
 8001d8e:	bd10      	pop	{r4, pc}
 8001d90:	08002efc 	.word	0x08002efc
 8001d94:	08001d01 	.word	0x08001d01

08001d98 <__sfp>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <__sfp+0x70>)
 8001d9c:	681e      	ldr	r6, [r3, #0]
 8001d9e:	69b3      	ldr	r3, [r6, #24]
 8001da0:	4607      	mov	r7, r0
 8001da2:	b913      	cbnz	r3, 8001daa <__sfp+0x12>
 8001da4:	4630      	mov	r0, r6
 8001da6:	f7ff ffc7 	bl	8001d38 <__sinit>
 8001daa:	3648      	adds	r6, #72	; 0x48
 8001dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	d503      	bpl.n	8001dbc <__sfp+0x24>
 8001db4:	6833      	ldr	r3, [r6, #0]
 8001db6:	b133      	cbz	r3, 8001dc6 <__sfp+0x2e>
 8001db8:	6836      	ldr	r6, [r6, #0]
 8001dba:	e7f7      	b.n	8001dac <__sfp+0x14>
 8001dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001dc0:	b16d      	cbz	r5, 8001dde <__sfp+0x46>
 8001dc2:	3468      	adds	r4, #104	; 0x68
 8001dc4:	e7f4      	b.n	8001db0 <__sfp+0x18>
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	4638      	mov	r0, r7
 8001dca:	f7ff ff9f 	bl	8001d0c <__sfmoreglue>
 8001dce:	6030      	str	r0, [r6, #0]
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d1f1      	bne.n	8001db8 <__sfp+0x20>
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4604      	mov	r4, r0
 8001dda:	4620      	mov	r0, r4
 8001ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <__sfp+0x74>)
 8001de0:	6665      	str	r5, [r4, #100]	; 0x64
 8001de2:	e9c4 5500 	strd	r5, r5, [r4]
 8001de6:	60a5      	str	r5, [r4, #8]
 8001de8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001dec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4629      	mov	r1, r5
 8001df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001df8:	f000 f87a 	bl	8001ef0 <memset>
 8001dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e04:	e7e9      	b.n	8001dda <__sfp+0x42>
 8001e06:	bf00      	nop
 8001e08:	08002efc 	.word	0x08002efc
 8001e0c:	ffff0001 	.word	0xffff0001

08001e10 <_fwalk>:
 8001e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e14:	4688      	mov	r8, r1
 8001e16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e1a:	2600      	movs	r6, #0
 8001e1c:	b914      	cbnz	r4, 8001e24 <_fwalk+0x14>
 8001e1e:	4630      	mov	r0, r6
 8001e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e24:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e28:	3f01      	subs	r7, #1
 8001e2a:	d501      	bpl.n	8001e30 <_fwalk+0x20>
 8001e2c:	6824      	ldr	r4, [r4, #0]
 8001e2e:	e7f5      	b.n	8001e1c <_fwalk+0xc>
 8001e30:	89ab      	ldrh	r3, [r5, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d906      	bls.n	8001e44 <_fwalk+0x34>
 8001e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <_fwalk+0x34>
 8001e3e:	4628      	mov	r0, r5
 8001e40:	47c0      	blx	r8
 8001e42:	4306      	orrs	r6, r0
 8001e44:	3568      	adds	r5, #104	; 0x68
 8001e46:	e7ef      	b.n	8001e28 <_fwalk+0x18>

08001e48 <_fwalk_reent>:
 8001e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	4689      	mov	r9, r1
 8001e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e54:	2600      	movs	r6, #0
 8001e56:	b914      	cbnz	r4, 8001e5e <_fwalk_reent+0x16>
 8001e58:	4630      	mov	r0, r6
 8001e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e62:	3f01      	subs	r7, #1
 8001e64:	d501      	bpl.n	8001e6a <_fwalk_reent+0x22>
 8001e66:	6824      	ldr	r4, [r4, #0]
 8001e68:	e7f5      	b.n	8001e56 <_fwalk_reent+0xe>
 8001e6a:	89ab      	ldrh	r3, [r5, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d907      	bls.n	8001e80 <_fwalk_reent+0x38>
 8001e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e74:	3301      	adds	r3, #1
 8001e76:	d003      	beq.n	8001e80 <_fwalk_reent+0x38>
 8001e78:	4629      	mov	r1, r5
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	47c8      	blx	r9
 8001e7e:	4306      	orrs	r6, r0
 8001e80:	3568      	adds	r5, #104	; 0x68
 8001e82:	e7ee      	b.n	8001e62 <_fwalk_reent+0x1a>

08001e84 <getchar>:
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <getchar+0x20>)
 8001e86:	b510      	push	{r4, lr}
 8001e88:	681c      	ldr	r4, [r3, #0]
 8001e8a:	b124      	cbz	r4, 8001e96 <getchar+0x12>
 8001e8c:	69a3      	ldr	r3, [r4, #24]
 8001e8e:	b913      	cbnz	r3, 8001e96 <getchar+0x12>
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff ff51 	bl	8001d38 <__sinit>
 8001e96:	6861      	ldr	r1, [r4, #4]
 8001e98:	4620      	mov	r0, r4
 8001e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e9e:	f000 ba9d 	b.w	80023dc <_getc_r>
 8001ea2:	bf00      	nop
 8001ea4:	2000000c 	.word	0x2000000c

08001ea8 <__libc_init_array>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	4e0d      	ldr	r6, [pc, #52]	; (8001ee0 <__libc_init_array+0x38>)
 8001eac:	4c0d      	ldr	r4, [pc, #52]	; (8001ee4 <__libc_init_array+0x3c>)
 8001eae:	1ba4      	subs	r4, r4, r6
 8001eb0:	10a4      	asrs	r4, r4, #2
 8001eb2:	2500      	movs	r5, #0
 8001eb4:	42a5      	cmp	r5, r4
 8001eb6:	d109      	bne.n	8001ecc <__libc_init_array+0x24>
 8001eb8:	4e0b      	ldr	r6, [pc, #44]	; (8001ee8 <__libc_init_array+0x40>)
 8001eba:	4c0c      	ldr	r4, [pc, #48]	; (8001eec <__libc_init_array+0x44>)
 8001ebc:	f000 ff54 	bl	8002d68 <_init>
 8001ec0:	1ba4      	subs	r4, r4, r6
 8001ec2:	10a4      	asrs	r4, r4, #2
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	42a5      	cmp	r5, r4
 8001ec8:	d105      	bne.n	8001ed6 <__libc_init_array+0x2e>
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed0:	4798      	blx	r3
 8001ed2:	3501      	adds	r5, #1
 8001ed4:	e7ee      	b.n	8001eb4 <__libc_init_array+0xc>
 8001ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eda:	4798      	blx	r3
 8001edc:	3501      	adds	r5, #1
 8001ede:	e7f2      	b.n	8001ec6 <__libc_init_array+0x1e>
 8001ee0:	08002f3c 	.word	0x08002f3c
 8001ee4:	08002f3c 	.word	0x08002f3c
 8001ee8:	08002f3c 	.word	0x08002f3c
 8001eec:	08002f40 	.word	0x08002f40

08001ef0 <memset>:
 8001ef0:	4402      	add	r2, r0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d100      	bne.n	8001efa <memset+0xa>
 8001ef8:	4770      	bx	lr
 8001efa:	f803 1b01 	strb.w	r1, [r3], #1
 8001efe:	e7f9      	b.n	8001ef4 <memset+0x4>

08001f00 <_free_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	4605      	mov	r5, r0
 8001f04:	2900      	cmp	r1, #0
 8001f06:	d045      	beq.n	8001f94 <_free_r+0x94>
 8001f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f0c:	1f0c      	subs	r4, r1, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bfb8      	it	lt
 8001f12:	18e4      	addlt	r4, r4, r3
 8001f14:	f000 fb04 	bl	8002520 <__malloc_lock>
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <_free_r+0x98>)
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	b933      	cbnz	r3, 8001f2e <_free_r+0x2e>
 8001f20:	6063      	str	r3, [r4, #4]
 8001f22:	6014      	str	r4, [r2, #0]
 8001f24:	4628      	mov	r0, r5
 8001f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f2a:	f000 bafa 	b.w	8002522 <__malloc_unlock>
 8001f2e:	42a3      	cmp	r3, r4
 8001f30:	d90c      	bls.n	8001f4c <_free_r+0x4c>
 8001f32:	6821      	ldr	r1, [r4, #0]
 8001f34:	1862      	adds	r2, r4, r1
 8001f36:	4293      	cmp	r3, r2
 8001f38:	bf04      	itt	eq
 8001f3a:	681a      	ldreq	r2, [r3, #0]
 8001f3c:	685b      	ldreq	r3, [r3, #4]
 8001f3e:	6063      	str	r3, [r4, #4]
 8001f40:	bf04      	itt	eq
 8001f42:	1852      	addeq	r2, r2, r1
 8001f44:	6022      	streq	r2, [r4, #0]
 8001f46:	6004      	str	r4, [r0, #0]
 8001f48:	e7ec      	b.n	8001f24 <_free_r+0x24>
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	b10a      	cbz	r2, 8001f54 <_free_r+0x54>
 8001f50:	42a2      	cmp	r2, r4
 8001f52:	d9fa      	bls.n	8001f4a <_free_r+0x4a>
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	1858      	adds	r0, r3, r1
 8001f58:	42a0      	cmp	r0, r4
 8001f5a:	d10b      	bne.n	8001f74 <_free_r+0x74>
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	4401      	add	r1, r0
 8001f60:	1858      	adds	r0, r3, r1
 8001f62:	4282      	cmp	r2, r0
 8001f64:	6019      	str	r1, [r3, #0]
 8001f66:	d1dd      	bne.n	8001f24 <_free_r+0x24>
 8001f68:	6810      	ldr	r0, [r2, #0]
 8001f6a:	6852      	ldr	r2, [r2, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	4401      	add	r1, r0
 8001f70:	6019      	str	r1, [r3, #0]
 8001f72:	e7d7      	b.n	8001f24 <_free_r+0x24>
 8001f74:	d902      	bls.n	8001f7c <_free_r+0x7c>
 8001f76:	230c      	movs	r3, #12
 8001f78:	602b      	str	r3, [r5, #0]
 8001f7a:	e7d3      	b.n	8001f24 <_free_r+0x24>
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	1821      	adds	r1, r4, r0
 8001f80:	428a      	cmp	r2, r1
 8001f82:	bf04      	itt	eq
 8001f84:	6811      	ldreq	r1, [r2, #0]
 8001f86:	6852      	ldreq	r2, [r2, #4]
 8001f88:	6062      	str	r2, [r4, #4]
 8001f8a:	bf04      	itt	eq
 8001f8c:	1809      	addeq	r1, r1, r0
 8001f8e:	6021      	streq	r1, [r4, #0]
 8001f90:	605c      	str	r4, [r3, #4]
 8001f92:	e7c7      	b.n	8001f24 <_free_r+0x24>
 8001f94:	bd38      	pop	{r3, r4, r5, pc}
 8001f96:	bf00      	nop
 8001f98:	2000008c 	.word	0x2000008c

08001f9c <_malloc_r>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	1ccd      	adds	r5, r1, #3
 8001fa0:	f025 0503 	bic.w	r5, r5, #3
 8001fa4:	3508      	adds	r5, #8
 8001fa6:	2d0c      	cmp	r5, #12
 8001fa8:	bf38      	it	cc
 8001faa:	250c      	movcc	r5, #12
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	4606      	mov	r6, r0
 8001fb0:	db01      	blt.n	8001fb6 <_malloc_r+0x1a>
 8001fb2:	42a9      	cmp	r1, r5
 8001fb4:	d903      	bls.n	8001fbe <_malloc_r+0x22>
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	6033      	str	r3, [r6, #0]
 8001fba:	2000      	movs	r0, #0
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
 8001fbe:	f000 faaf 	bl	8002520 <__malloc_lock>
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <_malloc_r+0xac>)
 8001fc4:	6814      	ldr	r4, [r2, #0]
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	b991      	cbnz	r1, 8001ff0 <_malloc_r+0x54>
 8001fca:	4c20      	ldr	r4, [pc, #128]	; (800204c <_malloc_r+0xb0>)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	b91b      	cbnz	r3, 8001fd8 <_malloc_r+0x3c>
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f000 f8cd 	bl	8002170 <_sbrk_r>
 8001fd6:	6020      	str	r0, [r4, #0]
 8001fd8:	4629      	mov	r1, r5
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f000 f8c8 	bl	8002170 <_sbrk_r>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d124      	bne.n	800202e <_malloc_r+0x92>
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	6033      	str	r3, [r6, #0]
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f000 fa9a 	bl	8002522 <__malloc_unlock>
 8001fee:	e7e4      	b.n	8001fba <_malloc_r+0x1e>
 8001ff0:	680b      	ldr	r3, [r1, #0]
 8001ff2:	1b5b      	subs	r3, r3, r5
 8001ff4:	d418      	bmi.n	8002028 <_malloc_r+0x8c>
 8001ff6:	2b0b      	cmp	r3, #11
 8001ff8:	d90f      	bls.n	800201a <_malloc_r+0x7e>
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	50cd      	str	r5, [r1, r3]
 8001ffe:	18cc      	adds	r4, r1, r3
 8002000:	4630      	mov	r0, r6
 8002002:	f000 fa8e 	bl	8002522 <__malloc_unlock>
 8002006:	f104 000b 	add.w	r0, r4, #11
 800200a:	1d23      	adds	r3, r4, #4
 800200c:	f020 0007 	bic.w	r0, r0, #7
 8002010:	1ac3      	subs	r3, r0, r3
 8002012:	d0d3      	beq.n	8001fbc <_malloc_r+0x20>
 8002014:	425a      	negs	r2, r3
 8002016:	50e2      	str	r2, [r4, r3]
 8002018:	e7d0      	b.n	8001fbc <_malloc_r+0x20>
 800201a:	428c      	cmp	r4, r1
 800201c:	684b      	ldr	r3, [r1, #4]
 800201e:	bf16      	itet	ne
 8002020:	6063      	strne	r3, [r4, #4]
 8002022:	6013      	streq	r3, [r2, #0]
 8002024:	460c      	movne	r4, r1
 8002026:	e7eb      	b.n	8002000 <_malloc_r+0x64>
 8002028:	460c      	mov	r4, r1
 800202a:	6849      	ldr	r1, [r1, #4]
 800202c:	e7cc      	b.n	8001fc8 <_malloc_r+0x2c>
 800202e:	1cc4      	adds	r4, r0, #3
 8002030:	f024 0403 	bic.w	r4, r4, #3
 8002034:	42a0      	cmp	r0, r4
 8002036:	d005      	beq.n	8002044 <_malloc_r+0xa8>
 8002038:	1a21      	subs	r1, r4, r0
 800203a:	4630      	mov	r0, r6
 800203c:	f000 f898 	bl	8002170 <_sbrk_r>
 8002040:	3001      	adds	r0, #1
 8002042:	d0cf      	beq.n	8001fe4 <_malloc_r+0x48>
 8002044:	6025      	str	r5, [r4, #0]
 8002046:	e7db      	b.n	8002000 <_malloc_r+0x64>
 8002048:	2000008c 	.word	0x2000008c
 800204c:	20000090 	.word	0x20000090

08002050 <iprintf>:
 8002050:	b40f      	push	{r0, r1, r2, r3}
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <iprintf+0x2c>)
 8002054:	b513      	push	{r0, r1, r4, lr}
 8002056:	681c      	ldr	r4, [r3, #0]
 8002058:	b124      	cbz	r4, 8002064 <iprintf+0x14>
 800205a:	69a3      	ldr	r3, [r4, #24]
 800205c:	b913      	cbnz	r3, 8002064 <iprintf+0x14>
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff fe6a 	bl	8001d38 <__sinit>
 8002064:	ab05      	add	r3, sp, #20
 8002066:	9a04      	ldr	r2, [sp, #16]
 8002068:	68a1      	ldr	r1, [r4, #8]
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	4620      	mov	r0, r4
 800206e:	f000 fa83 	bl	8002578 <_vfiprintf_r>
 8002072:	b002      	add	sp, #8
 8002074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002078:	b004      	add	sp, #16
 800207a:	4770      	bx	lr
 800207c:	2000000c 	.word	0x2000000c

08002080 <putchar>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <putchar+0x24>)
 8002084:	681c      	ldr	r4, [r3, #0]
 8002086:	4605      	mov	r5, r0
 8002088:	b124      	cbz	r4, 8002094 <putchar+0x14>
 800208a:	69a3      	ldr	r3, [r4, #24]
 800208c:	b913      	cbnz	r3, 8002094 <putchar+0x14>
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff fe52 	bl	8001d38 <__sinit>
 8002094:	68a2      	ldr	r2, [r4, #8]
 8002096:	4629      	mov	r1, r5
 8002098:	4620      	mov	r0, r4
 800209a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800209e:	f000 bd09 	b.w	8002ab4 <_putc_r>
 80020a2:	bf00      	nop
 80020a4:	2000000c 	.word	0x2000000c

080020a8 <_puts_r>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460e      	mov	r6, r1
 80020ac:	4605      	mov	r5, r0
 80020ae:	b118      	cbz	r0, 80020b8 <_puts_r+0x10>
 80020b0:	6983      	ldr	r3, [r0, #24]
 80020b2:	b90b      	cbnz	r3, 80020b8 <_puts_r+0x10>
 80020b4:	f7ff fe40 	bl	8001d38 <__sinit>
 80020b8:	69ab      	ldr	r3, [r5, #24]
 80020ba:	68ac      	ldr	r4, [r5, #8]
 80020bc:	b913      	cbnz	r3, 80020c4 <_puts_r+0x1c>
 80020be:	4628      	mov	r0, r5
 80020c0:	f7ff fe3a 	bl	8001d38 <__sinit>
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <_puts_r+0xac>)
 80020c6:	429c      	cmp	r4, r3
 80020c8:	d117      	bne.n	80020fa <_puts_r+0x52>
 80020ca:	686c      	ldr	r4, [r5, #4]
 80020cc:	89a3      	ldrh	r3, [r4, #12]
 80020ce:	071b      	lsls	r3, r3, #28
 80020d0:	d51d      	bpl.n	800210e <_puts_r+0x66>
 80020d2:	6923      	ldr	r3, [r4, #16]
 80020d4:	b1db      	cbz	r3, 800210e <_puts_r+0x66>
 80020d6:	3e01      	subs	r6, #1
 80020d8:	68a3      	ldr	r3, [r4, #8]
 80020da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020de:	3b01      	subs	r3, #1
 80020e0:	60a3      	str	r3, [r4, #8]
 80020e2:	b9e9      	cbnz	r1, 8002120 <_puts_r+0x78>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da2e      	bge.n	8002146 <_puts_r+0x9e>
 80020e8:	4622      	mov	r2, r4
 80020ea:	210a      	movs	r1, #10
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 f893 	bl	8002218 <__swbuf_r>
 80020f2:	3001      	adds	r0, #1
 80020f4:	d011      	beq.n	800211a <_puts_r+0x72>
 80020f6:	200a      	movs	r0, #10
 80020f8:	e011      	b.n	800211e <_puts_r+0x76>
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <_puts_r+0xb0>)
 80020fc:	429c      	cmp	r4, r3
 80020fe:	d101      	bne.n	8002104 <_puts_r+0x5c>
 8002100:	68ac      	ldr	r4, [r5, #8]
 8002102:	e7e3      	b.n	80020cc <_puts_r+0x24>
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <_puts_r+0xb4>)
 8002106:	429c      	cmp	r4, r3
 8002108:	bf08      	it	eq
 800210a:	68ec      	ldreq	r4, [r5, #12]
 800210c:	e7de      	b.n	80020cc <_puts_r+0x24>
 800210e:	4621      	mov	r1, r4
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f8e5 	bl	80022e0 <__swsetup_r>
 8002116:	2800      	cmp	r0, #0
 8002118:	d0dd      	beq.n	80020d6 <_puts_r+0x2e>
 800211a:	f04f 30ff 	mov.w	r0, #4294967295
 800211e:	bd70      	pop	{r4, r5, r6, pc}
 8002120:	2b00      	cmp	r3, #0
 8002122:	da04      	bge.n	800212e <_puts_r+0x86>
 8002124:	69a2      	ldr	r2, [r4, #24]
 8002126:	429a      	cmp	r2, r3
 8002128:	dc06      	bgt.n	8002138 <_puts_r+0x90>
 800212a:	290a      	cmp	r1, #10
 800212c:	d004      	beq.n	8002138 <_puts_r+0x90>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	6022      	str	r2, [r4, #0]
 8002134:	7019      	strb	r1, [r3, #0]
 8002136:	e7cf      	b.n	80020d8 <_puts_r+0x30>
 8002138:	4622      	mov	r2, r4
 800213a:	4628      	mov	r0, r5
 800213c:	f000 f86c 	bl	8002218 <__swbuf_r>
 8002140:	3001      	adds	r0, #1
 8002142:	d1c9      	bne.n	80020d8 <_puts_r+0x30>
 8002144:	e7e9      	b.n	800211a <_puts_r+0x72>
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	200a      	movs	r0, #10
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	6022      	str	r2, [r4, #0]
 800214e:	7018      	strb	r0, [r3, #0]
 8002150:	e7e5      	b.n	800211e <_puts_r+0x76>
 8002152:	bf00      	nop
 8002154:	08002ebc 	.word	0x08002ebc
 8002158:	08002edc 	.word	0x08002edc
 800215c:	08002e9c 	.word	0x08002e9c

08002160 <puts>:
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <puts+0xc>)
 8002162:	4601      	mov	r1, r0
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f7ff bf9f 	b.w	80020a8 <_puts_r>
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <_sbrk_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4c06      	ldr	r4, [pc, #24]	; (800218c <_sbrk_r+0x1c>)
 8002174:	2300      	movs	r3, #0
 8002176:	4605      	mov	r5, r0
 8002178:	4608      	mov	r0, r1
 800217a:	6023      	str	r3, [r4, #0]
 800217c:	f000 fde6 	bl	8002d4c <_sbrk>
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	d102      	bne.n	800218a <_sbrk_r+0x1a>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	b103      	cbz	r3, 800218a <_sbrk_r+0x1a>
 8002188:	602b      	str	r3, [r5, #0]
 800218a:	bd38      	pop	{r3, r4, r5, pc}
 800218c:	2000011c 	.word	0x2000011c

08002190 <__sread>:
 8002190:	b510      	push	{r4, lr}
 8002192:	460c      	mov	r4, r1
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	f000 fcc2 	bl	8002b20 <_read_r>
 800219c:	2800      	cmp	r0, #0
 800219e:	bfab      	itete	ge
 80021a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021a2:	89a3      	ldrhlt	r3, [r4, #12]
 80021a4:	181b      	addge	r3, r3, r0
 80021a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021aa:	bfac      	ite	ge
 80021ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ae:	81a3      	strhlt	r3, [r4, #12]
 80021b0:	bd10      	pop	{r4, pc}

080021b2 <__swrite>:
 80021b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	461f      	mov	r7, r3
 80021b8:	898b      	ldrh	r3, [r1, #12]
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	4605      	mov	r5, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4616      	mov	r6, r2
 80021c2:	d505      	bpl.n	80021d0 <__swrite+0x1e>
 80021c4:	2302      	movs	r3, #2
 80021c6:	2200      	movs	r2, #0
 80021c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021cc:	f000 f932 	bl	8002434 <_lseek_r>
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021da:	81a3      	strh	r3, [r4, #12]
 80021dc:	4632      	mov	r2, r6
 80021de:	463b      	mov	r3, r7
 80021e0:	4628      	mov	r0, r5
 80021e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021e6:	f000 b869 	b.w	80022bc <_write_r>

080021ea <__sseek>:
 80021ea:	b510      	push	{r4, lr}
 80021ec:	460c      	mov	r4, r1
 80021ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f2:	f000 f91f 	bl	8002434 <_lseek_r>
 80021f6:	1c43      	adds	r3, r0, #1
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	bf15      	itete	ne
 80021fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80021fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002206:	81a3      	strheq	r3, [r4, #12]
 8002208:	bf18      	it	ne
 800220a:	81a3      	strhne	r3, [r4, #12]
 800220c:	bd10      	pop	{r4, pc}

0800220e <__sclose>:
 800220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002212:	f000 b8d3 	b.w	80023bc <_close_r>
	...

08002218 <__swbuf_r>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	460e      	mov	r6, r1
 800221c:	4614      	mov	r4, r2
 800221e:	4605      	mov	r5, r0
 8002220:	b118      	cbz	r0, 800222a <__swbuf_r+0x12>
 8002222:	6983      	ldr	r3, [r0, #24]
 8002224:	b90b      	cbnz	r3, 800222a <__swbuf_r+0x12>
 8002226:	f7ff fd87 	bl	8001d38 <__sinit>
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <__swbuf_r+0x98>)
 800222c:	429c      	cmp	r4, r3
 800222e:	d12a      	bne.n	8002286 <__swbuf_r+0x6e>
 8002230:	686c      	ldr	r4, [r5, #4]
 8002232:	69a3      	ldr	r3, [r4, #24]
 8002234:	60a3      	str	r3, [r4, #8]
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	071a      	lsls	r2, r3, #28
 800223a:	d52e      	bpl.n	800229a <__swbuf_r+0x82>
 800223c:	6923      	ldr	r3, [r4, #16]
 800223e:	b363      	cbz	r3, 800229a <__swbuf_r+0x82>
 8002240:	6923      	ldr	r3, [r4, #16]
 8002242:	6820      	ldr	r0, [r4, #0]
 8002244:	1ac0      	subs	r0, r0, r3
 8002246:	6963      	ldr	r3, [r4, #20]
 8002248:	b2f6      	uxtb	r6, r6
 800224a:	4283      	cmp	r3, r0
 800224c:	4637      	mov	r7, r6
 800224e:	dc04      	bgt.n	800225a <__swbuf_r+0x42>
 8002250:	4621      	mov	r1, r4
 8002252:	4628      	mov	r0, r5
 8002254:	f7ff fcf4 	bl	8001c40 <_fflush_r>
 8002258:	bb28      	cbnz	r0, 80022a6 <__swbuf_r+0x8e>
 800225a:	68a3      	ldr	r3, [r4, #8]
 800225c:	3b01      	subs	r3, #1
 800225e:	60a3      	str	r3, [r4, #8]
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	6022      	str	r2, [r4, #0]
 8002266:	701e      	strb	r6, [r3, #0]
 8002268:	6963      	ldr	r3, [r4, #20]
 800226a:	3001      	adds	r0, #1
 800226c:	4283      	cmp	r3, r0
 800226e:	d004      	beq.n	800227a <__swbuf_r+0x62>
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	07db      	lsls	r3, r3, #31
 8002274:	d519      	bpl.n	80022aa <__swbuf_r+0x92>
 8002276:	2e0a      	cmp	r6, #10
 8002278:	d117      	bne.n	80022aa <__swbuf_r+0x92>
 800227a:	4621      	mov	r1, r4
 800227c:	4628      	mov	r0, r5
 800227e:	f7ff fcdf 	bl	8001c40 <_fflush_r>
 8002282:	b190      	cbz	r0, 80022aa <__swbuf_r+0x92>
 8002284:	e00f      	b.n	80022a6 <__swbuf_r+0x8e>
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <__swbuf_r+0x9c>)
 8002288:	429c      	cmp	r4, r3
 800228a:	d101      	bne.n	8002290 <__swbuf_r+0x78>
 800228c:	68ac      	ldr	r4, [r5, #8]
 800228e:	e7d0      	b.n	8002232 <__swbuf_r+0x1a>
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <__swbuf_r+0xa0>)
 8002292:	429c      	cmp	r4, r3
 8002294:	bf08      	it	eq
 8002296:	68ec      	ldreq	r4, [r5, #12]
 8002298:	e7cb      	b.n	8002232 <__swbuf_r+0x1a>
 800229a:	4621      	mov	r1, r4
 800229c:	4628      	mov	r0, r5
 800229e:	f000 f81f 	bl	80022e0 <__swsetup_r>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d0cc      	beq.n	8002240 <__swbuf_r+0x28>
 80022a6:	f04f 37ff 	mov.w	r7, #4294967295
 80022aa:	4638      	mov	r0, r7
 80022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	08002ebc 	.word	0x08002ebc
 80022b4:	08002edc 	.word	0x08002edc
 80022b8:	08002e9c 	.word	0x08002e9c

080022bc <_write_r>:
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4c07      	ldr	r4, [pc, #28]	; (80022dc <_write_r+0x20>)
 80022c0:	4605      	mov	r5, r0
 80022c2:	4608      	mov	r0, r1
 80022c4:	4611      	mov	r1, r2
 80022c6:	2200      	movs	r2, #0
 80022c8:	6022      	str	r2, [r4, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f7fe fb3c 	bl	8000948 <_write>
 80022d0:	1c43      	adds	r3, r0, #1
 80022d2:	d102      	bne.n	80022da <_write_r+0x1e>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	b103      	cbz	r3, 80022da <_write_r+0x1e>
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	bd38      	pop	{r3, r4, r5, pc}
 80022dc:	2000011c 	.word	0x2000011c

080022e0 <__swsetup_r>:
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <__swsetup_r+0xcc>)
 80022e2:	b570      	push	{r4, r5, r6, lr}
 80022e4:	681d      	ldr	r5, [r3, #0]
 80022e6:	4606      	mov	r6, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	b125      	cbz	r5, 80022f6 <__swsetup_r+0x16>
 80022ec:	69ab      	ldr	r3, [r5, #24]
 80022ee:	b913      	cbnz	r3, 80022f6 <__swsetup_r+0x16>
 80022f0:	4628      	mov	r0, r5
 80022f2:	f7ff fd21 	bl	8001d38 <__sinit>
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <__swsetup_r+0xd0>)
 80022f8:	429c      	cmp	r4, r3
 80022fa:	d10f      	bne.n	800231c <__swsetup_r+0x3c>
 80022fc:	686c      	ldr	r4, [r5, #4]
 80022fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002302:	b29a      	uxth	r2, r3
 8002304:	0715      	lsls	r5, r2, #28
 8002306:	d42c      	bmi.n	8002362 <__swsetup_r+0x82>
 8002308:	06d0      	lsls	r0, r2, #27
 800230a:	d411      	bmi.n	8002330 <__swsetup_r+0x50>
 800230c:	2209      	movs	r2, #9
 800230e:	6032      	str	r2, [r6, #0]
 8002310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	e03e      	b.n	800239a <__swsetup_r+0xba>
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <__swsetup_r+0xd4>)
 800231e:	429c      	cmp	r4, r3
 8002320:	d101      	bne.n	8002326 <__swsetup_r+0x46>
 8002322:	68ac      	ldr	r4, [r5, #8]
 8002324:	e7eb      	b.n	80022fe <__swsetup_r+0x1e>
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <__swsetup_r+0xd8>)
 8002328:	429c      	cmp	r4, r3
 800232a:	bf08      	it	eq
 800232c:	68ec      	ldreq	r4, [r5, #12]
 800232e:	e7e6      	b.n	80022fe <__swsetup_r+0x1e>
 8002330:	0751      	lsls	r1, r2, #29
 8002332:	d512      	bpl.n	800235a <__swsetup_r+0x7a>
 8002334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002336:	b141      	cbz	r1, 800234a <__swsetup_r+0x6a>
 8002338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800233c:	4299      	cmp	r1, r3
 800233e:	d002      	beq.n	8002346 <__swsetup_r+0x66>
 8002340:	4630      	mov	r0, r6
 8002342:	f7ff fddd 	bl	8001f00 <_free_r>
 8002346:	2300      	movs	r3, #0
 8002348:	6363      	str	r3, [r4, #52]	; 0x34
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002350:	81a3      	strh	r3, [r4, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	6063      	str	r3, [r4, #4]
 8002356:	6923      	ldr	r3, [r4, #16]
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	81a3      	strh	r3, [r4, #12]
 8002362:	6923      	ldr	r3, [r4, #16]
 8002364:	b94b      	cbnz	r3, 800237a <__swsetup_r+0x9a>
 8002366:	89a3      	ldrh	r3, [r4, #12]
 8002368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800236c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002370:	d003      	beq.n	800237a <__swsetup_r+0x9a>
 8002372:	4621      	mov	r1, r4
 8002374:	4630      	mov	r0, r6
 8002376:	f000 f893 	bl	80024a0 <__smakebuf_r>
 800237a:	89a2      	ldrh	r2, [r4, #12]
 800237c:	f012 0301 	ands.w	r3, r2, #1
 8002380:	d00c      	beq.n	800239c <__swsetup_r+0xbc>
 8002382:	2300      	movs	r3, #0
 8002384:	60a3      	str	r3, [r4, #8]
 8002386:	6963      	ldr	r3, [r4, #20]
 8002388:	425b      	negs	r3, r3
 800238a:	61a3      	str	r3, [r4, #24]
 800238c:	6923      	ldr	r3, [r4, #16]
 800238e:	b953      	cbnz	r3, 80023a6 <__swsetup_r+0xc6>
 8002390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002394:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002398:	d1ba      	bne.n	8002310 <__swsetup_r+0x30>
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	0792      	lsls	r2, r2, #30
 800239e:	bf58      	it	pl
 80023a0:	6963      	ldrpl	r3, [r4, #20]
 80023a2:	60a3      	str	r3, [r4, #8]
 80023a4:	e7f2      	b.n	800238c <__swsetup_r+0xac>
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7f7      	b.n	800239a <__swsetup_r+0xba>
 80023aa:	bf00      	nop
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	08002ebc 	.word	0x08002ebc
 80023b4:	08002edc 	.word	0x08002edc
 80023b8:	08002e9c 	.word	0x08002e9c

080023bc <_close_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4c06      	ldr	r4, [pc, #24]	; (80023d8 <_close_r+0x1c>)
 80023c0:	2300      	movs	r3, #0
 80023c2:	4605      	mov	r5, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	f000 fca0 	bl	8002d0c <_close>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_close_r+0x1a>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_close_r+0x1a>
 80023d4:	602b      	str	r3, [r5, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	2000011c 	.word	0x2000011c

080023dc <_getc_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	460c      	mov	r4, r1
 80023e0:	4605      	mov	r5, r0
 80023e2:	b118      	cbz	r0, 80023ec <_getc_r+0x10>
 80023e4:	6983      	ldr	r3, [r0, #24]
 80023e6:	b90b      	cbnz	r3, 80023ec <_getc_r+0x10>
 80023e8:	f7ff fca6 	bl	8001d38 <__sinit>
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <_getc_r+0x4c>)
 80023ee:	429c      	cmp	r4, r3
 80023f0:	d10b      	bne.n	800240a <_getc_r+0x2e>
 80023f2:	686c      	ldr	r4, [r5, #4]
 80023f4:	6863      	ldr	r3, [r4, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	6063      	str	r3, [r4, #4]
 80023fc:	da0f      	bge.n	800241e <_getc_r+0x42>
 80023fe:	4621      	mov	r1, r4
 8002400:	4628      	mov	r0, r5
 8002402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002406:	f000 bb9d 	b.w	8002b44 <__srget_r>
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <_getc_r+0x50>)
 800240c:	429c      	cmp	r4, r3
 800240e:	d101      	bne.n	8002414 <_getc_r+0x38>
 8002410:	68ac      	ldr	r4, [r5, #8]
 8002412:	e7ef      	b.n	80023f4 <_getc_r+0x18>
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <_getc_r+0x54>)
 8002416:	429c      	cmp	r4, r3
 8002418:	bf08      	it	eq
 800241a:	68ec      	ldreq	r4, [r5, #12]
 800241c:	e7ea      	b.n	80023f4 <_getc_r+0x18>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	6022      	str	r2, [r4, #0]
 8002424:	7818      	ldrb	r0, [r3, #0]
 8002426:	bd38      	pop	{r3, r4, r5, pc}
 8002428:	08002ebc 	.word	0x08002ebc
 800242c:	08002edc 	.word	0x08002edc
 8002430:	08002e9c 	.word	0x08002e9c

08002434 <_lseek_r>:
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4c07      	ldr	r4, [pc, #28]	; (8002454 <_lseek_r+0x20>)
 8002438:	4605      	mov	r5, r0
 800243a:	4608      	mov	r0, r1
 800243c:	4611      	mov	r1, r2
 800243e:	2200      	movs	r2, #0
 8002440:	6022      	str	r2, [r4, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	f000 fc7a 	bl	8002d3c <_lseek>
 8002448:	1c43      	adds	r3, r0, #1
 800244a:	d102      	bne.n	8002452 <_lseek_r+0x1e>
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	b103      	cbz	r3, 8002452 <_lseek_r+0x1e>
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	bd38      	pop	{r3, r4, r5, pc}
 8002454:	2000011c 	.word	0x2000011c

08002458 <__swhatbuf_r>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	460e      	mov	r6, r1
 800245c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002460:	2900      	cmp	r1, #0
 8002462:	b096      	sub	sp, #88	; 0x58
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	da07      	bge.n	800247a <__swhatbuf_r+0x22>
 800246a:	2300      	movs	r3, #0
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	89b3      	ldrh	r3, [r6, #12]
 8002470:	061a      	lsls	r2, r3, #24
 8002472:	d410      	bmi.n	8002496 <__swhatbuf_r+0x3e>
 8002474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002478:	e00e      	b.n	8002498 <__swhatbuf_r+0x40>
 800247a:	466a      	mov	r2, sp
 800247c:	f000 fb8e 	bl	8002b9c <_fstat_r>
 8002480:	2800      	cmp	r0, #0
 8002482:	dbf2      	blt.n	800246a <__swhatbuf_r+0x12>
 8002484:	9a01      	ldr	r2, [sp, #4]
 8002486:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800248a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800248e:	425a      	negs	r2, r3
 8002490:	415a      	adcs	r2, r3
 8002492:	602a      	str	r2, [r5, #0]
 8002494:	e7ee      	b.n	8002474 <__swhatbuf_r+0x1c>
 8002496:	2340      	movs	r3, #64	; 0x40
 8002498:	2000      	movs	r0, #0
 800249a:	6023      	str	r3, [r4, #0]
 800249c:	b016      	add	sp, #88	; 0x58
 800249e:	bd70      	pop	{r4, r5, r6, pc}

080024a0 <__smakebuf_r>:
 80024a0:	898b      	ldrh	r3, [r1, #12]
 80024a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024a4:	079d      	lsls	r5, r3, #30
 80024a6:	4606      	mov	r6, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	d507      	bpl.n	80024bc <__smakebuf_r+0x1c>
 80024ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024b0:	6023      	str	r3, [r4, #0]
 80024b2:	6123      	str	r3, [r4, #16]
 80024b4:	2301      	movs	r3, #1
 80024b6:	6163      	str	r3, [r4, #20]
 80024b8:	b002      	add	sp, #8
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	ab01      	add	r3, sp, #4
 80024be:	466a      	mov	r2, sp
 80024c0:	f7ff ffca 	bl	8002458 <__swhatbuf_r>
 80024c4:	9900      	ldr	r1, [sp, #0]
 80024c6:	4605      	mov	r5, r0
 80024c8:	4630      	mov	r0, r6
 80024ca:	f7ff fd67 	bl	8001f9c <_malloc_r>
 80024ce:	b948      	cbnz	r0, 80024e4 <__smakebuf_r+0x44>
 80024d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d4:	059a      	lsls	r2, r3, #22
 80024d6:	d4ef      	bmi.n	80024b8 <__smakebuf_r+0x18>
 80024d8:	f023 0303 	bic.w	r3, r3, #3
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	81a3      	strh	r3, [r4, #12]
 80024e2:	e7e3      	b.n	80024ac <__smakebuf_r+0xc>
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <__smakebuf_r+0x7c>)
 80024e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	6020      	str	r0, [r4, #0]
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	81a3      	strh	r3, [r4, #12]
 80024f2:	9b00      	ldr	r3, [sp, #0]
 80024f4:	6163      	str	r3, [r4, #20]
 80024f6:	9b01      	ldr	r3, [sp, #4]
 80024f8:	6120      	str	r0, [r4, #16]
 80024fa:	b15b      	cbz	r3, 8002514 <__smakebuf_r+0x74>
 80024fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002500:	4630      	mov	r0, r6
 8002502:	f000 fb5d 	bl	8002bc0 <_isatty_r>
 8002506:	b128      	cbz	r0, 8002514 <__smakebuf_r+0x74>
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	81a3      	strh	r3, [r4, #12]
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	431d      	orrs	r5, r3
 8002518:	81a5      	strh	r5, [r4, #12]
 800251a:	e7cd      	b.n	80024b8 <__smakebuf_r+0x18>
 800251c:	08001d01 	.word	0x08001d01

08002520 <__malloc_lock>:
 8002520:	4770      	bx	lr

08002522 <__malloc_unlock>:
 8002522:	4770      	bx	lr

08002524 <__sfputc_r>:
 8002524:	6893      	ldr	r3, [r2, #8]
 8002526:	3b01      	subs	r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	b410      	push	{r4}
 800252c:	6093      	str	r3, [r2, #8]
 800252e:	da08      	bge.n	8002542 <__sfputc_r+0x1e>
 8002530:	6994      	ldr	r4, [r2, #24]
 8002532:	42a3      	cmp	r3, r4
 8002534:	db01      	blt.n	800253a <__sfputc_r+0x16>
 8002536:	290a      	cmp	r1, #10
 8002538:	d103      	bne.n	8002542 <__sfputc_r+0x1e>
 800253a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800253e:	f7ff be6b 	b.w	8002218 <__swbuf_r>
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	1c58      	adds	r0, r3, #1
 8002546:	6010      	str	r0, [r2, #0]
 8002548:	7019      	strb	r1, [r3, #0]
 800254a:	4608      	mov	r0, r1
 800254c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002550:	4770      	bx	lr

08002552 <__sfputs_r>:
 8002552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002554:	4606      	mov	r6, r0
 8002556:	460f      	mov	r7, r1
 8002558:	4614      	mov	r4, r2
 800255a:	18d5      	adds	r5, r2, r3
 800255c:	42ac      	cmp	r4, r5
 800255e:	d101      	bne.n	8002564 <__sfputs_r+0x12>
 8002560:	2000      	movs	r0, #0
 8002562:	e007      	b.n	8002574 <__sfputs_r+0x22>
 8002564:	463a      	mov	r2, r7
 8002566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800256a:	4630      	mov	r0, r6
 800256c:	f7ff ffda 	bl	8002524 <__sfputc_r>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d1f3      	bne.n	800255c <__sfputs_r+0xa>
 8002574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002578 <_vfiprintf_r>:
 8002578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257c:	460c      	mov	r4, r1
 800257e:	b09d      	sub	sp, #116	; 0x74
 8002580:	4617      	mov	r7, r2
 8002582:	461d      	mov	r5, r3
 8002584:	4606      	mov	r6, r0
 8002586:	b118      	cbz	r0, 8002590 <_vfiprintf_r+0x18>
 8002588:	6983      	ldr	r3, [r0, #24]
 800258a:	b90b      	cbnz	r3, 8002590 <_vfiprintf_r+0x18>
 800258c:	f7ff fbd4 	bl	8001d38 <__sinit>
 8002590:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <_vfiprintf_r+0x20c>)
 8002592:	429c      	cmp	r4, r3
 8002594:	d158      	bne.n	8002648 <_vfiprintf_r+0xd0>
 8002596:	6874      	ldr	r4, [r6, #4]
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	0718      	lsls	r0, r3, #28
 800259c:	d55e      	bpl.n	800265c <_vfiprintf_r+0xe4>
 800259e:	6923      	ldr	r3, [r4, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05b      	beq.n	800265c <_vfiprintf_r+0xe4>
 80025a4:	2300      	movs	r3, #0
 80025a6:	9309      	str	r3, [sp, #36]	; 0x24
 80025a8:	2320      	movs	r3, #32
 80025aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025ae:	2330      	movs	r3, #48	; 0x30
 80025b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025b4:	9503      	str	r5, [sp, #12]
 80025b6:	f04f 0b01 	mov.w	fp, #1
 80025ba:	46b8      	mov	r8, r7
 80025bc:	4645      	mov	r5, r8
 80025be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025c2:	b10b      	cbz	r3, 80025c8 <_vfiprintf_r+0x50>
 80025c4:	2b25      	cmp	r3, #37	; 0x25
 80025c6:	d154      	bne.n	8002672 <_vfiprintf_r+0xfa>
 80025c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80025cc:	d00b      	beq.n	80025e6 <_vfiprintf_r+0x6e>
 80025ce:	4653      	mov	r3, sl
 80025d0:	463a      	mov	r2, r7
 80025d2:	4621      	mov	r1, r4
 80025d4:	4630      	mov	r0, r6
 80025d6:	f7ff ffbc 	bl	8002552 <__sfputs_r>
 80025da:	3001      	adds	r0, #1
 80025dc:	f000 80c2 	beq.w	8002764 <_vfiprintf_r+0x1ec>
 80025e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e2:	4453      	add	r3, sl
 80025e4:	9309      	str	r3, [sp, #36]	; 0x24
 80025e6:	f898 3000 	ldrb.w	r3, [r8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80ba 	beq.w	8002764 <_vfiprintf_r+0x1ec>
 80025f0:	2300      	movs	r3, #0
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025fa:	9304      	str	r3, [sp, #16]
 80025fc:	9307      	str	r3, [sp, #28]
 80025fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002602:	931a      	str	r3, [sp, #104]	; 0x68
 8002604:	46a8      	mov	r8, r5
 8002606:	2205      	movs	r2, #5
 8002608:	f818 1b01 	ldrb.w	r1, [r8], #1
 800260c:	485e      	ldr	r0, [pc, #376]	; (8002788 <_vfiprintf_r+0x210>)
 800260e:	f7fd fe17 	bl	8000240 <memchr>
 8002612:	9b04      	ldr	r3, [sp, #16]
 8002614:	bb78      	cbnz	r0, 8002676 <_vfiprintf_r+0xfe>
 8002616:	06d9      	lsls	r1, r3, #27
 8002618:	bf44      	itt	mi
 800261a:	2220      	movmi	r2, #32
 800261c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002620:	071a      	lsls	r2, r3, #28
 8002622:	bf44      	itt	mi
 8002624:	222b      	movmi	r2, #43	; 0x2b
 8002626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800262a:	782a      	ldrb	r2, [r5, #0]
 800262c:	2a2a      	cmp	r2, #42	; 0x2a
 800262e:	d02a      	beq.n	8002686 <_vfiprintf_r+0x10e>
 8002630:	9a07      	ldr	r2, [sp, #28]
 8002632:	46a8      	mov	r8, r5
 8002634:	2000      	movs	r0, #0
 8002636:	250a      	movs	r5, #10
 8002638:	4641      	mov	r1, r8
 800263a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800263e:	3b30      	subs	r3, #48	; 0x30
 8002640:	2b09      	cmp	r3, #9
 8002642:	d969      	bls.n	8002718 <_vfiprintf_r+0x1a0>
 8002644:	b360      	cbz	r0, 80026a0 <_vfiprintf_r+0x128>
 8002646:	e024      	b.n	8002692 <_vfiprintf_r+0x11a>
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <_vfiprintf_r+0x214>)
 800264a:	429c      	cmp	r4, r3
 800264c:	d101      	bne.n	8002652 <_vfiprintf_r+0xda>
 800264e:	68b4      	ldr	r4, [r6, #8]
 8002650:	e7a2      	b.n	8002598 <_vfiprintf_r+0x20>
 8002652:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <_vfiprintf_r+0x218>)
 8002654:	429c      	cmp	r4, r3
 8002656:	bf08      	it	eq
 8002658:	68f4      	ldreq	r4, [r6, #12]
 800265a:	e79d      	b.n	8002598 <_vfiprintf_r+0x20>
 800265c:	4621      	mov	r1, r4
 800265e:	4630      	mov	r0, r6
 8002660:	f7ff fe3e 	bl	80022e0 <__swsetup_r>
 8002664:	2800      	cmp	r0, #0
 8002666:	d09d      	beq.n	80025a4 <_vfiprintf_r+0x2c>
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	b01d      	add	sp, #116	; 0x74
 800266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002672:	46a8      	mov	r8, r5
 8002674:	e7a2      	b.n	80025bc <_vfiprintf_r+0x44>
 8002676:	4a44      	ldr	r2, [pc, #272]	; (8002788 <_vfiprintf_r+0x210>)
 8002678:	1a80      	subs	r0, r0, r2
 800267a:	fa0b f000 	lsl.w	r0, fp, r0
 800267e:	4318      	orrs	r0, r3
 8002680:	9004      	str	r0, [sp, #16]
 8002682:	4645      	mov	r5, r8
 8002684:	e7be      	b.n	8002604 <_vfiprintf_r+0x8c>
 8002686:	9a03      	ldr	r2, [sp, #12]
 8002688:	1d11      	adds	r1, r2, #4
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	9103      	str	r1, [sp, #12]
 800268e:	2a00      	cmp	r2, #0
 8002690:	db01      	blt.n	8002696 <_vfiprintf_r+0x11e>
 8002692:	9207      	str	r2, [sp, #28]
 8002694:	e004      	b.n	80026a0 <_vfiprintf_r+0x128>
 8002696:	4252      	negs	r2, r2
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	9207      	str	r2, [sp, #28]
 800269e:	9304      	str	r3, [sp, #16]
 80026a0:	f898 3000 	ldrb.w	r3, [r8]
 80026a4:	2b2e      	cmp	r3, #46	; 0x2e
 80026a6:	d10e      	bne.n	80026c6 <_vfiprintf_r+0x14e>
 80026a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80026ac:	2b2a      	cmp	r3, #42	; 0x2a
 80026ae:	d138      	bne.n	8002722 <_vfiprintf_r+0x1aa>
 80026b0:	9b03      	ldr	r3, [sp, #12]
 80026b2:	1d1a      	adds	r2, r3, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	9203      	str	r2, [sp, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bfb8      	it	lt
 80026bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80026c0:	f108 0802 	add.w	r8, r8, #2
 80026c4:	9305      	str	r3, [sp, #20]
 80026c6:	4d33      	ldr	r5, [pc, #204]	; (8002794 <_vfiprintf_r+0x21c>)
 80026c8:	f898 1000 	ldrb.w	r1, [r8]
 80026cc:	2203      	movs	r2, #3
 80026ce:	4628      	mov	r0, r5
 80026d0:	f7fd fdb6 	bl	8000240 <memchr>
 80026d4:	b140      	cbz	r0, 80026e8 <_vfiprintf_r+0x170>
 80026d6:	2340      	movs	r3, #64	; 0x40
 80026d8:	1b40      	subs	r0, r0, r5
 80026da:	fa03 f000 	lsl.w	r0, r3, r0
 80026de:	9b04      	ldr	r3, [sp, #16]
 80026e0:	4303      	orrs	r3, r0
 80026e2:	f108 0801 	add.w	r8, r8, #1
 80026e6:	9304      	str	r3, [sp, #16]
 80026e8:	f898 1000 	ldrb.w	r1, [r8]
 80026ec:	482a      	ldr	r0, [pc, #168]	; (8002798 <_vfiprintf_r+0x220>)
 80026ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026f2:	2206      	movs	r2, #6
 80026f4:	f108 0701 	add.w	r7, r8, #1
 80026f8:	f7fd fda2 	bl	8000240 <memchr>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d037      	beq.n	8002770 <_vfiprintf_r+0x1f8>
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <_vfiprintf_r+0x224>)
 8002702:	bb1b      	cbnz	r3, 800274c <_vfiprintf_r+0x1d4>
 8002704:	9b03      	ldr	r3, [sp, #12]
 8002706:	3307      	adds	r3, #7
 8002708:	f023 0307 	bic.w	r3, r3, #7
 800270c:	3308      	adds	r3, #8
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002712:	444b      	add	r3, r9
 8002714:	9309      	str	r3, [sp, #36]	; 0x24
 8002716:	e750      	b.n	80025ba <_vfiprintf_r+0x42>
 8002718:	fb05 3202 	mla	r2, r5, r2, r3
 800271c:	2001      	movs	r0, #1
 800271e:	4688      	mov	r8, r1
 8002720:	e78a      	b.n	8002638 <_vfiprintf_r+0xc0>
 8002722:	2300      	movs	r3, #0
 8002724:	f108 0801 	add.w	r8, r8, #1
 8002728:	9305      	str	r3, [sp, #20]
 800272a:	4619      	mov	r1, r3
 800272c:	250a      	movs	r5, #10
 800272e:	4640      	mov	r0, r8
 8002730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002734:	3a30      	subs	r2, #48	; 0x30
 8002736:	2a09      	cmp	r2, #9
 8002738:	d903      	bls.n	8002742 <_vfiprintf_r+0x1ca>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0c3      	beq.n	80026c6 <_vfiprintf_r+0x14e>
 800273e:	9105      	str	r1, [sp, #20]
 8002740:	e7c1      	b.n	80026c6 <_vfiprintf_r+0x14e>
 8002742:	fb05 2101 	mla	r1, r5, r1, r2
 8002746:	2301      	movs	r3, #1
 8002748:	4680      	mov	r8, r0
 800274a:	e7f0      	b.n	800272e <_vfiprintf_r+0x1b6>
 800274c:	ab03      	add	r3, sp, #12
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4622      	mov	r2, r4
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <_vfiprintf_r+0x228>)
 8002754:	a904      	add	r1, sp, #16
 8002756:	4630      	mov	r0, r6
 8002758:	f3af 8000 	nop.w
 800275c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002760:	4681      	mov	r9, r0
 8002762:	d1d5      	bne.n	8002710 <_vfiprintf_r+0x198>
 8002764:	89a3      	ldrh	r3, [r4, #12]
 8002766:	065b      	lsls	r3, r3, #25
 8002768:	f53f af7e 	bmi.w	8002668 <_vfiprintf_r+0xf0>
 800276c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800276e:	e77d      	b.n	800266c <_vfiprintf_r+0xf4>
 8002770:	ab03      	add	r3, sp, #12
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4622      	mov	r2, r4
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <_vfiprintf_r+0x228>)
 8002778:	a904      	add	r1, sp, #16
 800277a:	4630      	mov	r0, r6
 800277c:	f000 f888 	bl	8002890 <_printf_i>
 8002780:	e7ec      	b.n	800275c <_vfiprintf_r+0x1e4>
 8002782:	bf00      	nop
 8002784:	08002ebc 	.word	0x08002ebc
 8002788:	08002f00 	.word	0x08002f00
 800278c:	08002edc 	.word	0x08002edc
 8002790:	08002e9c 	.word	0x08002e9c
 8002794:	08002f06 	.word	0x08002f06
 8002798:	08002f0a 	.word	0x08002f0a
 800279c:	00000000 	.word	0x00000000
 80027a0:	08002553 	.word	0x08002553

080027a4 <_printf_common>:
 80027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a8:	4691      	mov	r9, r2
 80027aa:	461f      	mov	r7, r3
 80027ac:	688a      	ldr	r2, [r1, #8]
 80027ae:	690b      	ldr	r3, [r1, #16]
 80027b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bfb8      	it	lt
 80027b8:	4613      	movlt	r3, r2
 80027ba:	f8c9 3000 	str.w	r3, [r9]
 80027be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027c2:	4606      	mov	r6, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	b112      	cbz	r2, 80027ce <_printf_common+0x2a>
 80027c8:	3301      	adds	r3, #1
 80027ca:	f8c9 3000 	str.w	r3, [r9]
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	0699      	lsls	r1, r3, #26
 80027d2:	bf42      	ittt	mi
 80027d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027d8:	3302      	addmi	r3, #2
 80027da:	f8c9 3000 	strmi.w	r3, [r9]
 80027de:	6825      	ldr	r5, [r4, #0]
 80027e0:	f015 0506 	ands.w	r5, r5, #6
 80027e4:	d107      	bne.n	80027f6 <_printf_common+0x52>
 80027e6:	f104 0a19 	add.w	sl, r4, #25
 80027ea:	68e3      	ldr	r3, [r4, #12]
 80027ec:	f8d9 2000 	ldr.w	r2, [r9]
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	42ab      	cmp	r3, r5
 80027f4:	dc28      	bgt.n	8002848 <_printf_common+0xa4>
 80027f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	3300      	adds	r3, #0
 80027fe:	bf18      	it	ne
 8002800:	2301      	movne	r3, #1
 8002802:	0692      	lsls	r2, r2, #26
 8002804:	d42d      	bmi.n	8002862 <_printf_common+0xbe>
 8002806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800280a:	4639      	mov	r1, r7
 800280c:	4630      	mov	r0, r6
 800280e:	47c0      	blx	r8
 8002810:	3001      	adds	r0, #1
 8002812:	d020      	beq.n	8002856 <_printf_common+0xb2>
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	68e5      	ldr	r5, [r4, #12]
 8002818:	f8d9 2000 	ldr.w	r2, [r9]
 800281c:	f003 0306 	and.w	r3, r3, #6
 8002820:	2b04      	cmp	r3, #4
 8002822:	bf08      	it	eq
 8002824:	1aad      	subeq	r5, r5, r2
 8002826:	68a3      	ldr	r3, [r4, #8]
 8002828:	6922      	ldr	r2, [r4, #16]
 800282a:	bf0c      	ite	eq
 800282c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002830:	2500      	movne	r5, #0
 8002832:	4293      	cmp	r3, r2
 8002834:	bfc4      	itt	gt
 8002836:	1a9b      	subgt	r3, r3, r2
 8002838:	18ed      	addgt	r5, r5, r3
 800283a:	f04f 0900 	mov.w	r9, #0
 800283e:	341a      	adds	r4, #26
 8002840:	454d      	cmp	r5, r9
 8002842:	d11a      	bne.n	800287a <_printf_common+0xd6>
 8002844:	2000      	movs	r0, #0
 8002846:	e008      	b.n	800285a <_printf_common+0xb6>
 8002848:	2301      	movs	r3, #1
 800284a:	4652      	mov	r2, sl
 800284c:	4639      	mov	r1, r7
 800284e:	4630      	mov	r0, r6
 8002850:	47c0      	blx	r8
 8002852:	3001      	adds	r0, #1
 8002854:	d103      	bne.n	800285e <_printf_common+0xba>
 8002856:	f04f 30ff 	mov.w	r0, #4294967295
 800285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285e:	3501      	adds	r5, #1
 8002860:	e7c3      	b.n	80027ea <_printf_common+0x46>
 8002862:	18e1      	adds	r1, r4, r3
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	2030      	movs	r0, #48	; 0x30
 8002868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800286c:	4422      	add	r2, r4
 800286e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002876:	3302      	adds	r3, #2
 8002878:	e7c5      	b.n	8002806 <_printf_common+0x62>
 800287a:	2301      	movs	r3, #1
 800287c:	4622      	mov	r2, r4
 800287e:	4639      	mov	r1, r7
 8002880:	4630      	mov	r0, r6
 8002882:	47c0      	blx	r8
 8002884:	3001      	adds	r0, #1
 8002886:	d0e6      	beq.n	8002856 <_printf_common+0xb2>
 8002888:	f109 0901 	add.w	r9, r9, #1
 800288c:	e7d8      	b.n	8002840 <_printf_common+0x9c>
	...

08002890 <_printf_i>:
 8002890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002898:	460c      	mov	r4, r1
 800289a:	7e09      	ldrb	r1, [r1, #24]
 800289c:	b085      	sub	sp, #20
 800289e:	296e      	cmp	r1, #110	; 0x6e
 80028a0:	4617      	mov	r7, r2
 80028a2:	4606      	mov	r6, r0
 80028a4:	4698      	mov	r8, r3
 80028a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028a8:	f000 80b3 	beq.w	8002a12 <_printf_i+0x182>
 80028ac:	d822      	bhi.n	80028f4 <_printf_i+0x64>
 80028ae:	2963      	cmp	r1, #99	; 0x63
 80028b0:	d036      	beq.n	8002920 <_printf_i+0x90>
 80028b2:	d80a      	bhi.n	80028ca <_printf_i+0x3a>
 80028b4:	2900      	cmp	r1, #0
 80028b6:	f000 80b9 	beq.w	8002a2c <_printf_i+0x19c>
 80028ba:	2958      	cmp	r1, #88	; 0x58
 80028bc:	f000 8083 	beq.w	80029c6 <_printf_i+0x136>
 80028c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80028c8:	e032      	b.n	8002930 <_printf_i+0xa0>
 80028ca:	2964      	cmp	r1, #100	; 0x64
 80028cc:	d001      	beq.n	80028d2 <_printf_i+0x42>
 80028ce:	2969      	cmp	r1, #105	; 0x69
 80028d0:	d1f6      	bne.n	80028c0 <_printf_i+0x30>
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	6813      	ldr	r3, [r2, #0]
 80028d6:	0605      	lsls	r5, r0, #24
 80028d8:	f103 0104 	add.w	r1, r3, #4
 80028dc:	d52a      	bpl.n	8002934 <_printf_i+0xa4>
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6011      	str	r1, [r2, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da03      	bge.n	80028ee <_printf_i+0x5e>
 80028e6:	222d      	movs	r2, #45	; 0x2d
 80028e8:	425b      	negs	r3, r3
 80028ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028ee:	486f      	ldr	r0, [pc, #444]	; (8002aac <_printf_i+0x21c>)
 80028f0:	220a      	movs	r2, #10
 80028f2:	e039      	b.n	8002968 <_printf_i+0xd8>
 80028f4:	2973      	cmp	r1, #115	; 0x73
 80028f6:	f000 809d 	beq.w	8002a34 <_printf_i+0x1a4>
 80028fa:	d808      	bhi.n	800290e <_printf_i+0x7e>
 80028fc:	296f      	cmp	r1, #111	; 0x6f
 80028fe:	d020      	beq.n	8002942 <_printf_i+0xb2>
 8002900:	2970      	cmp	r1, #112	; 0x70
 8002902:	d1dd      	bne.n	80028c0 <_printf_i+0x30>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	f043 0320 	orr.w	r3, r3, #32
 800290a:	6023      	str	r3, [r4, #0]
 800290c:	e003      	b.n	8002916 <_printf_i+0x86>
 800290e:	2975      	cmp	r1, #117	; 0x75
 8002910:	d017      	beq.n	8002942 <_printf_i+0xb2>
 8002912:	2978      	cmp	r1, #120	; 0x78
 8002914:	d1d4      	bne.n	80028c0 <_printf_i+0x30>
 8002916:	2378      	movs	r3, #120	; 0x78
 8002918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800291c:	4864      	ldr	r0, [pc, #400]	; (8002ab0 <_printf_i+0x220>)
 800291e:	e055      	b.n	80029cc <_printf_i+0x13c>
 8002920:	6813      	ldr	r3, [r2, #0]
 8002922:	1d19      	adds	r1, r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6011      	str	r1, [r2, #0]
 8002928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800292c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002930:	2301      	movs	r3, #1
 8002932:	e08c      	b.n	8002a4e <_printf_i+0x1be>
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6011      	str	r1, [r2, #0]
 8002938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800293c:	bf18      	it	ne
 800293e:	b21b      	sxthne	r3, r3
 8002940:	e7cf      	b.n	80028e2 <_printf_i+0x52>
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	6825      	ldr	r5, [r4, #0]
 8002946:	1d18      	adds	r0, r3, #4
 8002948:	6010      	str	r0, [r2, #0]
 800294a:	0628      	lsls	r0, r5, #24
 800294c:	d501      	bpl.n	8002952 <_printf_i+0xc2>
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	e002      	b.n	8002958 <_printf_i+0xc8>
 8002952:	0668      	lsls	r0, r5, #25
 8002954:	d5fb      	bpl.n	800294e <_printf_i+0xbe>
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	4854      	ldr	r0, [pc, #336]	; (8002aac <_printf_i+0x21c>)
 800295a:	296f      	cmp	r1, #111	; 0x6f
 800295c:	bf14      	ite	ne
 800295e:	220a      	movne	r2, #10
 8002960:	2208      	moveq	r2, #8
 8002962:	2100      	movs	r1, #0
 8002964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002968:	6865      	ldr	r5, [r4, #4]
 800296a:	60a5      	str	r5, [r4, #8]
 800296c:	2d00      	cmp	r5, #0
 800296e:	f2c0 8095 	blt.w	8002a9c <_printf_i+0x20c>
 8002972:	6821      	ldr	r1, [r4, #0]
 8002974:	f021 0104 	bic.w	r1, r1, #4
 8002978:	6021      	str	r1, [r4, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d13d      	bne.n	80029fa <_printf_i+0x16a>
 800297e:	2d00      	cmp	r5, #0
 8002980:	f040 808e 	bne.w	8002aa0 <_printf_i+0x210>
 8002984:	4665      	mov	r5, ip
 8002986:	2a08      	cmp	r2, #8
 8002988:	d10b      	bne.n	80029a2 <_printf_i+0x112>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	07db      	lsls	r3, r3, #31
 800298e:	d508      	bpl.n	80029a2 <_printf_i+0x112>
 8002990:	6923      	ldr	r3, [r4, #16]
 8002992:	6862      	ldr	r2, [r4, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	bfde      	ittt	le
 8002998:	2330      	movle	r3, #48	; 0x30
 800299a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800299e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029a2:	ebac 0305 	sub.w	r3, ip, r5
 80029a6:	6123      	str	r3, [r4, #16]
 80029a8:	f8cd 8000 	str.w	r8, [sp]
 80029ac:	463b      	mov	r3, r7
 80029ae:	aa03      	add	r2, sp, #12
 80029b0:	4621      	mov	r1, r4
 80029b2:	4630      	mov	r0, r6
 80029b4:	f7ff fef6 	bl	80027a4 <_printf_common>
 80029b8:	3001      	adds	r0, #1
 80029ba:	d14d      	bne.n	8002a58 <_printf_i+0x1c8>
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	b005      	add	sp, #20
 80029c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029c6:	4839      	ldr	r0, [pc, #228]	; (8002aac <_printf_i+0x21c>)
 80029c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	6821      	ldr	r1, [r4, #0]
 80029d0:	1d1d      	adds	r5, r3, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6015      	str	r5, [r2, #0]
 80029d6:	060a      	lsls	r2, r1, #24
 80029d8:	d50b      	bpl.n	80029f2 <_printf_i+0x162>
 80029da:	07ca      	lsls	r2, r1, #31
 80029dc:	bf44      	itt	mi
 80029de:	f041 0120 	orrmi.w	r1, r1, #32
 80029e2:	6021      	strmi	r1, [r4, #0]
 80029e4:	b91b      	cbnz	r3, 80029ee <_printf_i+0x15e>
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	f022 0220 	bic.w	r2, r2, #32
 80029ec:	6022      	str	r2, [r4, #0]
 80029ee:	2210      	movs	r2, #16
 80029f0:	e7b7      	b.n	8002962 <_printf_i+0xd2>
 80029f2:	064d      	lsls	r5, r1, #25
 80029f4:	bf48      	it	mi
 80029f6:	b29b      	uxthmi	r3, r3
 80029f8:	e7ef      	b.n	80029da <_printf_i+0x14a>
 80029fa:	4665      	mov	r5, ip
 80029fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a00:	fb02 3311 	mls	r3, r2, r1, r3
 8002a04:	5cc3      	ldrb	r3, [r0, r3]
 8002a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	d1f5      	bne.n	80029fc <_printf_i+0x16c>
 8002a10:	e7b9      	b.n	8002986 <_printf_i+0xf6>
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	6825      	ldr	r5, [r4, #0]
 8002a16:	6961      	ldr	r1, [r4, #20]
 8002a18:	1d18      	adds	r0, r3, #4
 8002a1a:	6010      	str	r0, [r2, #0]
 8002a1c:	0628      	lsls	r0, r5, #24
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	d501      	bpl.n	8002a26 <_printf_i+0x196>
 8002a22:	6019      	str	r1, [r3, #0]
 8002a24:	e002      	b.n	8002a2c <_printf_i+0x19c>
 8002a26:	066a      	lsls	r2, r5, #25
 8002a28:	d5fb      	bpl.n	8002a22 <_printf_i+0x192>
 8002a2a:	8019      	strh	r1, [r3, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6123      	str	r3, [r4, #16]
 8002a30:	4665      	mov	r5, ip
 8002a32:	e7b9      	b.n	80029a8 <_printf_i+0x118>
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	1d19      	adds	r1, r3, #4
 8002a38:	6011      	str	r1, [r2, #0]
 8002a3a:	681d      	ldr	r5, [r3, #0]
 8002a3c:	6862      	ldr	r2, [r4, #4]
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7fd fbfd 	bl	8000240 <memchr>
 8002a46:	b108      	cbz	r0, 8002a4c <_printf_i+0x1bc>
 8002a48:	1b40      	subs	r0, r0, r5
 8002a4a:	6060      	str	r0, [r4, #4]
 8002a4c:	6863      	ldr	r3, [r4, #4]
 8002a4e:	6123      	str	r3, [r4, #16]
 8002a50:	2300      	movs	r3, #0
 8002a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a56:	e7a7      	b.n	80029a8 <_printf_i+0x118>
 8002a58:	6923      	ldr	r3, [r4, #16]
 8002a5a:	462a      	mov	r2, r5
 8002a5c:	4639      	mov	r1, r7
 8002a5e:	4630      	mov	r0, r6
 8002a60:	47c0      	blx	r8
 8002a62:	3001      	adds	r0, #1
 8002a64:	d0aa      	beq.n	80029bc <_printf_i+0x12c>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	079b      	lsls	r3, r3, #30
 8002a6a:	d413      	bmi.n	8002a94 <_printf_i+0x204>
 8002a6c:	68e0      	ldr	r0, [r4, #12]
 8002a6e:	9b03      	ldr	r3, [sp, #12]
 8002a70:	4298      	cmp	r0, r3
 8002a72:	bfb8      	it	lt
 8002a74:	4618      	movlt	r0, r3
 8002a76:	e7a3      	b.n	80029c0 <_printf_i+0x130>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	464a      	mov	r2, r9
 8002a7c:	4639      	mov	r1, r7
 8002a7e:	4630      	mov	r0, r6
 8002a80:	47c0      	blx	r8
 8002a82:	3001      	adds	r0, #1
 8002a84:	d09a      	beq.n	80029bc <_printf_i+0x12c>
 8002a86:	3501      	adds	r5, #1
 8002a88:	68e3      	ldr	r3, [r4, #12]
 8002a8a:	9a03      	ldr	r2, [sp, #12]
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	42ab      	cmp	r3, r5
 8002a90:	dcf2      	bgt.n	8002a78 <_printf_i+0x1e8>
 8002a92:	e7eb      	b.n	8002a6c <_printf_i+0x1dc>
 8002a94:	2500      	movs	r5, #0
 8002a96:	f104 0919 	add.w	r9, r4, #25
 8002a9a:	e7f5      	b.n	8002a88 <_printf_i+0x1f8>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ac      	bne.n	80029fa <_printf_i+0x16a>
 8002aa0:	7803      	ldrb	r3, [r0, #0]
 8002aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aaa:	e76c      	b.n	8002986 <_printf_i+0xf6>
 8002aac:	08002f11 	.word	0x08002f11
 8002ab0:	08002f22 	.word	0x08002f22

08002ab4 <_putc_r>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	460d      	mov	r5, r1
 8002ab8:	4614      	mov	r4, r2
 8002aba:	4606      	mov	r6, r0
 8002abc:	b118      	cbz	r0, 8002ac6 <_putc_r+0x12>
 8002abe:	6983      	ldr	r3, [r0, #24]
 8002ac0:	b90b      	cbnz	r3, 8002ac6 <_putc_r+0x12>
 8002ac2:	f7ff f939 	bl	8001d38 <__sinit>
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <_putc_r+0x60>)
 8002ac8:	429c      	cmp	r4, r3
 8002aca:	d112      	bne.n	8002af2 <_putc_r+0x3e>
 8002acc:	6874      	ldr	r4, [r6, #4]
 8002ace:	68a3      	ldr	r3, [r4, #8]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	60a3      	str	r3, [r4, #8]
 8002ad6:	da16      	bge.n	8002b06 <_putc_r+0x52>
 8002ad8:	69a2      	ldr	r2, [r4, #24]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	db02      	blt.n	8002ae4 <_putc_r+0x30>
 8002ade:	b2eb      	uxtb	r3, r5
 8002ae0:	2b0a      	cmp	r3, #10
 8002ae2:	d110      	bne.n	8002b06 <_putc_r+0x52>
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	4630      	mov	r0, r6
 8002aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002aee:	f7ff bb93 	b.w	8002218 <__swbuf_r>
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <_putc_r+0x64>)
 8002af4:	429c      	cmp	r4, r3
 8002af6:	d101      	bne.n	8002afc <_putc_r+0x48>
 8002af8:	68b4      	ldr	r4, [r6, #8]
 8002afa:	e7e8      	b.n	8002ace <_putc_r+0x1a>
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <_putc_r+0x68>)
 8002afe:	429c      	cmp	r4, r3
 8002b00:	bf08      	it	eq
 8002b02:	68f4      	ldreq	r4, [r6, #12]
 8002b04:	e7e3      	b.n	8002ace <_putc_r+0x1a>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	6022      	str	r2, [r4, #0]
 8002b0c:	701d      	strb	r5, [r3, #0]
 8002b0e:	b2e8      	uxtb	r0, r5
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	bf00      	nop
 8002b14:	08002ebc 	.word	0x08002ebc
 8002b18:	08002edc 	.word	0x08002edc
 8002b1c:	08002e9c 	.word	0x08002e9c

08002b20 <_read_r>:
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	4c07      	ldr	r4, [pc, #28]	; (8002b40 <_read_r+0x20>)
 8002b24:	4605      	mov	r5, r0
 8002b26:	4608      	mov	r0, r1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	6022      	str	r2, [r4, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f7fd ff16 	bl	8000960 <_read>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d102      	bne.n	8002b3e <_read_r+0x1e>
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	b103      	cbz	r3, 8002b3e <_read_r+0x1e>
 8002b3c:	602b      	str	r3, [r5, #0]
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
 8002b40:	2000011c 	.word	0x2000011c

08002b44 <__srget_r>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	460c      	mov	r4, r1
 8002b48:	4605      	mov	r5, r0
 8002b4a:	b118      	cbz	r0, 8002b54 <__srget_r+0x10>
 8002b4c:	6983      	ldr	r3, [r0, #24]
 8002b4e:	b90b      	cbnz	r3, 8002b54 <__srget_r+0x10>
 8002b50:	f7ff f8f2 	bl	8001d38 <__sinit>
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <__srget_r+0x4c>)
 8002b56:	429c      	cmp	r4, r3
 8002b58:	d10d      	bne.n	8002b76 <__srget_r+0x32>
 8002b5a:	686c      	ldr	r4, [r5, #4]
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 f848 	bl	8002bf4 <__srefill_r>
 8002b64:	b988      	cbnz	r0, 8002b8a <__srget_r+0x46>
 8002b66:	6863      	ldr	r3, [r4, #4]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	6063      	str	r3, [r4, #4]
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	6022      	str	r2, [r4, #0]
 8002b72:	7818      	ldrb	r0, [r3, #0]
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <__srget_r+0x50>)
 8002b78:	429c      	cmp	r4, r3
 8002b7a:	d101      	bne.n	8002b80 <__srget_r+0x3c>
 8002b7c:	68ac      	ldr	r4, [r5, #8]
 8002b7e:	e7ed      	b.n	8002b5c <__srget_r+0x18>
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <__srget_r+0x54>)
 8002b82:	429c      	cmp	r4, r3
 8002b84:	bf08      	it	eq
 8002b86:	68ec      	ldreq	r4, [r5, #12]
 8002b88:	e7e8      	b.n	8002b5c <__srget_r+0x18>
 8002b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8e:	e7f1      	b.n	8002b74 <__srget_r+0x30>
 8002b90:	08002ebc 	.word	0x08002ebc
 8002b94:	08002edc 	.word	0x08002edc
 8002b98:	08002e9c 	.word	0x08002e9c

08002b9c <_fstat_r>:
 8002b9c:	b538      	push	{r3, r4, r5, lr}
 8002b9e:	4c07      	ldr	r4, [pc, #28]	; (8002bbc <_fstat_r+0x20>)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	f000 f8b7 	bl	8002d1c <_fstat>
 8002bae:	1c43      	adds	r3, r0, #1
 8002bb0:	d102      	bne.n	8002bb8 <_fstat_r+0x1c>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	b103      	cbz	r3, 8002bb8 <_fstat_r+0x1c>
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	bd38      	pop	{r3, r4, r5, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000011c 	.word	0x2000011c

08002bc0 <_isatty_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4c06      	ldr	r4, [pc, #24]	; (8002bdc <_isatty_r+0x1c>)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	f000 f8ae 	bl	8002d2c <_isatty>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_isatty_r+0x1a>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_isatty_r+0x1a>
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	2000011c 	.word	0x2000011c

08002be0 <lflush>:
 8002be0:	8983      	ldrh	r3, [r0, #12]
 8002be2:	f003 0309 	and.w	r3, r3, #9
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	d101      	bne.n	8002bee <lflush+0xe>
 8002bea:	f7ff b853 	b.w	8001c94 <fflush>
 8002bee:	2000      	movs	r0, #0
 8002bf0:	4770      	bx	lr
	...

08002bf4 <__srefill_r>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4605      	mov	r5, r0
 8002bfa:	b118      	cbz	r0, 8002c04 <__srefill_r+0x10>
 8002bfc:	6983      	ldr	r3, [r0, #24]
 8002bfe:	b90b      	cbnz	r3, 8002c04 <__srefill_r+0x10>
 8002c00:	f7ff f89a 	bl	8001d38 <__sinit>
 8002c04:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <__srefill_r+0x104>)
 8002c06:	429c      	cmp	r4, r3
 8002c08:	d10a      	bne.n	8002c20 <__srefill_r+0x2c>
 8002c0a:	686c      	ldr	r4, [r5, #4]
 8002c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c10:	2300      	movs	r3, #0
 8002c12:	6063      	str	r3, [r4, #4]
 8002c14:	b293      	uxth	r3, r2
 8002c16:	069e      	lsls	r6, r3, #26
 8002c18:	d50c      	bpl.n	8002c34 <__srefill_r+0x40>
 8002c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1e:	e067      	b.n	8002cf0 <__srefill_r+0xfc>
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <__srefill_r+0x108>)
 8002c22:	429c      	cmp	r4, r3
 8002c24:	d101      	bne.n	8002c2a <__srefill_r+0x36>
 8002c26:	68ac      	ldr	r4, [r5, #8]
 8002c28:	e7f0      	b.n	8002c0c <__srefill_r+0x18>
 8002c2a:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <__srefill_r+0x10c>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	bf08      	it	eq
 8002c30:	68ec      	ldreq	r4, [r5, #12]
 8002c32:	e7eb      	b.n	8002c0c <__srefill_r+0x18>
 8002c34:	0758      	lsls	r0, r3, #29
 8002c36:	d449      	bmi.n	8002ccc <__srefill_r+0xd8>
 8002c38:	06d9      	lsls	r1, r3, #27
 8002c3a:	d405      	bmi.n	8002c48 <__srefill_r+0x54>
 8002c3c:	2309      	movs	r3, #9
 8002c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c42:	602b      	str	r3, [r5, #0]
 8002c44:	81a2      	strh	r2, [r4, #12]
 8002c46:	e7e8      	b.n	8002c1a <__srefill_r+0x26>
 8002c48:	071a      	lsls	r2, r3, #28
 8002c4a:	d50b      	bpl.n	8002c64 <__srefill_r+0x70>
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f7fe fff6 	bl	8001c40 <_fflush_r>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d1e0      	bne.n	8002c1a <__srefill_r+0x26>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	60a0      	str	r0, [r4, #8]
 8002c5c:	f023 0308 	bic.w	r3, r3, #8
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	61a0      	str	r0, [r4, #24]
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	81a3      	strh	r3, [r4, #12]
 8002c6c:	6923      	ldr	r3, [r4, #16]
 8002c6e:	b91b      	cbnz	r3, 8002c78 <__srefill_r+0x84>
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f7ff fc14 	bl	80024a0 <__smakebuf_r>
 8002c78:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002c7c:	b2be      	uxth	r6, r7
 8002c7e:	07b3      	lsls	r3, r6, #30
 8002c80:	d00f      	beq.n	8002ca2 <__srefill_r+0xae>
 8002c82:	2301      	movs	r3, #1
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <__srefill_r+0x110>)
 8002c88:	491f      	ldr	r1, [pc, #124]	; (8002d08 <__srefill_r+0x114>)
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f006 0609 	and.w	r6, r6, #9
 8002c90:	f7ff f8be 	bl	8001e10 <_fwalk>
 8002c94:	2e09      	cmp	r6, #9
 8002c96:	81a7      	strh	r7, [r4, #12]
 8002c98:	d103      	bne.n	8002ca2 <__srefill_r+0xae>
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f7fe ff49 	bl	8001b34 <__sflush_r>
 8002ca2:	6922      	ldr	r2, [r4, #16]
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002ca8:	6963      	ldr	r3, [r4, #20]
 8002caa:	6a21      	ldr	r1, [r4, #32]
 8002cac:	4628      	mov	r0, r5
 8002cae:	47b0      	blx	r6
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	6060      	str	r0, [r4, #4]
 8002cb4:	dc1d      	bgt.n	8002cf2 <__srefill_r+0xfe>
 8002cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cba:	bf17      	itett	ne
 8002cbc:	2200      	movne	r2, #0
 8002cbe:	f043 0320 	orreq.w	r3, r3, #32
 8002cc2:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002cc6:	6062      	strne	r2, [r4, #4]
 8002cc8:	81a3      	strh	r3, [r4, #12]
 8002cca:	e7a6      	b.n	8002c1a <__srefill_r+0x26>
 8002ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d0cc      	beq.n	8002c6c <__srefill_r+0x78>
 8002cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cd6:	4299      	cmp	r1, r3
 8002cd8:	d002      	beq.n	8002ce0 <__srefill_r+0xec>
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f7ff f910 	bl	8001f00 <_free_r>
 8002ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ce2:	6063      	str	r3, [r4, #4]
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	6360      	str	r0, [r4, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0bf      	beq.n	8002c6c <__srefill_r+0x78>
 8002cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e7fc      	b.n	8002cf0 <__srefill_r+0xfc>
 8002cf6:	bf00      	nop
 8002cf8:	08002ebc 	.word	0x08002ebc
 8002cfc:	08002edc 	.word	0x08002edc
 8002d00:	08002e9c 	.word	0x08002e9c
 8002d04:	08002efc 	.word	0x08002efc
 8002d08:	08002be1 	.word	0x08002be1

08002d0c <_close>:
 8002d0c:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <_close+0xc>)
 8002d0e:	2258      	movs	r2, #88	; 0x58
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f04f 30ff 	mov.w	r0, #4294967295
 8002d16:	4770      	bx	lr
 8002d18:	2000011c 	.word	0x2000011c

08002d1c <_fstat>:
 8002d1c:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <_fstat+0xc>)
 8002d1e:	2258      	movs	r2, #88	; 0x58
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f04f 30ff 	mov.w	r0, #4294967295
 8002d26:	4770      	bx	lr
 8002d28:	2000011c 	.word	0x2000011c

08002d2c <_isatty>:
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <_isatty+0xc>)
 8002d2e:	2258      	movs	r2, #88	; 0x58
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	2000      	movs	r0, #0
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000011c 	.word	0x2000011c

08002d3c <_lseek>:
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <_lseek+0xc>)
 8002d3e:	2258      	movs	r2, #88	; 0x58
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f04f 30ff 	mov.w	r0, #4294967295
 8002d46:	4770      	bx	lr
 8002d48:	2000011c 	.word	0x2000011c

08002d4c <_sbrk>:
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <_sbrk+0x14>)
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	4602      	mov	r2, r0
 8002d52:	b909      	cbnz	r1, 8002d58 <_sbrk+0xc>
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <_sbrk+0x18>)
 8002d56:	6019      	str	r1, [r3, #0]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	4402      	add	r2, r0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	4770      	bx	lr
 8002d60:	20000094 	.word	0x20000094
 8002d64:	20000120 	.word	0x20000120

08002d68 <_init>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr

08002d74 <_fini>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr
