
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003118  08003118  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003120  08003120  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08003198  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001a0  08003198  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fb7  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000169c  00000000  00000000  0002a055  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002de4  00000000  00000000  0002b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000618  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002b3b1  00000000  00000000  0002f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006834  00000000  00000000  0005a471  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00106441  00000000  00000000  00060ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001670e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018a0  00000000  00000000  00167164  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  00168a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00168a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002da4 	.word	0x08002da4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002da4 	.word	0x08002da4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:

//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b082      	sub	sp, #8
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80005e4:	f000 f900 	bl	80007e8 <Sys_Init>

    char choice;
	char in[3];
    int size = 3;

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <main+0xe8>)
 80005ea:	f001 fd4f 	bl	800208c <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 80005ee:	4b37      	ldr	r3, [pc, #220]	; (80006cc <main+0xec>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6898      	ldr	r0, [r3, #8]
 80005f4:	f001 fb6c 	bl	8001cd0 <fflush>
    printf("Test of the printf() function.\n\n");
 80005f8:	4835      	ldr	r0, [pc, #212]	; (80006d0 <main+0xf0>)
 80005fa:	f001 fdcf 	bl	800219c <puts>

    // Need to enable clock for peripheral bus on GPIO Port J
    __HAL_RCC_GPIOJ_CLK_ENABLE(); 	// Through HAL
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <main+0xf4>)
 8000600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
 8000608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9a00      	ldr	r2, [sp, #0]
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; // or through registers
 8000612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
    //// Below two lines are example on how to access a register by knowing it's memory address
    //volatile uint32_t * RCC_AHB1_CLOCK_ENABLE = (uint32_t*) 0x40023830U; // Enable clock for peripheral bus on GPIO Port J
    //*RCC_AHB1_CLOCK_ENABLE |= 512U; // Bitmask for RCC AHB1 initialization: 0x00000200U or 512U in decimal

    GPIOJ->MODER |= 1024U; //Bitmask for GPIO J Pin 5 initialization (set it to Output mode): 0x00000400U or 1024U in decimal
 800061a:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000624:	601a      	str	r2, [r3, #0]
    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
 8000626:	2120      	movs	r1, #32
 8000628:	6199      	str	r1, [r3, #24]
    GPIOJ->BSRR = (uint32_t)GPIO_PIN_5 << 16; // Turn off Green LED (LED2)
 800062a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800062e:	619a      	str	r2, [r3, #24]
    GPIOJ->ODR ^= (uint16_t)GPIO_PIN_5; // Toggle LED2
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	404a      	eors	r2, r1
 8000634:	615a      	str	r2, [r3, #20]
// It doesn't get lower level than this!
//    volatile uint32_t * GREENLEDMODER = (uint32_t*) 0x40022400U; // Init GPIO J Pin 5 (LED2 with no Alt. func.) to Output
//    *GREENLEDMODER |= 1024U; // Bitmask for GPIO J Pin 5 initialization: 0x00000400U or 1024U in decimal

    volatile uint32_t * GREENLEDBSRR = (uint32_t*) 0x40022418U; // Address of GPIO J Bit Set/Reset Register
    *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 8000636:	3318      	adds	r3, #24
 8000638:	6019      	str	r1, [r3, #0]

    HAL_Delay(1000); // Pause for a second
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 fa47 	bl	8000ad0 <HAL_Delay>
 8000642:	e018      	b.n	8000676 <main+0x96>
//        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);         // Turn green LED on (GPIO_PIN_SET == 1)
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
        if (choice == '0')
            return 1;
        else if(choice == '1')
            printf("\r\n\nHere we go again.\r\n\n");
 8000644:	4824      	ldr	r0, [pc, #144]	; (80006d8 <main+0xf8>)
 8000646:	f001 fda9 	bl	800219c <puts>
 800064a:	e007      	b.n	800065c <main+0x7c>
        else if(choice == '2')          // clear the screen with <ESC>[2J
        {
            printf("\033[2J\033[;H");
 800064c:	481e      	ldr	r0, [pc, #120]	; (80006c8 <main+0xe8>)
 800064e:	f001 fd1d 	bl	800208c <iprintf>
            fflush(stdout);
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <main+0xec>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6898      	ldr	r0, [r3, #8]
 8000658:	f001 fb3a 	bl	8001cd0 <fflush>
//						uart_print(&USB_UART, choice);
            printf("\" is not a valid choice.\r\n\n");
        }

// Messing around with more stuff
				printf("Enter an alphanumeric sequence (press <enter> if you want to send less than %d characters): \r\n", size + 1);
 800065c:	2104      	movs	r1, #4
 800065e:	481f      	ldr	r0, [pc, #124]	; (80006dc <main+0xfc>)
 8000660:	f001 fd14 	bl	800208c <iprintf>
				int a = uart_getline(&USB_UART, in, size);
 8000664:	2203      	movs	r2, #3
 8000666:	a901      	add	r1, sp, #4
 8000668:	481d      	ldr	r0, [pc, #116]	; (80006e0 <main+0x100>)
 800066a:	f000 f97c 	bl	8000966 <uart_getline>
				printf("\r\nuart_getline result: %d\r\n", a);
 800066e:	4601      	mov	r1, r0
 8000670:	481c      	ldr	r0, [pc, #112]	; (80006e4 <main+0x104>)
 8000672:	f001 fd0b 	bl	800208c <iprintf>
        printf("Hello World!\r\n\n");
 8000676:	481c      	ldr	r0, [pc, #112]	; (80006e8 <main+0x108>)
 8000678:	f001 fd90 	bl	800219c <puts>
        printf("( Welcome to Microprocessor Systems )\r\n\n\n");
 800067c:	481b      	ldr	r0, [pc, #108]	; (80006ec <main+0x10c>)
 800067e:	f001 fd8d 	bl	800219c <puts>
        printf("1=repeat, 2=clear, 0=quit.\r\n\n"); // Menu of choices
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <main+0x110>)
 8000684:	f001 fd8a 	bl	800219c <puts>
				choice = getchar();
 8000688:	f001 fc1a 	bl	8001ec0 <getchar>
 800068c:	b2c4      	uxtb	r4, r0
				putchar(choice);
 800068e:	4620      	mov	r0, r4
 8000690:	f001 fd14 	bl	80020bc <putchar>
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <main+0x114>)
 8000696:	2220      	movs	r2, #32
 8000698:	601a      	str	r2, [r3, #0]
        if (choice == '0')
 800069a:	2c30      	cmp	r4, #48	; 0x30
 800069c:	d011      	beq.n	80006c2 <main+0xe2>
        else if(choice == '1')
 800069e:	2c31      	cmp	r4, #49	; 0x31
 80006a0:	d0d0      	beq.n	8000644 <main+0x64>
        else if(choice == '2')          // clear the screen with <ESC>[2J
 80006a2:	2c32      	cmp	r4, #50	; 0x32
 80006a4:	d0d2      	beq.n	800064c <main+0x6c>
            *GREENLEDBSRR = (uint32_t)0x0020U << 16; // Turn off Green LED (LED2)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0x114>)
 80006a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ac:	601a      	str	r2, [r3, #0]
            printf("\r\nA \"");
 80006ae:	4812      	ldr	r0, [pc, #72]	; (80006f8 <main+0x118>)
 80006b0:	f001 fcec 	bl	800208c <iprintf>
						putchar(choice);
 80006b4:	4620      	mov	r0, r4
 80006b6:	f001 fd01 	bl	80020bc <putchar>
            printf("\" is not a valid choice.\r\n\n");
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <main+0x11c>)
 80006bc:	f001 fd6e 	bl	800219c <puts>
 80006c0:	e7cc      	b.n	800065c <main+0x7c>
		}
}
 80006c2:	2001      	movs	r0, #1
 80006c4:	b002      	add	sp, #8
 80006c6:	bd10      	pop	{r4, pc}
 80006c8:	08002dd4 	.word	0x08002dd4
 80006cc:	2000000c 	.word	0x2000000c
 80006d0:	08002de0 	.word	0x08002de0
 80006d4:	40023800 	.word	0x40023800
 80006d8:	08002e5c 	.word	0x08002e5c
 80006dc:	08002e98 	.word	0x08002e98
 80006e0:	20000098 	.word	0x20000098
 80006e4:	08002ef8 	.word	0x08002ef8
 80006e8:	08002e00 	.word	0x08002e00
 80006ec:	08002e10 	.word	0x08002e10
 80006f0:	08002e3c 	.word	0x08002e3c
 80006f4:	40022418 	.word	0x40022418
 80006f8:	08002e74 	.word	0x08002e74
 80006fc:	08002e7c 	.word	0x08002e7c

08000700 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000700:	b500      	push	{lr}
 8000702:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000716:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000718:	2219      	movs	r2, #25
 800071a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800071c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000720:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000724:	2309      	movs	r3, #9
 8000726:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000728:	2307      	movs	r3, #7
 800072a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800072c:	4668      	mov	r0, sp
 800072e:	f000 fb6b 	bl	8000e08 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000732:	b100      	cbz	r0, 8000736 <SystemClock_Config+0x36>
 8000734:	e7fe      	b.n	8000734 <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000736:	f000 fb29 	bl	8000d8c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800073a:	b100      	cbz	r0, 800073e <SystemClock_Config+0x3e>
 800073c:	e7fe      	b.n	800073c <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800073e:	230f      	movs	r3, #15
 8000740:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000756:	2107      	movs	r1, #7
 8000758:	a80d      	add	r0, sp, #52	; 0x34
 800075a:	f000 fd93 	bl	8001284 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800075e:	b100      	cbz	r0, 8000762 <SystemClock_Config+0x62>
 8000760:	e7fe      	b.n	8000760 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 8000762:	b013      	add	sp, #76	; 0x4c
 8000764:	f85d fb04 	ldr.w	pc, [sp], #4

08000768 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000768:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800076e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <CPU_CACHE_Enable+0x7c>)
 8000774:	2100      	movs	r1, #0
 8000776:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800077a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800077e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000788:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800078a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000792:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000796:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800079a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800079e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80007a2:	e00f      	b.n	80007c4 <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007a4:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007a6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007aa:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80007ae:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80007b2:	490c      	ldr	r1, [pc, #48]	; (80007e4 <CPU_CACHE_Enable+0x7c>)
 80007b4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80007b8:	1e53      	subs	r3, r2, #1
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d1f2      	bne.n	80007a4 <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 80007be:	1e43      	subs	r3, r0, #1
 80007c0:	b118      	cbz	r0, 80007ca <CPU_CACHE_Enable+0x62>
 80007c2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007c4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80007c8:	e7ed      	b.n	80007a6 <CPU_CACHE_Enable+0x3e>
 80007ca:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007ce:	694b      	ldr	r3, [r1, #20]
 80007d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d4:	614b      	str	r3, [r1, #20]
 80007d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007da:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80007de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80007e8:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80007ea:	f7ff ffbd 	bl	8000768 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80007ee:	f000 f947 	bl	8000a80 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80007f2:	f7ff ff85 	bl	8000700 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80007f6:	4a03      	ldr	r2, [pc, #12]	; (8000804 <Sys_Init+0x1c>)
 80007f8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <Sys_Init+0x20>)
 80007fe:	f000 f873 	bl	80008e8 <initUart>
}
 8000802:	bd08      	pop	{r3, pc}
 8000804:	40011000 	.word	0x40011000
 8000808:	20000098 	.word	0x20000098

0800080c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800080c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800080e:	f000 f94d 	bl	8000aac <HAL_IncTick>
}
 8000812:	bd08      	pop	{r3, pc}

08000814 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000814:	b530      	push	{r4, r5, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000818:	6803      	ldr	r3, [r0, #0]
 800081a:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <HAL_UART_MspInit+0xc0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d004      	beq.n	800082a <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <HAL_UART_MspInit+0xc4>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d02c      	beq.n	8000880 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000826:	b00b      	add	sp, #44	; 0x2c
 8000828:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800082a:	4c2c      	ldr	r4, [pc, #176]	; (80008dc <HAL_UART_MspInit+0xc8>)
 800082c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6323      	str	r3, [r4, #48]	; 0x30
 8000834:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800083e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000842:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000850:	2307      	movs	r3, #7
 8000852:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000854:	4d22      	ldr	r5, [pc, #136]	; (80008e0 <HAL_UART_MspInit+0xcc>)
 8000856:	a905      	add	r1, sp, #20
 8000858:	4628      	mov	r0, r5
 800085a:	f000 f9a7 	bl	8000bac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000864:	a905      	add	r1, sp, #20
 8000866:	4628      	mov	r0, r5
 8000868:	f000 f9a0 	bl	8000bac <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800086c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6463      	str	r3, [r4, #68]	; 0x44
 8000874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	9b02      	ldr	r3, [sp, #8]
 800087e:	e7d2      	b.n	8000826 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000880:	4c16      	ldr	r4, [pc, #88]	; (80008dc <HAL_UART_MspInit+0xc8>)
 8000882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6323      	str	r3, [r4, #48]	; 0x30
 800088a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	9303      	str	r3, [sp, #12]
 8000892:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80008a4:	2308      	movs	r3, #8
 80008a6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80008a8:	4d0e      	ldr	r5, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0xd0>)
 80008aa:	a905      	add	r1, sp, #20
 80008ac:	4628      	mov	r0, r5
 80008ae:	f000 f97d 	bl	8000bac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80008b6:	a905      	add	r1, sp, #20
 80008b8:	4628      	mov	r0, r5
 80008ba:	f000 f977 	bl	8000bac <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80008be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6463      	str	r3, [r4, #68]	; 0x44
 80008c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	9304      	str	r3, [sp, #16]
 80008ce:	9b04      	ldr	r3, [sp, #16]
}
 80008d0:	e7a9      	b.n	8000826 <HAL_UART_MspInit+0x12>
 80008d2:	bf00      	nop
 80008d4:	40011000 	.word	0x40011000
 80008d8:	40011400 	.word	0x40011400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020800 	.word	0x40020800

080008e8 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 80008e8:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 80008ea:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 80008ec:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	2200      	movs	r2, #0
 80008f0:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 80008f2:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 80008f4:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 80008f6:	210c      	movs	r1, #12
 80008f8:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80008fa:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80008fc:	f001 f907 	bl	8001b0e <HAL_UART_Init>
}
 8000900:	bd08      	pop	{r3, pc}
	...

08000904 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000904:	b510      	push	{r4, lr}
 8000906:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	b292      	uxth	r2, r2
 800090e:	4802      	ldr	r0, [pc, #8]	; (8000918 <_write+0x14>)
 8000910:	f000 ffdd 	bl	80018ce <HAL_UART_Transmit>
	return len;
}
 8000914:	4620      	mov	r0, r4
 8000916:	bd10      	pop	{r4, pc}
 8000918:	20000098 	.word	0x20000098

0800091c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800091c:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800091e:	2200      	movs	r2, #0
 8000920:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	2201      	movs	r2, #1
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <_read+0x18>)
 800092a:	f001 f83e 	bl	80019aa <HAL_UART_Receive>
	return len;
}
 800092e:	2001      	movs	r0, #1
 8000930:	bd08      	pop	{r3, pc}
 8000932:	bf00      	nop
 8000934:	20000098 	.word	0x20000098

08000938 <uart_getchar>:
    HAL_UART_Transmit(huart, (uint8_t*) string, strlen((const char*)string), 1000);
}

// Get one character
// 'echo' means enable (1) or disable (0) echoing of characters
char uart_getchar(UART_HandleTypeDef *huart, uint8_t echo) {
 8000938:	b530      	push	{r4, r5, lr}
 800093a:	b083      	sub	sp, #12
 800093c:	4605      	mov	r5, r0
 800093e:	460c      	mov	r4, r1
	char input[1];
	HAL_UART_Receive(huart, (uint8_t *)input, 1, HAL_MAX_DELAY);
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	2201      	movs	r2, #1
 8000946:	a901      	add	r1, sp, #4
 8000948:	f001 f82f 	bl	80019aa <HAL_UART_Receive>
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 800094c:	b91c      	cbnz	r4, 8000956 <uart_getchar+0x1e>
	return (char)input[0];
}
 800094e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000952:	b003      	add	sp, #12
 8000954:	bd30      	pop	{r4, r5, pc}
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	2201      	movs	r2, #1
 800095c:	a901      	add	r1, sp, #4
 800095e:	4628      	mov	r0, r5
 8000960:	f000 ffb5 	bl	80018ce <HAL_UART_Transmit>
 8000964:	e7f3      	b.n	800094e <uart_getchar+0x16>

08000966 <uart_getline>:

// Collects characters until size limit or an endline is recieved
// Returns number of characters collected
// 'max size' should match the size of the array or be smaller
int uart_getline(UART_HandleTypeDef *huart, char * input, int max_size)
{
 8000966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000968:	4606      	mov	r6, r0
 800096a:	460f      	mov	r7, r1
 800096c:	4615      	mov	r5, r2
  char single;
  int i = 0;
 800096e:	2400      	movs	r4, #0

	while(1)
	{
		if (i > max_size)
 8000970:	42ac      	cmp	r4, r5
 8000972:	dc0a      	bgt.n	800098a <uart_getline+0x24>
      {
				break;
			}

		single = uart_getchar(huart, 1); // Get one character
 8000974:	2101      	movs	r1, #1
 8000976:	4630      	mov	r0, r6
 8000978:	f7ff ffde 	bl	8000938 <uart_getchar>

  	if (single == '\n' || single == '\r') // Unix & co. use \n, Windows uses \r\n
 800097c:	280d      	cmp	r0, #13
 800097e:	bf18      	it	ne
 8000980:	280a      	cmpne	r0, #10
 8000982:	d002      	beq.n	800098a <uart_getline+0x24>
			break;
  	else
			input[i] = single;
 8000984:	5538      	strb	r0, [r7, r4]
  	i++;
 8000986:	3401      	adds	r4, #1
		if (i > max_size)
 8000988:	e7f2      	b.n	8000970 <uart_getline+0xa>
	}
  return i; // The way this is set up, it will always report the wrong size
}
 800098a:	4620      	mov	r0, r4
 800098c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0b      	ldr	r4, [pc, #44]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ba:	f000 f813 	bl	80009e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009be:	f001 fa91 	bl	8001ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fe0d 	bl	80005e0 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009d4:	08003128 	.word	0x08003128
  ldr r2, =_sbss
 80009d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009dc:	200001a0 	.word	0x200001a0

080009e0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <SystemInit+0x40>)
 80009e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <SystemInit+0x44>)
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	f041 0101 	orr.w	r1, r1, #1
 80009fc:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009fe:	2000      	movs	r0, #0
 8000a00:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4909      	ldr	r1, [pc, #36]	; (8000a2c <SystemInit+0x48>)
 8000a06:	4021      	ands	r1, r4
 8000a08:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a0a:	4909      	ldr	r1, [pc, #36]	; (8000a30 <SystemInit+0x4c>)
 8000a0c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a0e:	6819      	ldr	r1, [r3, #0]
 8000a10:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000a14:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a16:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a1c:	6093      	str	r3, [r2, #8]
#endif
}
 8000a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	fef6ffff 	.word	0xfef6ffff
 8000a30:	24003010 	.word	0x24003010

08000a34 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_InitTick+0x40>)
 8000a3e:	7818      	ldrb	r0, [r3, #0]
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <HAL_InitTick+0x44>)
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a50:	f000 f896 	bl	8000b80 <HAL_SYSTICK_Config>
 8000a54:	b968      	cbnz	r0, 8000a72 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	2c0f      	cmp	r4, #15
 8000a58:	d901      	bls.n	8000a5e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	e00a      	b.n	8000a74 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4621      	mov	r1, r4
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	f000 f859 	bl	8000b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6a:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_InitTick+0x40>)
 8000a6c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2000      	movs	r0, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a72:	2001      	movs	r0, #1
}
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	bf00      	nop
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	20000000 	.word	0x20000000

08000a80 <HAL_Init>:
{
 8000a80:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_Init+0x28>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a92:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f82f 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff ffcc 	bl	8000a38 <HAL_InitTick>
  HAL_MspInit();
 8000aa0:	f7ff ffc8 	bl	8000a34 <HAL_MspInit>
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	bd08      	pop	{r3, pc}
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x10>)
 8000aae:	6811      	ldr	r1, [r2, #0]
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_IncTick+0x14>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	440b      	add	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000198 	.word	0x20000198
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <HAL_GetTick+0x8>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000198 	.word	0x20000198

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff6 	bl	8000ac4 <HAL_GetTick>
 8000ad8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ade:	d002      	beq.n	8000ae6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_Delay+0x24>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	f7ff ffed 	bl	8000ac4 <HAL_GetTick>
 8000aea:	1b40      	subs	r0, r0, r5
 8000aec:	42a0      	cmp	r0, r4
 8000aee:	d3fa      	bcc.n	8000ae6 <HAL_Delay+0x16>
  {
  }
}
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4906      	ldr	r1, [pc, #24]	; (8000b14 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000afa:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	0200      	lsls	r0, r0, #8
 8000b06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b0c:	4a02      	ldr	r2, [pc, #8]	; (8000b18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b0e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000b10:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00
 8000b18:	05fa0000 	.word	0x05fa0000

08000b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1c:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_NVIC_SetPriority+0x58>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b26:	f1c3 0407 	rsb	r4, r3, #7
 8000b2a:	2c04      	cmp	r4, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b30:	1d1d      	adds	r5, r3, #4
 8000b32:	2d06      	cmp	r5, #6
 8000b34:	d914      	bls.n	8000b60 <HAL_NVIC_SetPriority+0x44>
 8000b36:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 35ff 	mov.w	r5, #4294967295
 8000b3c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b40:	ea21 0104 	bic.w	r1, r1, r4
 8000b44:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b46:	fa05 f303 	lsl.w	r3, r5, r3
 8000b4a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b50:	2800      	cmp	r0, #0
 8000b52:	db07      	blt.n	8000b64 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	0109      	lsls	r1, r1, #4
 8000b56:	b2c9      	uxtb	r1, r1
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_NVIC_SetPriority+0x5c>)
 8000b5a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b5c:	bc30      	pop	{r4, r5}
 8000b5e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b60:	2300      	movs	r3, #0
 8000b62:	e7e9      	b.n	8000b38 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	f000 000f 	and.w	r0, r0, #15
 8000b68:	0109      	lsls	r1, r1, #4
 8000b6a:	b2c9      	uxtb	r1, r1
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_NVIC_SetPriority+0x60>)
 8000b6e:	5419      	strb	r1, [r3, r0]
 8000b70:	e7f4      	b.n	8000b5c <HAL_NVIC_SetPriority+0x40>
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	e000e400 	.word	0xe000e400
 8000b7c:	e000ed14 	.word	0xe000ed14

08000b80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	3801      	subs	r0, #1
 8000b82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b86:	d20a      	bcs.n	8000b9e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_SYSTICK_Config+0x24>)
 8000b8a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_SYSTICK_Config+0x28>)
 8000b8e:	21f0      	movs	r1, #240	; 0xf0
 8000b90:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	2000      	movs	r0, #0
 8000b96:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	f200 80e2 	bhi.w	8000d78 <HAL_GPIO_Init+0x1cc>
{
 8000bb4:	b4f0      	push	{r4, r5, r6, r7}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	e039      	b.n	8000c2e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bba:	2209      	movs	r2, #9
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	40b2      	lsls	r2, r6
 8000bc2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bc4:	3402      	adds	r4, #2
 8000bc6:	4e6d      	ldr	r6, [pc, #436]	; (8000d7c <HAL_GPIO_Init+0x1d0>)
 8000bc8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bcc:	4a6c      	ldr	r2, [pc, #432]	; (8000d80 <HAL_GPIO_Init+0x1d4>)
 8000bce:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	43ea      	mvns	r2, r5
 8000bd2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd6:	684f      	ldr	r7, [r1, #4]
 8000bd8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000bdc:	d001      	beq.n	8000be2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000bde:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000be2:	4c67      	ldr	r4, [pc, #412]	; (8000d80 <HAL_GPIO_Init+0x1d4>)
 8000be4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000be6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000be8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bec:	684f      	ldr	r7, [r1, #4]
 8000bee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000bf2:	d001      	beq.n	8000bf8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000bf4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000bf8:	4c61      	ldr	r4, [pc, #388]	; (8000d80 <HAL_GPIO_Init+0x1d4>)
 8000bfa:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfc:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bfe:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c02:	684f      	ldr	r7, [r1, #4]
 8000c04:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000c08:	d001      	beq.n	8000c0e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000c0a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000c0e:	4c5c      	ldr	r4, [pc, #368]	; (8000d80 <HAL_GPIO_Init+0x1d4>)
 8000c10:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000c12:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c14:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c16:	684e      	ldr	r6, [r1, #4]
 8000c18:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000c1c:	d001      	beq.n	8000c22 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000c1e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000c22:	4c57      	ldr	r4, [pc, #348]	; (8000d80 <HAL_GPIO_Init+0x1d4>)
 8000c24:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c26:	3301      	adds	r3, #1
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	f200 80a2 	bhi.w	8000d72 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	680c      	ldr	r4, [r1, #0]
 8000c34:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000c38:	42aa      	cmp	r2, r5
 8000c3a:	d1f4      	bne.n	8000c26 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3c:	684c      	ldr	r4, [r1, #4]
 8000c3e:	2c12      	cmp	r4, #18
 8000c40:	bf18      	it	ne
 8000c42:	2c02      	cmpne	r4, #2
 8000c44:	d110      	bne.n	8000c68 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000c46:	08de      	lsrs	r6, r3, #3
 8000c48:	3608      	adds	r6, #8
 8000c4a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c4e:	f003 0407 	and.w	r4, r3, #7
 8000c52:	00a7      	lsls	r7, r4, #2
 8000c54:	240f      	movs	r4, #15
 8000c56:	40bc      	lsls	r4, r7
 8000c58:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c5c:	690c      	ldr	r4, [r1, #16]
 8000c5e:	40bc      	lsls	r4, r7
 8000c60:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c64:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000c68:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c6a:	005f      	lsls	r7, r3, #1
 8000c6c:	2603      	movs	r6, #3
 8000c6e:	40be      	lsls	r6, r7
 8000c70:	43f6      	mvns	r6, r6
 8000c72:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c76:	684c      	ldr	r4, [r1, #4]
 8000c78:	f004 0403 	and.w	r4, r4, #3
 8000c7c:	40bc      	lsls	r4, r7
 8000c7e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000c82:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c84:	684c      	ldr	r4, [r1, #4]
 8000c86:	f104 3cff 	add.w	ip, r4, #4294967295
 8000c8a:	2c11      	cmp	r4, #17
 8000c8c:	bf18      	it	ne
 8000c8e:	f1bc 0f01 	cmpne.w	ip, #1
 8000c92:	d901      	bls.n	8000c98 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	2c12      	cmp	r4, #18
 8000c96:	d111      	bne.n	8000cbc <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000c98:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c9a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c9e:	68cc      	ldr	r4, [r1, #12]
 8000ca0:	40bc      	lsls	r4, r7
 8000ca2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000ca6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ca8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000caa:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cae:	684c      	ldr	r4, [r1, #4]
 8000cb0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000cba:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cbc:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cbe:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cc0:	688a      	ldr	r2, [r1, #8]
 8000cc2:	40ba      	lsls	r2, r7
 8000cc4:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000cc6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc8:	684a      	ldr	r2, [r1, #4]
 8000cca:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cce:	d0aa      	beq.n	8000c26 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <HAL_GPIO_Init+0x1d8>)
 8000cd2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000cd4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000cd8:	6454      	str	r4, [r2, #68]	; 0x44
 8000cda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cdc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ce0:	9201      	str	r2, [sp, #4]
 8000ce2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ce4:	089c      	lsrs	r4, r3, #2
 8000ce6:	1ca6      	adds	r6, r4, #2
 8000ce8:	4a24      	ldr	r2, [pc, #144]	; (8000d7c <HAL_GPIO_Init+0x1d0>)
 8000cea:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cee:	f003 0203 	and.w	r2, r3, #3
 8000cf2:	0096      	lsls	r6, r2, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	40b2      	lsls	r2, r6
 8000cf8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x1dc>)
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f43f af5d 	beq.w	8000bbe <HAL_GPIO_Init+0x12>
 8000d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d022      	beq.n	8000d52 <HAL_GPIO_Init+0x1a6>
 8000d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d020      	beq.n	8000d56 <HAL_GPIO_Init+0x1aa>
 8000d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	d01e      	beq.n	8000d5a <HAL_GPIO_Init+0x1ae>
 8000d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d01c      	beq.n	8000d5e <HAL_GPIO_Init+0x1b2>
 8000d24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	d01a      	beq.n	8000d62 <HAL_GPIO_Init+0x1b6>
 8000d2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d018      	beq.n	8000d66 <HAL_GPIO_Init+0x1ba>
 8000d34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d016      	beq.n	8000d6a <HAL_GPIO_Init+0x1be>
 8000d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d014      	beq.n	8000d6e <HAL_GPIO_Init+0x1c2>
 8000d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f43f af36 	beq.w	8000bba <HAL_GPIO_Init+0xe>
 8000d4e:	220a      	movs	r2, #10
 8000d50:	e736      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d52:	2201      	movs	r2, #1
 8000d54:	e734      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d56:	2202      	movs	r2, #2
 8000d58:	e732      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	e730      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d5e:	2204      	movs	r2, #4
 8000d60:	e72e      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d62:	2205      	movs	r2, #5
 8000d64:	e72c      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d66:	2206      	movs	r2, #6
 8000d68:	e72a      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	e728      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
 8000d6e:	2208      	movs	r2, #8
 8000d70:	e726      	b.n	8000bc0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d72:	b002      	add	sp, #8
 8000d74:	bcf0      	pop	{r4, r5, r6, r7}
 8000d76:	4770      	bx	lr
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40013c00 	.word	0x40013c00
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_PWREx_EnableOverDrive+0x74>)
 8000d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_PWREx_EnableOverDrive+0x78>)
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dae:	f7ff fe89 	bl	8000ac4 <HAL_GetTick>
 8000db2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <HAL_PWREx_EnableOverDrive+0x78>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dbc:	d108      	bne.n	8000dd0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dbe:	f7ff fe81 	bl	8000ac4 <HAL_GetTick>
 8000dc2:	1b00      	subs	r0, r0, r4
 8000dc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dc8:	d9f4      	bls.n	8000db4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000dca:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <HAL_PWREx_EnableOverDrive+0x78>)
 8000dd2:	6813      	ldr	r3, [r2, #0]
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000dda:	f7ff fe73 	bl	8000ac4 <HAL_GetTick>
 8000dde:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_PWREx_EnableOverDrive+0x78>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000de8:	d107      	bne.n	8000dfa <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dea:	f7ff fe6b 	bl	8000ac4 <HAL_GetTick>
 8000dee:	1b00      	subs	r0, r0, r4
 8000df0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000df4:	d9f4      	bls.n	8000de0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000df6:	2003      	movs	r0, #3
 8000df8:	e7e8      	b.n	8000dcc <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e7e6      	b.n	8000dcc <HAL_PWREx_EnableOverDrive+0x40>
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	f000 81dc 	beq.w	80011c6 <HAL_RCC_OscConfig+0x3be>
{
 8000e0e:	b570      	push	{r4, r5, r6, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e14:	6803      	ldr	r3, [r0, #0]
 8000e16:	f013 0f01 	tst.w	r3, #1
 8000e1a:	d029      	beq.n	8000e70 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e1c:	4ba2      	ldr	r3, [pc, #648]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d01a      	beq.n	8000e5e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e28:	4b9f      	ldr	r3, [pc, #636]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d00f      	beq.n	8000e54 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e34:	6863      	ldr	r3, [r4, #4]
 8000e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3a:	d040      	beq.n	8000ebe <HAL_RCC_OscConfig+0xb6>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d154      	bne.n	8000eea <HAL_RCC_OscConfig+0xe2>
 8000e40:	4b99      	ldr	r3, [pc, #612]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e039      	b.n	8000ec8 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e54:	4b94      	ldr	r3, [pc, #592]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e5c:	d0ea      	beq.n	8000e34 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5e:	4b92      	ldr	r3, [pc, #584]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e66:	d003      	beq.n	8000e70 <HAL_RCC_OscConfig+0x68>
 8000e68:	6863      	ldr	r3, [r4, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 81ad 	beq.w	80011ca <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	f013 0f02 	tst.w	r3, #2
 8000e76:	d075      	beq.n	8000f64 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e78:	4b8b      	ldr	r3, [pc, #556]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f013 0f0c 	tst.w	r3, #12
 8000e80:	d05e      	beq.n	8000f40 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e82:	4b89      	ldr	r3, [pc, #548]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d053      	beq.n	8000f36 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e8e:	68e3      	ldr	r3, [r4, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 808a 	beq.w	8000faa <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e96:	4a84      	ldr	r2, [pc, #528]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000e98:	6813      	ldr	r3, [r2, #0]
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fe10 	bl	8000ac4 <HAL_GetTick>
 8000ea4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea6:	4b80      	ldr	r3, [pc, #512]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f013 0f02 	tst.w	r3, #2
 8000eae:	d173      	bne.n	8000f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fe08 	bl	8000ac4 <HAL_GetTick>
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9f5      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000eba:	2003      	movs	r0, #3
 8000ebc:	e188      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	4a7a      	ldr	r2, [pc, #488]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	b32b      	cbz	r3, 8000f18 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fdfa 	bl	8000ac4 <HAL_GetTick>
 8000ed0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	4b75      	ldr	r3, [pc, #468]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eda:	d1c9      	bne.n	8000e70 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fdf2 	bl	8000ac4 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2864      	cmp	r0, #100	; 0x64
 8000ee4:	d9f5      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e172      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eee:	d009      	beq.n	8000f04 <HAL_RCC_OscConfig+0xfc>
 8000ef0:	4b6d      	ldr	r3, [pc, #436]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e7e1      	b.n	8000ec8 <HAL_RCC_OscConfig+0xc0>
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e7d7      	b.n	8000ec8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000f18:	f7ff fdd4 	bl	8000ac4 <HAL_GetTick>
 8000f1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f26:	d0a3      	beq.n	8000e70 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fdcc 	bl	8000ac4 <HAL_GetTick>
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	2864      	cmp	r0, #100	; 0x64
 8000f30:	d9f5      	bls.n	8000f1e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000f32:	2003      	movs	r0, #3
 8000f34:	e14c      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f36:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f3e:	d1a6      	bne.n	8000e8e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f40:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f013 0f02 	tst.w	r3, #2
 8000f48:	d004      	beq.n	8000f54 <HAL_RCC_OscConfig+0x14c>
 8000f4a:	68e3      	ldr	r3, [r4, #12]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
 8000f52:	e13d      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4a54      	ldr	r2, [pc, #336]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f5c:	6921      	ldr	r1, [r4, #16]
 8000f5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f62:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	f013 0f08 	tst.w	r3, #8
 8000f6a:	d046      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f6c:	6963      	ldr	r3, [r4, #20]
 8000f6e:	b383      	cbz	r3, 8000fd2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f70:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f72:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fda3 	bl	8000ac4 <HAL_GetTick>
 8000f7e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f80:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f84:	f013 0f02 	tst.w	r3, #2
 8000f88:	d137      	bne.n	8000ffa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fd9b 	bl	8000ac4 <HAL_GetTick>
 8000f8e:	1b40      	subs	r0, r0, r5
 8000f90:	2802      	cmp	r0, #2
 8000f92:	d9f5      	bls.n	8000f80 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000f94:	2003      	movs	r0, #3
 8000f96:	e11b      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fa0:	6921      	ldr	r1, [r4, #16]
 8000fa2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e7dc      	b.n	8000f64 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000faa:	4a3f      	ldr	r2, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fd86 	bl	8000ac4 <HAL_GetTick>
 8000fb8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f013 0f02 	tst.w	r3, #2
 8000fc2:	d0cf      	beq.n	8000f64 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fd7e 	bl	8000ac4 <HAL_GetTick>
 8000fc8:	1b40      	subs	r0, r0, r5
 8000fca:	2802      	cmp	r0, #2
 8000fcc:	d9f5      	bls.n	8000fba <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000fce:	2003      	movs	r0, #3
 8000fd0:	e0fe      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd2:	4a35      	ldr	r2, [pc, #212]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000fd4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fd72 	bl	8000ac4 <HAL_GetTick>
 8000fe0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8000fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fe6:	f013 0f02 	tst.w	r3, #2
 8000fea:	d006      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fd6a 	bl	8000ac4 <HAL_GetTick>
 8000ff0:	1b40      	subs	r0, r0, r5
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d9f5      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	e0ea      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f013 0f04 	tst.w	r3, #4
 8001000:	d07e      	beq.n	8001100 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800100a:	d11e      	bne.n	800104a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 800100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001010:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001020:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <HAL_RCC_OscConfig+0x2a4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f413 7f80 	tst.w	r3, #256	; 0x100
 800102a:	d010      	beq.n	800104e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	68a3      	ldr	r3, [r4, #8]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d021      	beq.n	8001076 <HAL_RCC_OscConfig+0x26e>
 8001032:	2b00      	cmp	r3, #0
 8001034:	d13c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2a8>
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8001038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	671a      	str	r2, [r3, #112]	; 0x70
 8001040:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001042:	f022 0204 	bic.w	r2, r2, #4
 8001046:	671a      	str	r2, [r3, #112]	; 0x70
 8001048:	e01a      	b.n	8001080 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800104a:	2500      	movs	r5, #0
 800104c:	e7e9      	b.n	8001022 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_RCC_OscConfig+0x2a4>)
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001056:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001058:	f7ff fd34 	bl	8000ac4 <HAL_GetTick>
 800105c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_RCC_OscConfig+0x2a4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001066:	d1e1      	bne.n	800102c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001068:	f7ff fd2c 	bl	8000ac4 <HAL_GetTick>
 800106c:	1b80      	subs	r0, r0, r6
 800106e:	2864      	cmp	r0, #100	; 0x64
 8001070:	d9f5      	bls.n	800105e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	e0ac      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 8001078:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001080:	68a3      	ldr	r3, [r4, #8]
 8001082:	b35b      	cbz	r3, 80010dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001084:	f7ff fd1e 	bl	8000ac4 <HAL_GetTick>
 8001088:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_RCC_OscConfig+0x2a0>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108e:	f013 0f02 	tst.w	r3, #2
 8001092:	d134      	bne.n	80010fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff fd16 	bl	8000ac4 <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	f241 3388 	movw	r3, #5000	; 0x1388
 800109e:	4298      	cmp	r0, r3
 80010a0:	d9f3      	bls.n	800108a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80010a2:	2003      	movs	r0, #3
 80010a4:	e094      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d009      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2c0>
 80010b4:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 80010b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010b8:	f022 0201 	bic.w	r2, r2, #1
 80010bc:	671a      	str	r2, [r3, #112]	; 0x70
 80010be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010c0:	f022 0204 	bic.w	r2, r2, #4
 80010c4:	671a      	str	r2, [r3, #112]	; 0x70
 80010c6:	e7db      	b.n	8001080 <HAL_RCC_OscConfig+0x278>
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 80010ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	671a      	str	r2, [r3, #112]	; 0x70
 80010d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	671a      	str	r2, [r3, #112]	; 0x70
 80010da:	e7d1      	b.n	8001080 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fcf2 	bl	8000ac4 <HAL_GetTick>
 80010e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 80010e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e6:	f013 0f02 	tst.w	r3, #2
 80010ea:	d008      	beq.n	80010fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f7ff fcea 	bl	8000ac4 <HAL_GetTick>
 80010f0:	1b80      	subs	r0, r0, r6
 80010f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d9f3      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80010fa:	2003      	movs	r0, #3
 80010fc:	e068      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010fe:	b9f5      	cbnz	r5, 800113e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001100:	69a3      	ldr	r3, [r4, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 8001108:	6892      	ldr	r2, [r2, #8]
 800110a:	f002 020c 	and.w	r2, r2, #12
 800110e:	2a08      	cmp	r2, #8
 8001110:	d060      	beq.n	80011d4 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001112:	2b02      	cmp	r3, #2
 8001114:	d019      	beq.n	800114a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001116:	4a30      	ldr	r2, [pc, #192]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800111e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fcd0 	bl	8000ac4 <HAL_GetTick>
 8001124:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800112e:	d048      	beq.n	80011c2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001130:	f7ff fcc8 	bl	8000ac4 <HAL_GetTick>
 8001134:	1b00      	subs	r0, r0, r4
 8001136:	2802      	cmp	r0, #2
 8001138:	d9f5      	bls.n	8001126 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
 800113c:	e048      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 8001140:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	e7da      	b.n	8001100 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001152:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001154:	f7ff fcb6 	bl	8000ac4 <HAL_GetTick>
 8001158:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001162:	d006      	beq.n	8001172 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fcae 	bl	8000ac4 <HAL_GetTick>
 8001168:	1b40      	subs	r0, r0, r5
 800116a:	2802      	cmp	r0, #2
 800116c:	d9f5      	bls.n	800115a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800116e:	2003      	movs	r0, #3
 8001170:	e02e      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001172:	69e3      	ldr	r3, [r4, #28]
 8001174:	6a22      	ldr	r2, [r4, #32]
 8001176:	4313      	orrs	r3, r2
 8001178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800117a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800117e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001180:	0852      	lsrs	r2, r2, #1
 8001182:	3a01      	subs	r2, #1
 8001184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001188:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800118a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800118e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001190:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 8001196:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc90 	bl	8000ac4 <HAL_GetTick>
 80011a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_RCC_OscConfig+0x3d0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fc88 	bl	8000ac4 <HAL_GetTick>
 80011b4:	1b00      	subs	r0, r0, r4
 80011b6:	2802      	cmp	r0, #2
 80011b8:	d9f5      	bls.n	80011a6 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 80011ba:	2003      	movs	r0, #3
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80011be:	2000      	movs	r0, #0
 80011c0:	e006      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e004      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
}
 80011c8:	4770      	bx	lr
        return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	e000      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80011ce:	2000      	movs	r0, #0
}
 80011d0:	b002      	add	sp, #8
 80011d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80011d4:	2001      	movs	r0, #1
 80011d6:	e7fb      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c8>
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d044      	beq.n	8001272 <HAL_RCC_GetSysClockFreq+0x96>
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <HAL_RCC_GetSysClockFreq+0xa0>)
 80011ee:	4770      	bx	lr
{
 80011f0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001202:	d013      	beq.n	800122c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800120c:	2300      	movs	r3, #0
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001210:	fba1 0100 	umull	r0, r1, r1, r0
 8001214:	f7ff f864 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001220:	3301      	adds	r3, #1
 8001222:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001224:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001228:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001234:	461e      	mov	r6, r3
 8001236:	2700      	movs	r7, #0
 8001238:	015c      	lsls	r4, r3, #5
 800123a:	2500      	movs	r5, #0
 800123c:	1ae4      	subs	r4, r4, r3
 800123e:	eb65 0507 	sbc.w	r5, r5, r7
 8001242:	01a9      	lsls	r1, r5, #6
 8001244:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001248:	01a0      	lsls	r0, r4, #6
 800124a:	1b00      	subs	r0, r0, r4
 800124c:	eb61 0105 	sbc.w	r1, r1, r5
 8001250:	00cb      	lsls	r3, r1, #3
 8001252:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001256:	00c4      	lsls	r4, r0, #3
 8001258:	19a0      	adds	r0, r4, r6
 800125a:	eb43 0107 	adc.w	r1, r3, r7
 800125e:	028b      	lsls	r3, r1, #10
 8001260:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001264:	0284      	lsls	r4, r0, #10
 8001266:	4620      	mov	r0, r4
 8001268:	4619      	mov	r1, r3
 800126a:	2300      	movs	r3, #0
 800126c:	f7ff f838 	bl	80002e0 <__aeabi_uldivmod>
 8001270:	e7d2      	b.n	8001218 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	00f42400 	.word	0x00f42400
 8001280:	017d7840 	.word	0x017d7840

08001284 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001284:	2800      	cmp	r0, #0
 8001286:	f000 80a2 	beq.w	80013ce <HAL_RCC_ClockConfig+0x14a>
{
 800128a:	b570      	push	{r4, r5, r6, lr}
 800128c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800128e:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <HAL_RCC_ClockConfig+0x154>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	428b      	cmp	r3, r1
 8001298:	d20c      	bcs.n	80012b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129a:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_RCC_ClockConfig+0x154>)
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f023 030f 	bic.w	r3, r3, #15
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	428b      	cmp	r3, r1
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
}
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	f013 0f02 	tst.w	r3, #2
 80012ba:	d017      	beq.n	80012ec <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	f013 0f04 	tst.w	r3, #4
 80012c0:	d004      	beq.n	80012cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c2:	4a46      	ldr	r2, [pc, #280]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 80012c4:	6893      	ldr	r3, [r2, #8]
 80012c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ca:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	f013 0f08 	tst.w	r3, #8
 80012d2:	d004      	beq.n	80012de <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d4:	4a41      	ldr	r2, [pc, #260]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 80012d6:	6893      	ldr	r3, [r2, #8]
 80012d8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012de:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 80012e0:	6893      	ldr	r3, [r2, #8]
 80012e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012e6:	68a0      	ldr	r0, [r4, #8]
 80012e8:	4303      	orrs	r3, r0
 80012ea:	6093      	str	r3, [r2, #8]
 80012ec:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	f013 0f01 	tst.w	r3, #1
 80012f4:	d031      	beq.n	800135a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d020      	beq.n	800133e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d025      	beq.n	800134c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4a36      	ldr	r2, [pc, #216]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f012 0f02 	tst.w	r2, #2
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130a:	4934      	ldr	r1, [pc, #208]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 800130c:	688a      	ldr	r2, [r1, #8]
 800130e:	f022 0203 	bic.w	r2, r2, #3
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001316:	f7ff fbd5 	bl	8000ac4 <HAL_GetTick>
 800131a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	6862      	ldr	r2, [r4, #4]
 8001326:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800132a:	d016      	beq.n	800135a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132c:	f7ff fbca 	bl	8000ac4 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	f241 3388 	movw	r3, #5000	; 0x1388
 8001336:	4298      	cmp	r0, r3
 8001338:	d9f0      	bls.n	800131c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e7b9      	b.n	80012b2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001346:	d1e0      	bne.n	800130a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001348:	2001      	movs	r0, #1
 800134a:	e7b2      	b.n	80012b2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001354:	d1d9      	bne.n	800130a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
 8001358:	e7ab      	b.n	80012b2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_RCC_ClockConfig+0x154>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	42ab      	cmp	r3, r5
 8001364:	d90c      	bls.n	8001380 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <HAL_RCC_ClockConfig+0x154>)
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f023 030f 	bic.w	r3, r3, #15
 800136e:	432b      	orrs	r3, r5
 8001370:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	42ab      	cmp	r3, r5
 800137a:	d001      	beq.n	8001380 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
 800137e:	e798      	b.n	80012b2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	f013 0f04 	tst.w	r3, #4
 8001386:	d006      	beq.n	8001396 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 800138a:	6893      	ldr	r3, [r2, #8]
 800138c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001390:	68e1      	ldr	r1, [r4, #12]
 8001392:	430b      	orrs	r3, r1
 8001394:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	f013 0f08 	tst.w	r3, #8
 800139c:	d007      	beq.n	80013ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800139e:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 80013a0:	6893      	ldr	r3, [r2, #8]
 80013a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013a6:	6921      	ldr	r1, [r4, #16]
 80013a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013ac:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ae:	f7ff ff15 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_RCC_ClockConfig+0x158>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x15c>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	40d8      	lsrs	r0, r3
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_RCC_ClockConfig+0x160>)
 80013c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013c4:	200f      	movs	r0, #15
 80013c6:	f7ff fb37 	bl	8000a38 <HAL_InitTick>
  return HAL_OK;
 80013ca:	2000      	movs	r0, #0
 80013cc:	e771      	b.n	80012b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
}
 80013d0:	4770      	bx	lr
        return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
 80013d4:	e76d      	b.n	80012b2 <HAL_RCC_ClockConfig+0x2e>
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	08002dbc 	.word	0x08002dbc
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013e8:	4b01      	ldr	r3, [pc, #4]	; (80013f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f6:	f7ff fff7 	bl	80013e8 <HAL_RCC_GetHCLKFreq>
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_RCC_GetPCLK1Freq+0x18>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001402:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
}
 8001406:	40d8      	lsrs	r0, r3
 8001408:	bd08      	pop	{r3, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	08002dcc 	.word	0x08002dcc

08001414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001414:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001416:	f7ff ffe7 	bl	80013e8 <HAL_RCC_GetHCLKFreq>
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <HAL_RCC_GetPCLK2Freq+0x18>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001422:	4a03      	ldr	r2, [pc, #12]	; (8001430 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
}
 8001426:	40d8      	lsrs	r0, r3
 8001428:	bd08      	pop	{r3, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	08002dcc 	.word	0x08002dcc

08001434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001434:	b510      	push	{r4, lr}
 8001436:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001438:	6883      	ldr	r3, [r0, #8]
 800143a:	6902      	ldr	r2, [r0, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	6942      	ldr	r2, [r0, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	69c2      	ldr	r2, [r0, #28]
 8001444:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001446:	6801      	ldr	r1, [r0, #0]
 8001448:	6808      	ldr	r0, [r1, #0]
 800144a:	4a99      	ldr	r2, [pc, #612]	; (80016b0 <UART_SetConfig+0x27c>)
 800144c:	4002      	ands	r2, r0
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	6853      	ldr	r3, [r2, #4]
 8001456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800145a:	68e1      	ldr	r1, [r4, #12]
 800145c:	430b      	orrs	r3, r1
 800145e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001460:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001462:	6a23      	ldr	r3, [r4, #32]
 8001464:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001466:	6821      	ldr	r1, [r4, #0]
 8001468:	688b      	ldr	r3, [r1, #8]
 800146a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	4a8f      	ldr	r2, [pc, #572]	; (80016b4 <UART_SetConfig+0x280>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d018      	beq.n	80014ac <UART_SetConfig+0x78>
 800147a:	4a8f      	ldr	r2, [pc, #572]	; (80016b8 <UART_SetConfig+0x284>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d028      	beq.n	80014d2 <UART_SetConfig+0x9e>
 8001480:	4a8e      	ldr	r2, [pc, #568]	; (80016bc <UART_SetConfig+0x288>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d03d      	beq.n	8001502 <UART_SetConfig+0xce>
 8001486:	4a8e      	ldr	r2, [pc, #568]	; (80016c0 <UART_SetConfig+0x28c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d050      	beq.n	800152e <UART_SetConfig+0xfa>
 800148c:	4a8d      	ldr	r2, [pc, #564]	; (80016c4 <UART_SetConfig+0x290>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d062      	beq.n	8001558 <UART_SetConfig+0x124>
 8001492:	4a8d      	ldr	r2, [pc, #564]	; (80016c8 <UART_SetConfig+0x294>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d077      	beq.n	8001588 <UART_SetConfig+0x154>
 8001498:	4a8c      	ldr	r2, [pc, #560]	; (80016cc <UART_SetConfig+0x298>)
 800149a:	4293      	cmp	r3, r2
 800149c:	f000 808c 	beq.w	80015b8 <UART_SetConfig+0x184>
 80014a0:	4a8b      	ldr	r2, [pc, #556]	; (80016d0 <UART_SetConfig+0x29c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	f000 80a0 	beq.w	80015e8 <UART_SetConfig+0x1b4>
 80014a8:	2310      	movs	r3, #16
 80014aa:	e0b6      	b.n	800161a <UART_SetConfig+0x1e6>
 80014ac:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <UART_SetConfig+0x2a0>)
 80014ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d809      	bhi.n	80014ce <UART_SetConfig+0x9a>
 80014ba:	e8df f003 	tbb	[pc, r3]
 80014be:	0402      	.short	0x0402
 80014c0:	06ad      	.short	0x06ad
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0a9      	b.n	800161a <UART_SetConfig+0x1e6>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e0a7      	b.n	800161a <UART_SetConfig+0x1e6>
 80014ca:	2308      	movs	r3, #8
 80014cc:	e0a5      	b.n	800161a <UART_SetConfig+0x1e6>
 80014ce:	2310      	movs	r3, #16
 80014d0:	e0a3      	b.n	800161a <UART_SetConfig+0x1e6>
 80014d2:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <UART_SetConfig+0x2a0>)
 80014d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d80e      	bhi.n	80014fe <UART_SetConfig+0xca>
 80014e0:	e8df f003 	tbb	[pc, r3]
 80014e4:	0d0d0d07 	.word	0x0d0d0d07
 80014e8:	0d0d0d09 	.word	0x0d0d0d09
 80014ec:	0d0d0da9 	.word	0x0d0d0da9
 80014f0:	0b          	.byte	0x0b
 80014f1:	00          	.byte	0x00
 80014f2:	2300      	movs	r3, #0
 80014f4:	e091      	b.n	800161a <UART_SetConfig+0x1e6>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e08f      	b.n	800161a <UART_SetConfig+0x1e6>
 80014fa:	2308      	movs	r3, #8
 80014fc:	e08d      	b.n	800161a <UART_SetConfig+0x1e6>
 80014fe:	2310      	movs	r3, #16
 8001500:	e08b      	b.n	800161a <UART_SetConfig+0x1e6>
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <UART_SetConfig+0x2a0>)
 8001504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001508:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800150c:	2b10      	cmp	r3, #16
 800150e:	d00a      	beq.n	8001526 <UART_SetConfig+0xf2>
 8001510:	d906      	bls.n	8001520 <UART_SetConfig+0xec>
 8001512:	2b20      	cmp	r3, #32
 8001514:	f000 8091 	beq.w	800163a <UART_SetConfig+0x206>
 8001518:	2b30      	cmp	r3, #48	; 0x30
 800151a:	d106      	bne.n	800152a <UART_SetConfig+0xf6>
 800151c:	2308      	movs	r3, #8
 800151e:	e07c      	b.n	800161a <UART_SetConfig+0x1e6>
 8001520:	b91b      	cbnz	r3, 800152a <UART_SetConfig+0xf6>
 8001522:	2300      	movs	r3, #0
 8001524:	e079      	b.n	800161a <UART_SetConfig+0x1e6>
 8001526:	2304      	movs	r3, #4
 8001528:	e077      	b.n	800161a <UART_SetConfig+0x1e6>
 800152a:	2310      	movs	r3, #16
 800152c:	e075      	b.n	800161a <UART_SetConfig+0x1e6>
 800152e:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <UART_SetConfig+0x2a0>)
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001538:	2b40      	cmp	r3, #64	; 0x40
 800153a:	d009      	beq.n	8001550 <UART_SetConfig+0x11c>
 800153c:	d905      	bls.n	800154a <UART_SetConfig+0x116>
 800153e:	2b80      	cmp	r3, #128	; 0x80
 8001540:	d07d      	beq.n	800163e <UART_SetConfig+0x20a>
 8001542:	2bc0      	cmp	r3, #192	; 0xc0
 8001544:	d106      	bne.n	8001554 <UART_SetConfig+0x120>
 8001546:	2308      	movs	r3, #8
 8001548:	e067      	b.n	800161a <UART_SetConfig+0x1e6>
 800154a:	b91b      	cbnz	r3, 8001554 <UART_SetConfig+0x120>
 800154c:	2300      	movs	r3, #0
 800154e:	e064      	b.n	800161a <UART_SetConfig+0x1e6>
 8001550:	2304      	movs	r3, #4
 8001552:	e062      	b.n	800161a <UART_SetConfig+0x1e6>
 8001554:	2310      	movs	r3, #16
 8001556:	e060      	b.n	800161a <UART_SetConfig+0x1e6>
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <UART_SetConfig+0x2a0>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001566:	d00b      	beq.n	8001580 <UART_SetConfig+0x14c>
 8001568:	d907      	bls.n	800157a <UART_SetConfig+0x146>
 800156a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156e:	d068      	beq.n	8001642 <UART_SetConfig+0x20e>
 8001570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001574:	d106      	bne.n	8001584 <UART_SetConfig+0x150>
 8001576:	2308      	movs	r3, #8
 8001578:	e04f      	b.n	800161a <UART_SetConfig+0x1e6>
 800157a:	b91b      	cbnz	r3, 8001584 <UART_SetConfig+0x150>
 800157c:	2300      	movs	r3, #0
 800157e:	e04c      	b.n	800161a <UART_SetConfig+0x1e6>
 8001580:	2304      	movs	r3, #4
 8001582:	e04a      	b.n	800161a <UART_SetConfig+0x1e6>
 8001584:	2310      	movs	r3, #16
 8001586:	e048      	b.n	800161a <UART_SetConfig+0x1e6>
 8001588:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <UART_SetConfig+0x2a0>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d00b      	beq.n	80015b0 <UART_SetConfig+0x17c>
 8001598:	d907      	bls.n	80015aa <UART_SetConfig+0x176>
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159e:	d052      	beq.n	8001646 <UART_SetConfig+0x212>
 80015a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80015a4:	d106      	bne.n	80015b4 <UART_SetConfig+0x180>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e037      	b.n	800161a <UART_SetConfig+0x1e6>
 80015aa:	b91b      	cbnz	r3, 80015b4 <UART_SetConfig+0x180>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e034      	b.n	800161a <UART_SetConfig+0x1e6>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e032      	b.n	800161a <UART_SetConfig+0x1e6>
 80015b4:	2310      	movs	r3, #16
 80015b6:	e030      	b.n	800161a <UART_SetConfig+0x1e6>
 80015b8:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <UART_SetConfig+0x2a0>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80015c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c6:	d00b      	beq.n	80015e0 <UART_SetConfig+0x1ac>
 80015c8:	d907      	bls.n	80015da <UART_SetConfig+0x1a6>
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d03c      	beq.n	800164a <UART_SetConfig+0x216>
 80015d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80015d4:	d106      	bne.n	80015e4 <UART_SetConfig+0x1b0>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e01f      	b.n	800161a <UART_SetConfig+0x1e6>
 80015da:	b91b      	cbnz	r3, 80015e4 <UART_SetConfig+0x1b0>
 80015dc:	2300      	movs	r3, #0
 80015de:	e01c      	b.n	800161a <UART_SetConfig+0x1e6>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e01a      	b.n	800161a <UART_SetConfig+0x1e6>
 80015e4:	2310      	movs	r3, #16
 80015e6:	e018      	b.n	800161a <UART_SetConfig+0x1e6>
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <UART_SetConfig+0x2a0>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f6:	d00b      	beq.n	8001610 <UART_SetConfig+0x1dc>
 80015f8:	d907      	bls.n	800160a <UART_SetConfig+0x1d6>
 80015fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015fe:	d026      	beq.n	800164e <UART_SetConfig+0x21a>
 8001600:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001604:	d106      	bne.n	8001614 <UART_SetConfig+0x1e0>
 8001606:	2308      	movs	r3, #8
 8001608:	e007      	b.n	800161a <UART_SetConfig+0x1e6>
 800160a:	b91b      	cbnz	r3, 8001614 <UART_SetConfig+0x1e0>
 800160c:	2300      	movs	r3, #0
 800160e:	e004      	b.n	800161a <UART_SetConfig+0x1e6>
 8001610:	2304      	movs	r3, #4
 8001612:	e002      	b.n	800161a <UART_SetConfig+0x1e6>
 8001614:	2310      	movs	r3, #16
 8001616:	e000      	b.n	800161a <UART_SetConfig+0x1e6>
 8001618:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800161a:	69e2      	ldr	r2, [r4, #28]
 800161c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001620:	d017      	beq.n	8001652 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001622:	2b08      	cmp	r3, #8
 8001624:	f200 80b3 	bhi.w	800178e <UART_SetConfig+0x35a>
 8001628:	e8df f003 	tbb	[pc, r3]
 800162c:	b1958b76 	.word	0xb1958b76
 8001630:	b1b1b19e 	.word	0xb1b1b19e
 8001634:	a8          	.byte	0xa8
 8001635:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001636:	2302      	movs	r3, #2
 8001638:	e7ef      	b.n	800161a <UART_SetConfig+0x1e6>
 800163a:	2302      	movs	r3, #2
 800163c:	e7ed      	b.n	800161a <UART_SetConfig+0x1e6>
 800163e:	2302      	movs	r3, #2
 8001640:	e7eb      	b.n	800161a <UART_SetConfig+0x1e6>
 8001642:	2302      	movs	r3, #2
 8001644:	e7e9      	b.n	800161a <UART_SetConfig+0x1e6>
 8001646:	2302      	movs	r3, #2
 8001648:	e7e7      	b.n	800161a <UART_SetConfig+0x1e6>
 800164a:	2302      	movs	r3, #2
 800164c:	e7e5      	b.n	800161a <UART_SetConfig+0x1e6>
 800164e:	2302      	movs	r3, #2
 8001650:	e7e3      	b.n	800161a <UART_SetConfig+0x1e6>
    switch (clocksource)
 8001652:	2b08      	cmp	r3, #8
 8001654:	d85d      	bhi.n	8001712 <UART_SetConfig+0x2de>
 8001656:	e8df f003 	tbb	[pc, r3]
 800165a:	1f05      	.short	0x1f05
 800165c:	5c485c3f 	.word	0x5c485c3f
 8001660:	5c5c      	.short	0x5c5c
 8001662:	53          	.byte	0x53
 8001663:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001664:	f7ff fec6 	bl	80013f4 <HAL_RCC_GetPCLK1Freq>
 8001668:	6862      	ldr	r2, [r4, #4]
 800166a:	0853      	lsrs	r3, r2, #1
 800166c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001670:	fbb3 f3f2 	udiv	r3, r3, r2
 8001674:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001676:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001678:	f1a3 0110 	sub.w	r1, r3, #16
 800167c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001680:	4291      	cmp	r1, r2
 8001682:	f200 8087 	bhi.w	8001794 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001686:	b29a      	uxth	r2, r3
 8001688:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800168c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001690:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001692:	6822      	ldr	r2, [r4, #0]
 8001694:	60d3      	str	r3, [r2, #12]
 8001696:	e050      	b.n	800173a <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001698:	f7ff febc 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	0853      	lsrs	r3, r2, #1
 80016a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016aa:	2000      	movs	r0, #0
        break;
 80016ac:	e7e4      	b.n	8001678 <UART_SetConfig+0x244>
 80016ae:	bf00      	nop
 80016b0:	efff69f3 	.word	0xefff69f3
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40004800 	.word	0x40004800
 80016c0:	40004c00 	.word	0x40004c00
 80016c4:	40005000 	.word	0x40005000
 80016c8:	40011400 	.word	0x40011400
 80016cc:	40007800 	.word	0x40007800
 80016d0:	40007c00 	.word	0x40007c00
 80016d4:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <UART_SetConfig+0x368>)
 80016dc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80016e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016e4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016e6:	2000      	movs	r0, #0
        break;
 80016e8:	e7c6      	b.n	8001678 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016ea:	f7ff fd77 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 80016ee:	6862      	ldr	r2, [r4, #4]
 80016f0:	0853      	lsrs	r3, r2, #1
 80016f2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80016fa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016fc:	2000      	movs	r0, #0
        break;
 80016fe:	e7bb      	b.n	8001678 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001700:	6862      	ldr	r2, [r4, #4]
 8001702:	0853      	lsrs	r3, r2, #1
 8001704:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001708:	fbb3 f3f2 	udiv	r3, r3, r2
 800170c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800170e:	2000      	movs	r0, #0
        break;
 8001710:	e7b2      	b.n	8001678 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8001712:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001714:	2300      	movs	r3, #0
 8001716:	e7af      	b.n	8001678 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001718:	f7ff fe6c 	bl	80013f4 <HAL_RCC_GetPCLK1Freq>
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001722:	fbb3 f3f2 	udiv	r3, r3, r2
 8001726:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001728:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800172a:	f1a3 0110 	sub.w	r1, r3, #16
 800172e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001732:	4291      	cmp	r1, r2
 8001734:	d830      	bhi.n	8001798 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800173e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001740:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001742:	f7ff fe67 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8001746:	6862      	ldr	r2, [r4, #4]
 8001748:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800174c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001750:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001752:	2000      	movs	r0, #0
        break;
 8001754:	e7e9      	b.n	800172a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001756:	6862      	ldr	r2, [r4, #4]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <UART_SetConfig+0x36c>)
 800175a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800175e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001762:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001764:	2000      	movs	r0, #0
        break;
 8001766:	e7e0      	b.n	800172a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001768:	f7ff fd38 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 800176c:	6862      	ldr	r2, [r4, #4]
 800176e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001772:	fbb3 f3f2 	udiv	r3, r3, r2
 8001776:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001778:	2000      	movs	r0, #0
        break;
 800177a:	e7d6      	b.n	800172a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800177c:	6862      	ldr	r2, [r4, #4]
 800177e:	0853      	lsrs	r3, r2, #1
 8001780:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001784:	fbb3 f3f2 	udiv	r3, r3, r2
 8001788:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800178a:	2000      	movs	r0, #0
        break;
 800178c:	e7cd      	b.n	800172a <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 800178e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001790:	2300      	movs	r3, #0
 8001792:	e7ca      	b.n	800172a <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001794:	2001      	movs	r0, #1
 8001796:	e7d0      	b.n	800173a <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8001798:	2001      	movs	r0, #1
 800179a:	e7ce      	b.n	800173a <UART_SetConfig+0x306>
 800179c:	01e84800 	.word	0x01e84800
 80017a0:	00f42400 	.word	0x00f42400

080017a4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a6:	f013 0f01 	tst.w	r3, #1
 80017aa:	d006      	beq.n	80017ba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017ac:	6802      	ldr	r2, [r0, #0]
 80017ae:	6853      	ldr	r3, [r2, #4]
 80017b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017b4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80017b6:	430b      	orrs	r3, r1
 80017b8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017bc:	f013 0f02 	tst.w	r3, #2
 80017c0:	d006      	beq.n	80017d0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017c2:	6802      	ldr	r2, [r0, #0]
 80017c4:	6853      	ldr	r3, [r2, #4]
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017d2:	f013 0f04 	tst.w	r3, #4
 80017d6:	d006      	beq.n	80017e6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017d8:	6802      	ldr	r2, [r0, #0]
 80017da:	6853      	ldr	r3, [r2, #4]
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80017e2:	430b      	orrs	r3, r1
 80017e4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017e8:	f013 0f08 	tst.w	r3, #8
 80017ec:	d006      	beq.n	80017fc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017ee:	6802      	ldr	r2, [r0, #0]
 80017f0:	6853      	ldr	r3, [r2, #4]
 80017f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017f6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017fe:	f013 0f10 	tst.w	r3, #16
 8001802:	d006      	beq.n	8001812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001804:	6802      	ldr	r2, [r0, #0]
 8001806:	6893      	ldr	r3, [r2, #8]
 8001808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800180c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800180e:	430b      	orrs	r3, r1
 8001810:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001812:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001814:	f013 0f20 	tst.w	r3, #32
 8001818:	d006      	beq.n	8001828 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800181a:	6802      	ldr	r2, [r0, #0]
 800181c:	6893      	ldr	r3, [r2, #8]
 800181e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001822:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001824:	430b      	orrs	r3, r1
 8001826:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001828:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800182a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800182e:	d00a      	beq.n	8001846 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001830:	6802      	ldr	r2, [r0, #0]
 8001832:	6853      	ldr	r3, [r2, #4]
 8001834:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001838:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800183a:	430b      	orrs	r3, r1
 800183c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800183e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001844:	d00b      	beq.n	800185e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001846:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001848:	f013 0f80 	tst.w	r3, #128	; 0x80
 800184c:	d006      	beq.n	800185c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800184e:	6802      	ldr	r2, [r0, #0]
 8001850:	6853      	ldr	r3, [r2, #4]
 8001852:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001856:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001858:	430b      	orrs	r3, r1
 800185a:	6053      	str	r3, [r2, #4]
  }
}
 800185c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800185e:	6802      	ldr	r2, [r0, #0]
 8001860:	6853      	ldr	r3, [r2, #4]
 8001862:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001866:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001868:	430b      	orrs	r3, r1
 800186a:	6053      	str	r3, [r2, #4]
 800186c:	e7eb      	b.n	8001846 <UART_AdvFeatureConfig+0xa2>

0800186e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001872:	4605      	mov	r5, r0
 8001874:	460f      	mov	r7, r1
 8001876:	4616      	mov	r6, r2
 8001878:	4698      	mov	r8, r3
 800187a:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	ea37 0303 	bics.w	r3, r7, r3
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	42b3      	cmp	r3, r6
 800188c:	d11c      	bne.n	80018c8 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001892:	d0f3      	beq.n	800187c <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001894:	f7ff f916 	bl	8000ac4 <HAL_GetTick>
 8001898:	eba0 0008 	sub.w	r0, r0, r8
 800189c:	42a0      	cmp	r0, r4
 800189e:	d801      	bhi.n	80018a4 <UART_WaitOnFlagUntilTimeout+0x36>
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d1eb      	bne.n	800187c <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018a4:	682a      	ldr	r2, [r5, #0]
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018ac:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ae:	682a      	ldr	r2, [r5, #0]
 80018b0:	6893      	ldr	r3, [r2, #8]
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80018b8:	2320      	movs	r3, #32
 80018ba:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80018bc:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018be:	2300      	movs	r3, #0
 80018c0:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 80018c4:	2003      	movs	r0, #3
 80018c6:	e000      	b.n	80018ca <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
}
 80018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018ce <HAL_UART_Transmit>:
{
 80018ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80018d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d159      	bne.n	8001990 <HAL_UART_Transmit+0xc2>
 80018dc:	4604      	mov	r4, r0
 80018de:	460d      	mov	r5, r1
 80018e0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80018e2:	fab2 f382 	clz	r3, r2
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2900      	cmp	r1, #0
 80018ea:	bf08      	it	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d153      	bne.n	800199a <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80018f2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d051      	beq.n	800199e <HAL_UART_Transmit+0xd0>
 80018fa:	2301      	movs	r3, #1
 80018fc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001904:	2321      	movs	r3, #33	; 0x21
 8001906:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001908:	f7ff f8dc 	bl	8000ac4 <HAL_GetTick>
 800190c:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800190e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001912:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001916:	68a3      	ldr	r3, [r4, #8]
 8001918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191c:	d002      	beq.n	8001924 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 800191e:	f04f 0800 	mov.w	r8, #0
 8001922:	e010      	b.n	8001946 <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001924:	6923      	ldr	r3, [r4, #16]
 8001926:	b30b      	cbz	r3, 800196c <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8001928:	f04f 0800 	mov.w	r8, #0
 800192c:	e00b      	b.n	8001946 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800192e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001938:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800193a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800193e:	3b01      	subs	r3, #1
 8001940:	b29b      	uxth	r3, r3
 8001942:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001946:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800194a:	b29b      	uxth	r3, r3
 800194c:	b18b      	cbz	r3, 8001972 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800194e:	9600      	str	r6, [sp, #0]
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	4620      	mov	r0, r4
 8001958:	f7ff ff89 	bl	800186e <UART_WaitOnFlagUntilTimeout>
 800195c:	bb08      	cbnz	r0, 80019a2 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 800195e:	2d00      	cmp	r5, #0
 8001960:	d0e5      	beq.n	800192e <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001962:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
 800196a:	e7e6      	b.n	800193a <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 800196c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800196e:	2500      	movs	r5, #0
 8001970:	e7e9      	b.n	8001946 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001972:	9600      	str	r6, [sp, #0]
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff ff77 	bl	800186e <UART_WaitOnFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	b980      	cbnz	r0, 80019a6 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8001984:	2220      	movs	r2, #32
 8001986:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8001988:	2200      	movs	r2, #0
 800198a:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 800198e:	e000      	b.n	8001992 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
}
 8001992:	4618      	mov	r0, r3
 8001994:	b002      	add	sp, #8
 8001996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e7f9      	b.n	8001992 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800199e:	2302      	movs	r3, #2
 80019a0:	e7f7      	b.n	8001992 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e7f5      	b.n	8001992 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e7f3      	b.n	8001992 <HAL_UART_Transmit+0xc4>

080019aa <HAL_UART_Receive>:
{
 80019aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80019b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d17e      	bne.n	8001ab6 <HAL_UART_Receive+0x10c>
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80019be:	fab2 f382 	clz	r3, r2
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2900      	cmp	r1, #0
 80019c6:	bf08      	it	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d177      	bne.n	8001abe <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 80019ce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d075      	beq.n	8001ac2 <HAL_UART_Receive+0x118>
 80019d6:	2301      	movs	r3, #1
 80019d8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019e0:	2322      	movs	r3, #34	; 0x22
 80019e2:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80019e4:	f7ff f86e 	bl	8000ac4 <HAL_GetTick>
 80019e8:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 80019ea:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80019ee:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80019f2:	68a3      	ldr	r3, [r4, #8]
 80019f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f8:	d006      	beq.n	8001a08 <HAL_UART_Receive+0x5e>
 80019fa:	b9a3      	cbnz	r3, 8001a26 <HAL_UART_Receive+0x7c>
 80019fc:	6922      	ldr	r2, [r4, #16]
 80019fe:	b972      	cbnz	r2, 8001a1e <HAL_UART_Receive+0x74>
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a06:	e014      	b.n	8001a32 <HAL_UART_Receive+0x88>
 8001a08:	6922      	ldr	r2, [r4, #16]
 8001a0a:	b922      	cbnz	r2, 8001a16 <HAL_UART_Receive+0x6c>
 8001a0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001a10:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a14:	e00d      	b.n	8001a32 <HAL_UART_Receive+0x88>
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a1c:	e009      	b.n	8001a32 <HAL_UART_Receive+0x88>
 8001a1e:	227f      	movs	r2, #127	; 0x7f
 8001a20:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a24:	e005      	b.n	8001a32 <HAL_UART_Receive+0x88>
 8001a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a2a:	d00a      	beq.n	8001a42 <HAL_UART_Receive+0x98>
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001a32:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3a:	d00c      	beq.n	8001a56 <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8001a3c:	f04f 0900 	mov.w	r9, #0
 8001a40:	e01d      	b.n	8001a7e <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8001a42:	6922      	ldr	r2, [r4, #16]
 8001a44:	b91a      	cbnz	r2, 8001a4e <HAL_UART_Receive+0xa4>
 8001a46:	227f      	movs	r2, #127	; 0x7f
 8001a48:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a4c:	e7f1      	b.n	8001a32 <HAL_UART_Receive+0x88>
 8001a4e:	223f      	movs	r2, #63	; 0x3f
 8001a50:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001a54:	e7ed      	b.n	8001a32 <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a56:	6923      	ldr	r3, [r4, #16]
 8001a58:	b113      	cbz	r3, 8001a60 <HAL_UART_Receive+0xb6>
      pdata16bits = NULL;
 8001a5a:	f04f 0900 	mov.w	r9, #0
 8001a5e:	e00e      	b.n	8001a7e <HAL_UART_Receive+0xd4>
      pdata16bits = (uint16_t *) pData;
 8001a60:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001a62:	2500      	movs	r5, #0
 8001a64:	e00b      	b.n	8001a7e <HAL_UART_Receive+0xd4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	ea08 0303 	and.w	r3, r8, r3
 8001a6e:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001a72:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001a7e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b18b      	cbz	r3, 8001aaa <HAL_UART_Receive+0x100>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a86:	9600      	str	r6, [sp, #0]
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff feed 	bl	800186e <UART_WaitOnFlagUntilTimeout>
 8001a94:	b9b8      	cbnz	r0, 8001ac6 <HAL_UART_Receive+0x11c>
      if (pdata8bits == NULL)
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d0e5      	beq.n	8001a66 <HAL_UART_Receive+0xbc>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9e:	fa5f f388 	uxtb.w	r3, r8
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	f805 3b01 	strb.w	r3, [r5], #1
 8001aa8:	e7e3      	b.n	8001a72 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001ab4:	e000      	b.n	8001ab8 <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 8001ab6:	2002      	movs	r0, #2
}
 8001ab8:	b003      	add	sp, #12
 8001aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001abe:	2001      	movs	r0, #1
 8001ac0:	e7fa      	b.n	8001ab8 <HAL_UART_Receive+0x10e>
    __HAL_LOCK(huart);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	e7f8      	b.n	8001ab8 <HAL_UART_Receive+0x10e>
        return HAL_TIMEOUT;
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	e7f6      	b.n	8001ab8 <HAL_UART_Receive+0x10e>

08001aca <UART_CheckIdleState>:
{
 8001aca:	b510      	push	{r4, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001ad4:	f7fe fff6 	bl	8000ac4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	f012 0f08 	tst.w	r2, #8
 8001ae0:	d107      	bne.n	8001af2 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001ae6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001aee:	b002      	add	sp, #8
 8001af0:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001af2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4603      	mov	r3, r0
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff feb4 	bl	800186e <UART_WaitOnFlagUntilTimeout>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d0eb      	beq.n	8001ae2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	e7ef      	b.n	8001aee <UART_CheckIdleState+0x24>

08001b0e <HAL_UART_Init>:
  if (huart == NULL)
 8001b0e:	b368      	cbz	r0, 8001b6c <HAL_UART_Init+0x5e>
{
 8001b10:	b510      	push	{r4, lr}
 8001b12:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b14:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001b16:	b303      	cbz	r3, 8001b5a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b18:	2324      	movs	r3, #36	; 0x24
 8001b1a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001b1c:	6822      	ldr	r2, [r4, #0]
 8001b1e:	6813      	ldr	r3, [r2, #0]
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7ff fc84 	bl	8001434 <UART_SetConfig>
 8001b2c:	2801      	cmp	r0, #1
 8001b2e:	d013      	beq.n	8001b58 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b32:	b9bb      	cbnz	r3, 8001b64 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	6853      	ldr	r3, [r2, #4]
 8001b38:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b3c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	6893      	ldr	r3, [r2, #8]
 8001b42:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b46:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff ffb9 	bl	8001aca <UART_CheckIdleState>
}
 8001b58:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b5a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001b5e:	f7fe fe59 	bl	8000814 <HAL_UART_MspInit>
 8001b62:	e7d9      	b.n	8001b18 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff fe1d 	bl	80017a4 <UART_AdvFeatureConfig>
 8001b6a:	e7e3      	b.n	8001b34 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
}
 8001b6e:	4770      	bx	lr

08001b70 <__sflush_r>:
 8001b70:	898a      	ldrh	r2, [r1, #12]
 8001b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b76:	4605      	mov	r5, r0
 8001b78:	0710      	lsls	r0, r2, #28
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	d458      	bmi.n	8001c30 <__sflush_r+0xc0>
 8001b7e:	684b      	ldr	r3, [r1, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dc05      	bgt.n	8001b90 <__sflush_r+0x20>
 8001b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	dc02      	bgt.n	8001b90 <__sflush_r+0x20>
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b92:	2e00      	cmp	r6, #0
 8001b94:	d0f9      	beq.n	8001b8a <__sflush_r+0x1a>
 8001b96:	2300      	movs	r3, #0
 8001b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b9c:	682f      	ldr	r7, [r5, #0]
 8001b9e:	6a21      	ldr	r1, [r4, #32]
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	d032      	beq.n	8001c0a <__sflush_r+0x9a>
 8001ba4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	075a      	lsls	r2, r3, #29
 8001baa:	d505      	bpl.n	8001bb8 <__sflush_r+0x48>
 8001bac:	6863      	ldr	r3, [r4, #4]
 8001bae:	1ac0      	subs	r0, r0, r3
 8001bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bb2:	b10b      	cbz	r3, 8001bb8 <__sflush_r+0x48>
 8001bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bb6:	1ac0      	subs	r0, r0, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bbe:	6a21      	ldr	r1, [r4, #32]
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	47b0      	blx	r6
 8001bc4:	1c43      	adds	r3, r0, #1
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	d106      	bne.n	8001bd8 <__sflush_r+0x68>
 8001bca:	6829      	ldr	r1, [r5, #0]
 8001bcc:	291d      	cmp	r1, #29
 8001bce:	d848      	bhi.n	8001c62 <__sflush_r+0xf2>
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <__sflush_r+0x108>)
 8001bd2:	40ca      	lsrs	r2, r1
 8001bd4:	07d6      	lsls	r6, r2, #31
 8001bd6:	d544      	bpl.n	8001c62 <__sflush_r+0xf2>
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6062      	str	r2, [r4, #4]
 8001bdc:	04d9      	lsls	r1, r3, #19
 8001bde:	6922      	ldr	r2, [r4, #16]
 8001be0:	6022      	str	r2, [r4, #0]
 8001be2:	d504      	bpl.n	8001bee <__sflush_r+0x7e>
 8001be4:	1c42      	adds	r2, r0, #1
 8001be6:	d101      	bne.n	8001bec <__sflush_r+0x7c>
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	b903      	cbnz	r3, 8001bee <__sflush_r+0x7e>
 8001bec:	6560      	str	r0, [r4, #84]	; 0x54
 8001bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf0:	602f      	str	r7, [r5, #0]
 8001bf2:	2900      	cmp	r1, #0
 8001bf4:	d0c9      	beq.n	8001b8a <__sflush_r+0x1a>
 8001bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bfa:	4299      	cmp	r1, r3
 8001bfc:	d002      	beq.n	8001c04 <__sflush_r+0x94>
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f000 f99c 	bl	8001f3c <_free_r>
 8001c04:	2000      	movs	r0, #0
 8001c06:	6360      	str	r0, [r4, #52]	; 0x34
 8001c08:	e7c0      	b.n	8001b8c <__sflush_r+0x1c>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	47b0      	blx	r6
 8001c10:	1c41      	adds	r1, r0, #1
 8001c12:	d1c8      	bne.n	8001ba6 <__sflush_r+0x36>
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0c5      	beq.n	8001ba6 <__sflush_r+0x36>
 8001c1a:	2b1d      	cmp	r3, #29
 8001c1c:	d001      	beq.n	8001c22 <__sflush_r+0xb2>
 8001c1e:	2b16      	cmp	r3, #22
 8001c20:	d101      	bne.n	8001c26 <__sflush_r+0xb6>
 8001c22:	602f      	str	r7, [r5, #0]
 8001c24:	e7b1      	b.n	8001b8a <__sflush_r+0x1a>
 8001c26:	89a3      	ldrh	r3, [r4, #12]
 8001c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2c:	81a3      	strh	r3, [r4, #12]
 8001c2e:	e7ad      	b.n	8001b8c <__sflush_r+0x1c>
 8001c30:	690f      	ldr	r7, [r1, #16]
 8001c32:	2f00      	cmp	r7, #0
 8001c34:	d0a9      	beq.n	8001b8a <__sflush_r+0x1a>
 8001c36:	0793      	lsls	r3, r2, #30
 8001c38:	680e      	ldr	r6, [r1, #0]
 8001c3a:	bf08      	it	eq
 8001c3c:	694b      	ldreq	r3, [r1, #20]
 8001c3e:	600f      	str	r7, [r1, #0]
 8001c40:	bf18      	it	ne
 8001c42:	2300      	movne	r3, #0
 8001c44:	eba6 0807 	sub.w	r8, r6, r7
 8001c48:	608b      	str	r3, [r1, #8]
 8001c4a:	f1b8 0f00 	cmp.w	r8, #0
 8001c4e:	dd9c      	ble.n	8001b8a <__sflush_r+0x1a>
 8001c50:	4643      	mov	r3, r8
 8001c52:	463a      	mov	r2, r7
 8001c54:	6a21      	ldr	r1, [r4, #32]
 8001c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c58:	4628      	mov	r0, r5
 8001c5a:	47b0      	blx	r6
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	dc06      	bgt.n	8001c6e <__sflush_r+0xfe>
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c66:	81a3      	strh	r3, [r4, #12]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	e78e      	b.n	8001b8c <__sflush_r+0x1c>
 8001c6e:	4407      	add	r7, r0
 8001c70:	eba8 0800 	sub.w	r8, r8, r0
 8001c74:	e7e9      	b.n	8001c4a <__sflush_r+0xda>
 8001c76:	bf00      	nop
 8001c78:	20400001 	.word	0x20400001

08001c7c <_fflush_r>:
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	690b      	ldr	r3, [r1, #16]
 8001c80:	4605      	mov	r5, r0
 8001c82:	460c      	mov	r4, r1
 8001c84:	b1db      	cbz	r3, 8001cbe <_fflush_r+0x42>
 8001c86:	b118      	cbz	r0, 8001c90 <_fflush_r+0x14>
 8001c88:	6983      	ldr	r3, [r0, #24]
 8001c8a:	b90b      	cbnz	r3, 8001c90 <_fflush_r+0x14>
 8001c8c:	f000 f872 	bl	8001d74 <__sinit>
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_fflush_r+0x48>)
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d109      	bne.n	8001caa <_fflush_r+0x2e>
 8001c96:	686c      	ldr	r4, [r5, #4]
 8001c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c9c:	b17b      	cbz	r3, 8001cbe <_fflush_r+0x42>
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca6:	f7ff bf63 	b.w	8001b70 <__sflush_r>
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <_fflush_r+0x4c>)
 8001cac:	429c      	cmp	r4, r3
 8001cae:	d101      	bne.n	8001cb4 <_fflush_r+0x38>
 8001cb0:	68ac      	ldr	r4, [r5, #8]
 8001cb2:	e7f1      	b.n	8001c98 <_fflush_r+0x1c>
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <_fflush_r+0x50>)
 8001cb6:	429c      	cmp	r4, r3
 8001cb8:	bf08      	it	eq
 8001cba:	68ec      	ldreq	r4, [r5, #12]
 8001cbc:	e7ec      	b.n	8001c98 <_fflush_r+0x1c>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	bd38      	pop	{r3, r4, r5, pc}
 8001cc2:	bf00      	nop
 8001cc4:	080030a0 	.word	0x080030a0
 8001cc8:	080030c0 	.word	0x080030c0
 8001ccc:	08003080 	.word	0x08003080

08001cd0 <fflush>:
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	b920      	cbnz	r0, 8001cde <fflush+0xe>
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <fflush+0x18>)
 8001cd6:	4905      	ldr	r1, [pc, #20]	; (8001cec <fflush+0x1c>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	f000 b8d3 	b.w	8001e84 <_fwalk_reent>
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <fflush+0x20>)
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f7ff bfcb 	b.w	8001c7c <_fflush_r>
 8001ce6:	bf00      	nop
 8001ce8:	080030e0 	.word	0x080030e0
 8001cec:	08001c7d 	.word	0x08001c7d
 8001cf0:	2000000c 	.word	0x2000000c

08001cf4 <std>:
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	b510      	push	{r4, lr}
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8001cfe:	6083      	str	r3, [r0, #8]
 8001d00:	8181      	strh	r1, [r0, #12]
 8001d02:	6643      	str	r3, [r0, #100]	; 0x64
 8001d04:	81c2      	strh	r2, [r0, #14]
 8001d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d0a:	6183      	str	r3, [r0, #24]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2208      	movs	r2, #8
 8001d10:	305c      	adds	r0, #92	; 0x5c
 8001d12:	f000 f90b 	bl	8001f2c <memset>
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <std+0x38>)
 8001d18:	6263      	str	r3, [r4, #36]	; 0x24
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <std+0x3c>)
 8001d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <std+0x40>)
 8001d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <std+0x44>)
 8001d24:	6224      	str	r4, [r4, #32]
 8001d26:	6323      	str	r3, [r4, #48]	; 0x30
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	bf00      	nop
 8001d2c:	080021cd 	.word	0x080021cd
 8001d30:	080021ef 	.word	0x080021ef
 8001d34:	08002227 	.word	0x08002227
 8001d38:	0800224b 	.word	0x0800224b

08001d3c <_cleanup_r>:
 8001d3c:	4901      	ldr	r1, [pc, #4]	; (8001d44 <_cleanup_r+0x8>)
 8001d3e:	f000 b8a1 	b.w	8001e84 <_fwalk_reent>
 8001d42:	bf00      	nop
 8001d44:	08001c7d 	.word	0x08001c7d

08001d48 <__sfmoreglue>:
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	1e4a      	subs	r2, r1, #1
 8001d4c:	2568      	movs	r5, #104	; 0x68
 8001d4e:	4355      	muls	r5, r2
 8001d50:	460e      	mov	r6, r1
 8001d52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d56:	f000 f93f 	bl	8001fd8 <_malloc_r>
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	b140      	cbz	r0, 8001d70 <__sfmoreglue+0x28>
 8001d5e:	2100      	movs	r1, #0
 8001d60:	e9c0 1600 	strd	r1, r6, [r0]
 8001d64:	300c      	adds	r0, #12
 8001d66:	60a0      	str	r0, [r4, #8]
 8001d68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d6c:	f000 f8de 	bl	8001f2c <memset>
 8001d70:	4620      	mov	r0, r4
 8001d72:	bd70      	pop	{r4, r5, r6, pc}

08001d74 <__sinit>:
 8001d74:	6983      	ldr	r3, [r0, #24]
 8001d76:	b510      	push	{r4, lr}
 8001d78:	4604      	mov	r4, r0
 8001d7a:	bb33      	cbnz	r3, 8001dca <__sinit+0x56>
 8001d7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001d80:	6503      	str	r3, [r0, #80]	; 0x50
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <__sinit+0x58>)
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <__sinit+0x5c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6282      	str	r2, [r0, #40]	; 0x28
 8001d8a:	4298      	cmp	r0, r3
 8001d8c:	bf04      	itt	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	6183      	streq	r3, [r0, #24]
 8001d92:	f000 f81f 	bl	8001dd4 <__sfp>
 8001d96:	6060      	str	r0, [r4, #4]
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f000 f81b 	bl	8001dd4 <__sfp>
 8001d9e:	60a0      	str	r0, [r4, #8]
 8001da0:	4620      	mov	r0, r4
 8001da2:	f000 f817 	bl	8001dd4 <__sfp>
 8001da6:	2200      	movs	r2, #0
 8001da8:	60e0      	str	r0, [r4, #12]
 8001daa:	2104      	movs	r1, #4
 8001dac:	6860      	ldr	r0, [r4, #4]
 8001dae:	f7ff ffa1 	bl	8001cf4 <std>
 8001db2:	2201      	movs	r2, #1
 8001db4:	2109      	movs	r1, #9
 8001db6:	68a0      	ldr	r0, [r4, #8]
 8001db8:	f7ff ff9c 	bl	8001cf4 <std>
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	2112      	movs	r1, #18
 8001dc0:	68e0      	ldr	r0, [r4, #12]
 8001dc2:	f7ff ff97 	bl	8001cf4 <std>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61a3      	str	r3, [r4, #24]
 8001dca:	bd10      	pop	{r4, pc}
 8001dcc:	080030e0 	.word	0x080030e0
 8001dd0:	08001d3d 	.word	0x08001d3d

08001dd4 <__sfp>:
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <__sfp+0x70>)
 8001dd8:	681e      	ldr	r6, [r3, #0]
 8001dda:	69b3      	ldr	r3, [r6, #24]
 8001ddc:	4607      	mov	r7, r0
 8001dde:	b913      	cbnz	r3, 8001de6 <__sfp+0x12>
 8001de0:	4630      	mov	r0, r6
 8001de2:	f7ff ffc7 	bl	8001d74 <__sinit>
 8001de6:	3648      	adds	r6, #72	; 0x48
 8001de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	d503      	bpl.n	8001df8 <__sfp+0x24>
 8001df0:	6833      	ldr	r3, [r6, #0]
 8001df2:	b133      	cbz	r3, 8001e02 <__sfp+0x2e>
 8001df4:	6836      	ldr	r6, [r6, #0]
 8001df6:	e7f7      	b.n	8001de8 <__sfp+0x14>
 8001df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001dfc:	b16d      	cbz	r5, 8001e1a <__sfp+0x46>
 8001dfe:	3468      	adds	r4, #104	; 0x68
 8001e00:	e7f4      	b.n	8001dec <__sfp+0x18>
 8001e02:	2104      	movs	r1, #4
 8001e04:	4638      	mov	r0, r7
 8001e06:	f7ff ff9f 	bl	8001d48 <__sfmoreglue>
 8001e0a:	6030      	str	r0, [r6, #0]
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d1f1      	bne.n	8001df4 <__sfp+0x20>
 8001e10:	230c      	movs	r3, #12
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4604      	mov	r4, r0
 8001e16:	4620      	mov	r0, r4
 8001e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <__sfp+0x74>)
 8001e1c:	6665      	str	r5, [r4, #100]	; 0x64
 8001e1e:	e9c4 5500 	strd	r5, r5, [r4]
 8001e22:	60a5      	str	r5, [r4, #8]
 8001e24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001e28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e34:	f000 f87a 	bl	8001f2c <memset>
 8001e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e40:	e7e9      	b.n	8001e16 <__sfp+0x42>
 8001e42:	bf00      	nop
 8001e44:	080030e0 	.word	0x080030e0
 8001e48:	ffff0001 	.word	0xffff0001

08001e4c <_fwalk>:
 8001e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e50:	4688      	mov	r8, r1
 8001e52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e56:	2600      	movs	r6, #0
 8001e58:	b914      	cbnz	r4, 8001e60 <_fwalk+0x14>
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e60:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e64:	3f01      	subs	r7, #1
 8001e66:	d501      	bpl.n	8001e6c <_fwalk+0x20>
 8001e68:	6824      	ldr	r4, [r4, #0]
 8001e6a:	e7f5      	b.n	8001e58 <_fwalk+0xc>
 8001e6c:	89ab      	ldrh	r3, [r5, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d906      	bls.n	8001e80 <_fwalk+0x34>
 8001e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e76:	3301      	adds	r3, #1
 8001e78:	d002      	beq.n	8001e80 <_fwalk+0x34>
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	47c0      	blx	r8
 8001e7e:	4306      	orrs	r6, r0
 8001e80:	3568      	adds	r5, #104	; 0x68
 8001e82:	e7ef      	b.n	8001e64 <_fwalk+0x18>

08001e84 <_fwalk_reent>:
 8001e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e88:	4680      	mov	r8, r0
 8001e8a:	4689      	mov	r9, r1
 8001e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e90:	2600      	movs	r6, #0
 8001e92:	b914      	cbnz	r4, 8001e9a <_fwalk_reent+0x16>
 8001e94:	4630      	mov	r0, r6
 8001e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e9e:	3f01      	subs	r7, #1
 8001ea0:	d501      	bpl.n	8001ea6 <_fwalk_reent+0x22>
 8001ea2:	6824      	ldr	r4, [r4, #0]
 8001ea4:	e7f5      	b.n	8001e92 <_fwalk_reent+0xe>
 8001ea6:	89ab      	ldrh	r3, [r5, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d907      	bls.n	8001ebc <_fwalk_reent+0x38>
 8001eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	d003      	beq.n	8001ebc <_fwalk_reent+0x38>
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	47c8      	blx	r9
 8001eba:	4306      	orrs	r6, r0
 8001ebc:	3568      	adds	r5, #104	; 0x68
 8001ebe:	e7ee      	b.n	8001e9e <_fwalk_reent+0x1a>

08001ec0 <getchar>:
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <getchar+0x20>)
 8001ec2:	b510      	push	{r4, lr}
 8001ec4:	681c      	ldr	r4, [r3, #0]
 8001ec6:	b124      	cbz	r4, 8001ed2 <getchar+0x12>
 8001ec8:	69a3      	ldr	r3, [r4, #24]
 8001eca:	b913      	cbnz	r3, 8001ed2 <getchar+0x12>
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff51 	bl	8001d74 <__sinit>
 8001ed2:	6861      	ldr	r1, [r4, #4]
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eda:	f000 ba9d 	b.w	8002418 <_getc_r>
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <__libc_init_array>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4e0d      	ldr	r6, [pc, #52]	; (8001f1c <__libc_init_array+0x38>)
 8001ee8:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <__libc_init_array+0x3c>)
 8001eea:	1ba4      	subs	r4, r4, r6
 8001eec:	10a4      	asrs	r4, r4, #2
 8001eee:	2500      	movs	r5, #0
 8001ef0:	42a5      	cmp	r5, r4
 8001ef2:	d109      	bne.n	8001f08 <__libc_init_array+0x24>
 8001ef4:	4e0b      	ldr	r6, [pc, #44]	; (8001f24 <__libc_init_array+0x40>)
 8001ef6:	4c0c      	ldr	r4, [pc, #48]	; (8001f28 <__libc_init_array+0x44>)
 8001ef8:	f000 ff54 	bl	8002da4 <_init>
 8001efc:	1ba4      	subs	r4, r4, r6
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	2500      	movs	r5, #0
 8001f02:	42a5      	cmp	r5, r4
 8001f04:	d105      	bne.n	8001f12 <__libc_init_array+0x2e>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f0c:	4798      	blx	r3
 8001f0e:	3501      	adds	r5, #1
 8001f10:	e7ee      	b.n	8001ef0 <__libc_init_array+0xc>
 8001f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f16:	4798      	blx	r3
 8001f18:	3501      	adds	r5, #1
 8001f1a:	e7f2      	b.n	8001f02 <__libc_init_array+0x1e>
 8001f1c:	08003120 	.word	0x08003120
 8001f20:	08003120 	.word	0x08003120
 8001f24:	08003120 	.word	0x08003120
 8001f28:	08003124 	.word	0x08003124

08001f2c <memset>:
 8001f2c:	4402      	add	r2, r0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d100      	bne.n	8001f36 <memset+0xa>
 8001f34:	4770      	bx	lr
 8001f36:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3a:	e7f9      	b.n	8001f30 <memset+0x4>

08001f3c <_free_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4605      	mov	r5, r0
 8001f40:	2900      	cmp	r1, #0
 8001f42:	d045      	beq.n	8001fd0 <_free_r+0x94>
 8001f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f48:	1f0c      	subs	r4, r1, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfb8      	it	lt
 8001f4e:	18e4      	addlt	r4, r4, r3
 8001f50:	f000 fb04 	bl	800255c <__malloc_lock>
 8001f54:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <_free_r+0x98>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	b933      	cbnz	r3, 8001f6a <_free_r+0x2e>
 8001f5c:	6063      	str	r3, [r4, #4]
 8001f5e:	6014      	str	r4, [r2, #0]
 8001f60:	4628      	mov	r0, r5
 8001f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f66:	f000 bafa 	b.w	800255e <__malloc_unlock>
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	d90c      	bls.n	8001f88 <_free_r+0x4c>
 8001f6e:	6821      	ldr	r1, [r4, #0]
 8001f70:	1862      	adds	r2, r4, r1
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bf04      	itt	eq
 8001f76:	681a      	ldreq	r2, [r3, #0]
 8001f78:	685b      	ldreq	r3, [r3, #4]
 8001f7a:	6063      	str	r3, [r4, #4]
 8001f7c:	bf04      	itt	eq
 8001f7e:	1852      	addeq	r2, r2, r1
 8001f80:	6022      	streq	r2, [r4, #0]
 8001f82:	6004      	str	r4, [r0, #0]
 8001f84:	e7ec      	b.n	8001f60 <_free_r+0x24>
 8001f86:	4613      	mov	r3, r2
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	b10a      	cbz	r2, 8001f90 <_free_r+0x54>
 8001f8c:	42a2      	cmp	r2, r4
 8001f8e:	d9fa      	bls.n	8001f86 <_free_r+0x4a>
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	1858      	adds	r0, r3, r1
 8001f94:	42a0      	cmp	r0, r4
 8001f96:	d10b      	bne.n	8001fb0 <_free_r+0x74>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	4401      	add	r1, r0
 8001f9c:	1858      	adds	r0, r3, r1
 8001f9e:	4282      	cmp	r2, r0
 8001fa0:	6019      	str	r1, [r3, #0]
 8001fa2:	d1dd      	bne.n	8001f60 <_free_r+0x24>
 8001fa4:	6810      	ldr	r0, [r2, #0]
 8001fa6:	6852      	ldr	r2, [r2, #4]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	4401      	add	r1, r0
 8001fac:	6019      	str	r1, [r3, #0]
 8001fae:	e7d7      	b.n	8001f60 <_free_r+0x24>
 8001fb0:	d902      	bls.n	8001fb8 <_free_r+0x7c>
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	e7d3      	b.n	8001f60 <_free_r+0x24>
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	1821      	adds	r1, r4, r0
 8001fbc:	428a      	cmp	r2, r1
 8001fbe:	bf04      	itt	eq
 8001fc0:	6811      	ldreq	r1, [r2, #0]
 8001fc2:	6852      	ldreq	r2, [r2, #4]
 8001fc4:	6062      	str	r2, [r4, #4]
 8001fc6:	bf04      	itt	eq
 8001fc8:	1809      	addeq	r1, r1, r0
 8001fca:	6021      	streq	r1, [r4, #0]
 8001fcc:	605c      	str	r4, [r3, #4]
 8001fce:	e7c7      	b.n	8001f60 <_free_r+0x24>
 8001fd0:	bd38      	pop	{r3, r4, r5, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000008c 	.word	0x2000008c

08001fd8 <_malloc_r>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	1ccd      	adds	r5, r1, #3
 8001fdc:	f025 0503 	bic.w	r5, r5, #3
 8001fe0:	3508      	adds	r5, #8
 8001fe2:	2d0c      	cmp	r5, #12
 8001fe4:	bf38      	it	cc
 8001fe6:	250c      	movcc	r5, #12
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	4606      	mov	r6, r0
 8001fec:	db01      	blt.n	8001ff2 <_malloc_r+0x1a>
 8001fee:	42a9      	cmp	r1, r5
 8001ff0:	d903      	bls.n	8001ffa <_malloc_r+0x22>
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	6033      	str	r3, [r6, #0]
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
 8001ffa:	f000 faaf 	bl	800255c <__malloc_lock>
 8001ffe:	4a21      	ldr	r2, [pc, #132]	; (8002084 <_malloc_r+0xac>)
 8002000:	6814      	ldr	r4, [r2, #0]
 8002002:	4621      	mov	r1, r4
 8002004:	b991      	cbnz	r1, 800202c <_malloc_r+0x54>
 8002006:	4c20      	ldr	r4, [pc, #128]	; (8002088 <_malloc_r+0xb0>)
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	b91b      	cbnz	r3, 8002014 <_malloc_r+0x3c>
 800200c:	4630      	mov	r0, r6
 800200e:	f000 f8cd 	bl	80021ac <_sbrk_r>
 8002012:	6020      	str	r0, [r4, #0]
 8002014:	4629      	mov	r1, r5
 8002016:	4630      	mov	r0, r6
 8002018:	f000 f8c8 	bl	80021ac <_sbrk_r>
 800201c:	1c43      	adds	r3, r0, #1
 800201e:	d124      	bne.n	800206a <_malloc_r+0x92>
 8002020:	230c      	movs	r3, #12
 8002022:	6033      	str	r3, [r6, #0]
 8002024:	4630      	mov	r0, r6
 8002026:	f000 fa9a 	bl	800255e <__malloc_unlock>
 800202a:	e7e4      	b.n	8001ff6 <_malloc_r+0x1e>
 800202c:	680b      	ldr	r3, [r1, #0]
 800202e:	1b5b      	subs	r3, r3, r5
 8002030:	d418      	bmi.n	8002064 <_malloc_r+0x8c>
 8002032:	2b0b      	cmp	r3, #11
 8002034:	d90f      	bls.n	8002056 <_malloc_r+0x7e>
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	50cd      	str	r5, [r1, r3]
 800203a:	18cc      	adds	r4, r1, r3
 800203c:	4630      	mov	r0, r6
 800203e:	f000 fa8e 	bl	800255e <__malloc_unlock>
 8002042:	f104 000b 	add.w	r0, r4, #11
 8002046:	1d23      	adds	r3, r4, #4
 8002048:	f020 0007 	bic.w	r0, r0, #7
 800204c:	1ac3      	subs	r3, r0, r3
 800204e:	d0d3      	beq.n	8001ff8 <_malloc_r+0x20>
 8002050:	425a      	negs	r2, r3
 8002052:	50e2      	str	r2, [r4, r3]
 8002054:	e7d0      	b.n	8001ff8 <_malloc_r+0x20>
 8002056:	428c      	cmp	r4, r1
 8002058:	684b      	ldr	r3, [r1, #4]
 800205a:	bf16      	itet	ne
 800205c:	6063      	strne	r3, [r4, #4]
 800205e:	6013      	streq	r3, [r2, #0]
 8002060:	460c      	movne	r4, r1
 8002062:	e7eb      	b.n	800203c <_malloc_r+0x64>
 8002064:	460c      	mov	r4, r1
 8002066:	6849      	ldr	r1, [r1, #4]
 8002068:	e7cc      	b.n	8002004 <_malloc_r+0x2c>
 800206a:	1cc4      	adds	r4, r0, #3
 800206c:	f024 0403 	bic.w	r4, r4, #3
 8002070:	42a0      	cmp	r0, r4
 8002072:	d005      	beq.n	8002080 <_malloc_r+0xa8>
 8002074:	1a21      	subs	r1, r4, r0
 8002076:	4630      	mov	r0, r6
 8002078:	f000 f898 	bl	80021ac <_sbrk_r>
 800207c:	3001      	adds	r0, #1
 800207e:	d0cf      	beq.n	8002020 <_malloc_r+0x48>
 8002080:	6025      	str	r5, [r4, #0]
 8002082:	e7db      	b.n	800203c <_malloc_r+0x64>
 8002084:	2000008c 	.word	0x2000008c
 8002088:	20000090 	.word	0x20000090

0800208c <iprintf>:
 800208c:	b40f      	push	{r0, r1, r2, r3}
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <iprintf+0x2c>)
 8002090:	b513      	push	{r0, r1, r4, lr}
 8002092:	681c      	ldr	r4, [r3, #0]
 8002094:	b124      	cbz	r4, 80020a0 <iprintf+0x14>
 8002096:	69a3      	ldr	r3, [r4, #24]
 8002098:	b913      	cbnz	r3, 80020a0 <iprintf+0x14>
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fe6a 	bl	8001d74 <__sinit>
 80020a0:	ab05      	add	r3, sp, #20
 80020a2:	9a04      	ldr	r2, [sp, #16]
 80020a4:	68a1      	ldr	r1, [r4, #8]
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	4620      	mov	r0, r4
 80020aa:	f000 fa83 	bl	80025b4 <_vfiprintf_r>
 80020ae:	b002      	add	sp, #8
 80020b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020b4:	b004      	add	sp, #16
 80020b6:	4770      	bx	lr
 80020b8:	2000000c 	.word	0x2000000c

080020bc <putchar>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <putchar+0x24>)
 80020c0:	681c      	ldr	r4, [r3, #0]
 80020c2:	4605      	mov	r5, r0
 80020c4:	b124      	cbz	r4, 80020d0 <putchar+0x14>
 80020c6:	69a3      	ldr	r3, [r4, #24]
 80020c8:	b913      	cbnz	r3, 80020d0 <putchar+0x14>
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff fe52 	bl	8001d74 <__sinit>
 80020d0:	68a2      	ldr	r2, [r4, #8]
 80020d2:	4629      	mov	r1, r5
 80020d4:	4620      	mov	r0, r4
 80020d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020da:	f000 bd09 	b.w	8002af0 <_putc_r>
 80020de:	bf00      	nop
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <_puts_r>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	460e      	mov	r6, r1
 80020e8:	4605      	mov	r5, r0
 80020ea:	b118      	cbz	r0, 80020f4 <_puts_r+0x10>
 80020ec:	6983      	ldr	r3, [r0, #24]
 80020ee:	b90b      	cbnz	r3, 80020f4 <_puts_r+0x10>
 80020f0:	f7ff fe40 	bl	8001d74 <__sinit>
 80020f4:	69ab      	ldr	r3, [r5, #24]
 80020f6:	68ac      	ldr	r4, [r5, #8]
 80020f8:	b913      	cbnz	r3, 8002100 <_puts_r+0x1c>
 80020fa:	4628      	mov	r0, r5
 80020fc:	f7ff fe3a 	bl	8001d74 <__sinit>
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <_puts_r+0xac>)
 8002102:	429c      	cmp	r4, r3
 8002104:	d117      	bne.n	8002136 <_puts_r+0x52>
 8002106:	686c      	ldr	r4, [r5, #4]
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	071b      	lsls	r3, r3, #28
 800210c:	d51d      	bpl.n	800214a <_puts_r+0x66>
 800210e:	6923      	ldr	r3, [r4, #16]
 8002110:	b1db      	cbz	r3, 800214a <_puts_r+0x66>
 8002112:	3e01      	subs	r6, #1
 8002114:	68a3      	ldr	r3, [r4, #8]
 8002116:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800211a:	3b01      	subs	r3, #1
 800211c:	60a3      	str	r3, [r4, #8]
 800211e:	b9e9      	cbnz	r1, 800215c <_puts_r+0x78>
 8002120:	2b00      	cmp	r3, #0
 8002122:	da2e      	bge.n	8002182 <_puts_r+0x9e>
 8002124:	4622      	mov	r2, r4
 8002126:	210a      	movs	r1, #10
 8002128:	4628      	mov	r0, r5
 800212a:	f000 f893 	bl	8002254 <__swbuf_r>
 800212e:	3001      	adds	r0, #1
 8002130:	d011      	beq.n	8002156 <_puts_r+0x72>
 8002132:	200a      	movs	r0, #10
 8002134:	e011      	b.n	800215a <_puts_r+0x76>
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <_puts_r+0xb0>)
 8002138:	429c      	cmp	r4, r3
 800213a:	d101      	bne.n	8002140 <_puts_r+0x5c>
 800213c:	68ac      	ldr	r4, [r5, #8]
 800213e:	e7e3      	b.n	8002108 <_puts_r+0x24>
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_puts_r+0xb4>)
 8002142:	429c      	cmp	r4, r3
 8002144:	bf08      	it	eq
 8002146:	68ec      	ldreq	r4, [r5, #12]
 8002148:	e7de      	b.n	8002108 <_puts_r+0x24>
 800214a:	4621      	mov	r1, r4
 800214c:	4628      	mov	r0, r5
 800214e:	f000 f8e5 	bl	800231c <__swsetup_r>
 8002152:	2800      	cmp	r0, #0
 8002154:	d0dd      	beq.n	8002112 <_puts_r+0x2e>
 8002156:	f04f 30ff 	mov.w	r0, #4294967295
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	2b00      	cmp	r3, #0
 800215e:	da04      	bge.n	800216a <_puts_r+0x86>
 8002160:	69a2      	ldr	r2, [r4, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	dc06      	bgt.n	8002174 <_puts_r+0x90>
 8002166:	290a      	cmp	r1, #10
 8002168:	d004      	beq.n	8002174 <_puts_r+0x90>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	6022      	str	r2, [r4, #0]
 8002170:	7019      	strb	r1, [r3, #0]
 8002172:	e7cf      	b.n	8002114 <_puts_r+0x30>
 8002174:	4622      	mov	r2, r4
 8002176:	4628      	mov	r0, r5
 8002178:	f000 f86c 	bl	8002254 <__swbuf_r>
 800217c:	3001      	adds	r0, #1
 800217e:	d1c9      	bne.n	8002114 <_puts_r+0x30>
 8002180:	e7e9      	b.n	8002156 <_puts_r+0x72>
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	200a      	movs	r0, #10
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	6022      	str	r2, [r4, #0]
 800218a:	7018      	strb	r0, [r3, #0]
 800218c:	e7e5      	b.n	800215a <_puts_r+0x76>
 800218e:	bf00      	nop
 8002190:	080030a0 	.word	0x080030a0
 8002194:	080030c0 	.word	0x080030c0
 8002198:	08003080 	.word	0x08003080

0800219c <puts>:
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <puts+0xc>)
 800219e:	4601      	mov	r1, r0
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f7ff bf9f 	b.w	80020e4 <_puts_r>
 80021a6:	bf00      	nop
 80021a8:	2000000c 	.word	0x2000000c

080021ac <_sbrk_r>:
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	4c06      	ldr	r4, [pc, #24]	; (80021c8 <_sbrk_r+0x1c>)
 80021b0:	2300      	movs	r3, #0
 80021b2:	4605      	mov	r5, r0
 80021b4:	4608      	mov	r0, r1
 80021b6:	6023      	str	r3, [r4, #0]
 80021b8:	f000 fde6 	bl	8002d88 <_sbrk>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d102      	bne.n	80021c6 <_sbrk_r+0x1a>
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	b103      	cbz	r3, 80021c6 <_sbrk_r+0x1a>
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	2000019c 	.word	0x2000019c

080021cc <__sread>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	460c      	mov	r4, r1
 80021d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d4:	f000 fcc2 	bl	8002b5c <_read_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	bfab      	itete	ge
 80021dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021de:	89a3      	ldrhlt	r3, [r4, #12]
 80021e0:	181b      	addge	r3, r3, r0
 80021e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021e6:	bfac      	ite	ge
 80021e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ea:	81a3      	strhlt	r3, [r4, #12]
 80021ec:	bd10      	pop	{r4, pc}

080021ee <__swrite>:
 80021ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	461f      	mov	r7, r3
 80021f4:	898b      	ldrh	r3, [r1, #12]
 80021f6:	05db      	lsls	r3, r3, #23
 80021f8:	4605      	mov	r5, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	4616      	mov	r6, r2
 80021fe:	d505      	bpl.n	800220c <__swrite+0x1e>
 8002200:	2302      	movs	r3, #2
 8002202:	2200      	movs	r2, #0
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	f000 f932 	bl	8002470 <_lseek_r>
 800220c:	89a3      	ldrh	r3, [r4, #12]
 800220e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002216:	81a3      	strh	r3, [r4, #12]
 8002218:	4632      	mov	r2, r6
 800221a:	463b      	mov	r3, r7
 800221c:	4628      	mov	r0, r5
 800221e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	f000 b869 	b.w	80022f8 <_write_r>

08002226 <__sseek>:
 8002226:	b510      	push	{r4, lr}
 8002228:	460c      	mov	r4, r1
 800222a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800222e:	f000 f91f 	bl	8002470 <_lseek_r>
 8002232:	1c43      	adds	r3, r0, #1
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	bf15      	itete	ne
 8002238:	6560      	strne	r0, [r4, #84]	; 0x54
 800223a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800223e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002242:	81a3      	strheq	r3, [r4, #12]
 8002244:	bf18      	it	ne
 8002246:	81a3      	strhne	r3, [r4, #12]
 8002248:	bd10      	pop	{r4, pc}

0800224a <__sclose>:
 800224a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800224e:	f000 b8d3 	b.w	80023f8 <_close_r>
	...

08002254 <__swbuf_r>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	460e      	mov	r6, r1
 8002258:	4614      	mov	r4, r2
 800225a:	4605      	mov	r5, r0
 800225c:	b118      	cbz	r0, 8002266 <__swbuf_r+0x12>
 800225e:	6983      	ldr	r3, [r0, #24]
 8002260:	b90b      	cbnz	r3, 8002266 <__swbuf_r+0x12>
 8002262:	f7ff fd87 	bl	8001d74 <__sinit>
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <__swbuf_r+0x98>)
 8002268:	429c      	cmp	r4, r3
 800226a:	d12a      	bne.n	80022c2 <__swbuf_r+0x6e>
 800226c:	686c      	ldr	r4, [r5, #4]
 800226e:	69a3      	ldr	r3, [r4, #24]
 8002270:	60a3      	str	r3, [r4, #8]
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	071a      	lsls	r2, r3, #28
 8002276:	d52e      	bpl.n	80022d6 <__swbuf_r+0x82>
 8002278:	6923      	ldr	r3, [r4, #16]
 800227a:	b363      	cbz	r3, 80022d6 <__swbuf_r+0x82>
 800227c:	6923      	ldr	r3, [r4, #16]
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	1ac0      	subs	r0, r0, r3
 8002282:	6963      	ldr	r3, [r4, #20]
 8002284:	b2f6      	uxtb	r6, r6
 8002286:	4283      	cmp	r3, r0
 8002288:	4637      	mov	r7, r6
 800228a:	dc04      	bgt.n	8002296 <__swbuf_r+0x42>
 800228c:	4621      	mov	r1, r4
 800228e:	4628      	mov	r0, r5
 8002290:	f7ff fcf4 	bl	8001c7c <_fflush_r>
 8002294:	bb28      	cbnz	r0, 80022e2 <__swbuf_r+0x8e>
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60a3      	str	r3, [r4, #8]
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	6022      	str	r2, [r4, #0]
 80022a2:	701e      	strb	r6, [r3, #0]
 80022a4:	6963      	ldr	r3, [r4, #20]
 80022a6:	3001      	adds	r0, #1
 80022a8:	4283      	cmp	r3, r0
 80022aa:	d004      	beq.n	80022b6 <__swbuf_r+0x62>
 80022ac:	89a3      	ldrh	r3, [r4, #12]
 80022ae:	07db      	lsls	r3, r3, #31
 80022b0:	d519      	bpl.n	80022e6 <__swbuf_r+0x92>
 80022b2:	2e0a      	cmp	r6, #10
 80022b4:	d117      	bne.n	80022e6 <__swbuf_r+0x92>
 80022b6:	4621      	mov	r1, r4
 80022b8:	4628      	mov	r0, r5
 80022ba:	f7ff fcdf 	bl	8001c7c <_fflush_r>
 80022be:	b190      	cbz	r0, 80022e6 <__swbuf_r+0x92>
 80022c0:	e00f      	b.n	80022e2 <__swbuf_r+0x8e>
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <__swbuf_r+0x9c>)
 80022c4:	429c      	cmp	r4, r3
 80022c6:	d101      	bne.n	80022cc <__swbuf_r+0x78>
 80022c8:	68ac      	ldr	r4, [r5, #8]
 80022ca:	e7d0      	b.n	800226e <__swbuf_r+0x1a>
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <__swbuf_r+0xa0>)
 80022ce:	429c      	cmp	r4, r3
 80022d0:	bf08      	it	eq
 80022d2:	68ec      	ldreq	r4, [r5, #12]
 80022d4:	e7cb      	b.n	800226e <__swbuf_r+0x1a>
 80022d6:	4621      	mov	r1, r4
 80022d8:	4628      	mov	r0, r5
 80022da:	f000 f81f 	bl	800231c <__swsetup_r>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d0cc      	beq.n	800227c <__swbuf_r+0x28>
 80022e2:	f04f 37ff 	mov.w	r7, #4294967295
 80022e6:	4638      	mov	r0, r7
 80022e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	080030a0 	.word	0x080030a0
 80022f0:	080030c0 	.word	0x080030c0
 80022f4:	08003080 	.word	0x08003080

080022f8 <_write_r>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4c07      	ldr	r4, [pc, #28]	; (8002318 <_write_r+0x20>)
 80022fc:	4605      	mov	r5, r0
 80022fe:	4608      	mov	r0, r1
 8002300:	4611      	mov	r1, r2
 8002302:	2200      	movs	r2, #0
 8002304:	6022      	str	r2, [r4, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	f7fe fafc 	bl	8000904 <_write>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_write_r+0x1e>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	b103      	cbz	r3, 8002316 <_write_r+0x1e>
 8002314:	602b      	str	r3, [r5, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	2000019c 	.word	0x2000019c

0800231c <__swsetup_r>:
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <__swsetup_r+0xcc>)
 800231e:	b570      	push	{r4, r5, r6, lr}
 8002320:	681d      	ldr	r5, [r3, #0]
 8002322:	4606      	mov	r6, r0
 8002324:	460c      	mov	r4, r1
 8002326:	b125      	cbz	r5, 8002332 <__swsetup_r+0x16>
 8002328:	69ab      	ldr	r3, [r5, #24]
 800232a:	b913      	cbnz	r3, 8002332 <__swsetup_r+0x16>
 800232c:	4628      	mov	r0, r5
 800232e:	f7ff fd21 	bl	8001d74 <__sinit>
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <__swsetup_r+0xd0>)
 8002334:	429c      	cmp	r4, r3
 8002336:	d10f      	bne.n	8002358 <__swsetup_r+0x3c>
 8002338:	686c      	ldr	r4, [r5, #4]
 800233a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800233e:	b29a      	uxth	r2, r3
 8002340:	0715      	lsls	r5, r2, #28
 8002342:	d42c      	bmi.n	800239e <__swsetup_r+0x82>
 8002344:	06d0      	lsls	r0, r2, #27
 8002346:	d411      	bmi.n	800236c <__swsetup_r+0x50>
 8002348:	2209      	movs	r2, #9
 800234a:	6032      	str	r2, [r6, #0]
 800234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002350:	81a3      	strh	r3, [r4, #12]
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	e03e      	b.n	80023d6 <__swsetup_r+0xba>
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <__swsetup_r+0xd4>)
 800235a:	429c      	cmp	r4, r3
 800235c:	d101      	bne.n	8002362 <__swsetup_r+0x46>
 800235e:	68ac      	ldr	r4, [r5, #8]
 8002360:	e7eb      	b.n	800233a <__swsetup_r+0x1e>
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <__swsetup_r+0xd8>)
 8002364:	429c      	cmp	r4, r3
 8002366:	bf08      	it	eq
 8002368:	68ec      	ldreq	r4, [r5, #12]
 800236a:	e7e6      	b.n	800233a <__swsetup_r+0x1e>
 800236c:	0751      	lsls	r1, r2, #29
 800236e:	d512      	bpl.n	8002396 <__swsetup_r+0x7a>
 8002370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002372:	b141      	cbz	r1, 8002386 <__swsetup_r+0x6a>
 8002374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002378:	4299      	cmp	r1, r3
 800237a:	d002      	beq.n	8002382 <__swsetup_r+0x66>
 800237c:	4630      	mov	r0, r6
 800237e:	f7ff fddd 	bl	8001f3c <_free_r>
 8002382:	2300      	movs	r3, #0
 8002384:	6363      	str	r3, [r4, #52]	; 0x34
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	6063      	str	r3, [r4, #4]
 8002392:	6923      	ldr	r3, [r4, #16]
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	b94b      	cbnz	r3, 80023b6 <__swsetup_r+0x9a>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d003      	beq.n	80023b6 <__swsetup_r+0x9a>
 80023ae:	4621      	mov	r1, r4
 80023b0:	4630      	mov	r0, r6
 80023b2:	f000 f893 	bl	80024dc <__smakebuf_r>
 80023b6:	89a2      	ldrh	r2, [r4, #12]
 80023b8:	f012 0301 	ands.w	r3, r2, #1
 80023bc:	d00c      	beq.n	80023d8 <__swsetup_r+0xbc>
 80023be:	2300      	movs	r3, #0
 80023c0:	60a3      	str	r3, [r4, #8]
 80023c2:	6963      	ldr	r3, [r4, #20]
 80023c4:	425b      	negs	r3, r3
 80023c6:	61a3      	str	r3, [r4, #24]
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	b953      	cbnz	r3, 80023e2 <__swsetup_r+0xc6>
 80023cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80023d4:	d1ba      	bne.n	800234c <__swsetup_r+0x30>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	0792      	lsls	r2, r2, #30
 80023da:	bf58      	it	pl
 80023dc:	6963      	ldrpl	r3, [r4, #20]
 80023de:	60a3      	str	r3, [r4, #8]
 80023e0:	e7f2      	b.n	80023c8 <__swsetup_r+0xac>
 80023e2:	2000      	movs	r0, #0
 80023e4:	e7f7      	b.n	80023d6 <__swsetup_r+0xba>
 80023e6:	bf00      	nop
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	080030a0 	.word	0x080030a0
 80023f0:	080030c0 	.word	0x080030c0
 80023f4:	08003080 	.word	0x08003080

080023f8 <_close_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4c06      	ldr	r4, [pc, #24]	; (8002414 <_close_r+0x1c>)
 80023fc:	2300      	movs	r3, #0
 80023fe:	4605      	mov	r5, r0
 8002400:	4608      	mov	r0, r1
 8002402:	6023      	str	r3, [r4, #0]
 8002404:	f000 fca0 	bl	8002d48 <_close>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d102      	bne.n	8002412 <_close_r+0x1a>
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	b103      	cbz	r3, 8002412 <_close_r+0x1a>
 8002410:	602b      	str	r3, [r5, #0]
 8002412:	bd38      	pop	{r3, r4, r5, pc}
 8002414:	2000019c 	.word	0x2000019c

08002418 <_getc_r>:
 8002418:	b538      	push	{r3, r4, r5, lr}
 800241a:	460c      	mov	r4, r1
 800241c:	4605      	mov	r5, r0
 800241e:	b118      	cbz	r0, 8002428 <_getc_r+0x10>
 8002420:	6983      	ldr	r3, [r0, #24]
 8002422:	b90b      	cbnz	r3, 8002428 <_getc_r+0x10>
 8002424:	f7ff fca6 	bl	8001d74 <__sinit>
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <_getc_r+0x4c>)
 800242a:	429c      	cmp	r4, r3
 800242c:	d10b      	bne.n	8002446 <_getc_r+0x2e>
 800242e:	686c      	ldr	r4, [r5, #4]
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	6063      	str	r3, [r4, #4]
 8002438:	da0f      	bge.n	800245a <_getc_r+0x42>
 800243a:	4621      	mov	r1, r4
 800243c:	4628      	mov	r0, r5
 800243e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002442:	f000 bb9d 	b.w	8002b80 <__srget_r>
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_getc_r+0x50>)
 8002448:	429c      	cmp	r4, r3
 800244a:	d101      	bne.n	8002450 <_getc_r+0x38>
 800244c:	68ac      	ldr	r4, [r5, #8]
 800244e:	e7ef      	b.n	8002430 <_getc_r+0x18>
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <_getc_r+0x54>)
 8002452:	429c      	cmp	r4, r3
 8002454:	bf08      	it	eq
 8002456:	68ec      	ldreq	r4, [r5, #12]
 8002458:	e7ea      	b.n	8002430 <_getc_r+0x18>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	6022      	str	r2, [r4, #0]
 8002460:	7818      	ldrb	r0, [r3, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	080030a0 	.word	0x080030a0
 8002468:	080030c0 	.word	0x080030c0
 800246c:	08003080 	.word	0x08003080

08002470 <_lseek_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4c07      	ldr	r4, [pc, #28]	; (8002490 <_lseek_r+0x20>)
 8002474:	4605      	mov	r5, r0
 8002476:	4608      	mov	r0, r1
 8002478:	4611      	mov	r1, r2
 800247a:	2200      	movs	r2, #0
 800247c:	6022      	str	r2, [r4, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 fc7a 	bl	8002d78 <_lseek>
 8002484:	1c43      	adds	r3, r0, #1
 8002486:	d102      	bne.n	800248e <_lseek_r+0x1e>
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	b103      	cbz	r3, 800248e <_lseek_r+0x1e>
 800248c:	602b      	str	r3, [r5, #0]
 800248e:	bd38      	pop	{r3, r4, r5, pc}
 8002490:	2000019c 	.word	0x2000019c

08002494 <__swhatbuf_r>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	460e      	mov	r6, r1
 8002498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249c:	2900      	cmp	r1, #0
 800249e:	b096      	sub	sp, #88	; 0x58
 80024a0:	4614      	mov	r4, r2
 80024a2:	461d      	mov	r5, r3
 80024a4:	da07      	bge.n	80024b6 <__swhatbuf_r+0x22>
 80024a6:	2300      	movs	r3, #0
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	89b3      	ldrh	r3, [r6, #12]
 80024ac:	061a      	lsls	r2, r3, #24
 80024ae:	d410      	bmi.n	80024d2 <__swhatbuf_r+0x3e>
 80024b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b4:	e00e      	b.n	80024d4 <__swhatbuf_r+0x40>
 80024b6:	466a      	mov	r2, sp
 80024b8:	f000 fb8e 	bl	8002bd8 <_fstat_r>
 80024bc:	2800      	cmp	r0, #0
 80024be:	dbf2      	blt.n	80024a6 <__swhatbuf_r+0x12>
 80024c0:	9a01      	ldr	r2, [sp, #4]
 80024c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024ca:	425a      	negs	r2, r3
 80024cc:	415a      	adcs	r2, r3
 80024ce:	602a      	str	r2, [r5, #0]
 80024d0:	e7ee      	b.n	80024b0 <__swhatbuf_r+0x1c>
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	2000      	movs	r0, #0
 80024d6:	6023      	str	r3, [r4, #0]
 80024d8:	b016      	add	sp, #88	; 0x58
 80024da:	bd70      	pop	{r4, r5, r6, pc}

080024dc <__smakebuf_r>:
 80024dc:	898b      	ldrh	r3, [r1, #12]
 80024de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024e0:	079d      	lsls	r5, r3, #30
 80024e2:	4606      	mov	r6, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	d507      	bpl.n	80024f8 <__smakebuf_r+0x1c>
 80024e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	6123      	str	r3, [r4, #16]
 80024f0:	2301      	movs	r3, #1
 80024f2:	6163      	str	r3, [r4, #20]
 80024f4:	b002      	add	sp, #8
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	ab01      	add	r3, sp, #4
 80024fa:	466a      	mov	r2, sp
 80024fc:	f7ff ffca 	bl	8002494 <__swhatbuf_r>
 8002500:	9900      	ldr	r1, [sp, #0]
 8002502:	4605      	mov	r5, r0
 8002504:	4630      	mov	r0, r6
 8002506:	f7ff fd67 	bl	8001fd8 <_malloc_r>
 800250a:	b948      	cbnz	r0, 8002520 <__smakebuf_r+0x44>
 800250c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002510:	059a      	lsls	r2, r3, #22
 8002512:	d4ef      	bmi.n	80024f4 <__smakebuf_r+0x18>
 8002514:	f023 0303 	bic.w	r3, r3, #3
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	81a3      	strh	r3, [r4, #12]
 800251e:	e7e3      	b.n	80024e8 <__smakebuf_r+0xc>
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <__smakebuf_r+0x7c>)
 8002522:	62b3      	str	r3, [r6, #40]	; 0x28
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	6020      	str	r0, [r4, #0]
 8002528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252c:	81a3      	strh	r3, [r4, #12]
 800252e:	9b00      	ldr	r3, [sp, #0]
 8002530:	6163      	str	r3, [r4, #20]
 8002532:	9b01      	ldr	r3, [sp, #4]
 8002534:	6120      	str	r0, [r4, #16]
 8002536:	b15b      	cbz	r3, 8002550 <__smakebuf_r+0x74>
 8002538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800253c:	4630      	mov	r0, r6
 800253e:	f000 fb5d 	bl	8002bfc <_isatty_r>
 8002542:	b128      	cbz	r0, 8002550 <__smakebuf_r+0x74>
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	81a3      	strh	r3, [r4, #12]
 8002550:	89a3      	ldrh	r3, [r4, #12]
 8002552:	431d      	orrs	r5, r3
 8002554:	81a5      	strh	r5, [r4, #12]
 8002556:	e7cd      	b.n	80024f4 <__smakebuf_r+0x18>
 8002558:	08001d3d 	.word	0x08001d3d

0800255c <__malloc_lock>:
 800255c:	4770      	bx	lr

0800255e <__malloc_unlock>:
 800255e:	4770      	bx	lr

08002560 <__sfputc_r>:
 8002560:	6893      	ldr	r3, [r2, #8]
 8002562:	3b01      	subs	r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	b410      	push	{r4}
 8002568:	6093      	str	r3, [r2, #8]
 800256a:	da08      	bge.n	800257e <__sfputc_r+0x1e>
 800256c:	6994      	ldr	r4, [r2, #24]
 800256e:	42a3      	cmp	r3, r4
 8002570:	db01      	blt.n	8002576 <__sfputc_r+0x16>
 8002572:	290a      	cmp	r1, #10
 8002574:	d103      	bne.n	800257e <__sfputc_r+0x1e>
 8002576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800257a:	f7ff be6b 	b.w	8002254 <__swbuf_r>
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	1c58      	adds	r0, r3, #1
 8002582:	6010      	str	r0, [r2, #0]
 8002584:	7019      	strb	r1, [r3, #0]
 8002586:	4608      	mov	r0, r1
 8002588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800258c:	4770      	bx	lr

0800258e <__sfputs_r>:
 800258e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002590:	4606      	mov	r6, r0
 8002592:	460f      	mov	r7, r1
 8002594:	4614      	mov	r4, r2
 8002596:	18d5      	adds	r5, r2, r3
 8002598:	42ac      	cmp	r4, r5
 800259a:	d101      	bne.n	80025a0 <__sfputs_r+0x12>
 800259c:	2000      	movs	r0, #0
 800259e:	e007      	b.n	80025b0 <__sfputs_r+0x22>
 80025a0:	463a      	mov	r2, r7
 80025a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a6:	4630      	mov	r0, r6
 80025a8:	f7ff ffda 	bl	8002560 <__sfputc_r>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d1f3      	bne.n	8002598 <__sfputs_r+0xa>
 80025b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b4 <_vfiprintf_r>:
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	460c      	mov	r4, r1
 80025ba:	b09d      	sub	sp, #116	; 0x74
 80025bc:	4617      	mov	r7, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	4606      	mov	r6, r0
 80025c2:	b118      	cbz	r0, 80025cc <_vfiprintf_r+0x18>
 80025c4:	6983      	ldr	r3, [r0, #24]
 80025c6:	b90b      	cbnz	r3, 80025cc <_vfiprintf_r+0x18>
 80025c8:	f7ff fbd4 	bl	8001d74 <__sinit>
 80025cc:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <_vfiprintf_r+0x20c>)
 80025ce:	429c      	cmp	r4, r3
 80025d0:	d158      	bne.n	8002684 <_vfiprintf_r+0xd0>
 80025d2:	6874      	ldr	r4, [r6, #4]
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	0718      	lsls	r0, r3, #28
 80025d8:	d55e      	bpl.n	8002698 <_vfiprintf_r+0xe4>
 80025da:	6923      	ldr	r3, [r4, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <_vfiprintf_r+0xe4>
 80025e0:	2300      	movs	r3, #0
 80025e2:	9309      	str	r3, [sp, #36]	; 0x24
 80025e4:	2320      	movs	r3, #32
 80025e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025ea:	2330      	movs	r3, #48	; 0x30
 80025ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025f0:	9503      	str	r5, [sp, #12]
 80025f2:	f04f 0b01 	mov.w	fp, #1
 80025f6:	46b8      	mov	r8, r7
 80025f8:	4645      	mov	r5, r8
 80025fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025fe:	b10b      	cbz	r3, 8002604 <_vfiprintf_r+0x50>
 8002600:	2b25      	cmp	r3, #37	; 0x25
 8002602:	d154      	bne.n	80026ae <_vfiprintf_r+0xfa>
 8002604:	ebb8 0a07 	subs.w	sl, r8, r7
 8002608:	d00b      	beq.n	8002622 <_vfiprintf_r+0x6e>
 800260a:	4653      	mov	r3, sl
 800260c:	463a      	mov	r2, r7
 800260e:	4621      	mov	r1, r4
 8002610:	4630      	mov	r0, r6
 8002612:	f7ff ffbc 	bl	800258e <__sfputs_r>
 8002616:	3001      	adds	r0, #1
 8002618:	f000 80c2 	beq.w	80027a0 <_vfiprintf_r+0x1ec>
 800261c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800261e:	4453      	add	r3, sl
 8002620:	9309      	str	r3, [sp, #36]	; 0x24
 8002622:	f898 3000 	ldrb.w	r3, [r8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80ba 	beq.w	80027a0 <_vfiprintf_r+0x1ec>
 800262c:	2300      	movs	r3, #0
 800262e:	f04f 32ff 	mov.w	r2, #4294967295
 8002632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002636:	9304      	str	r3, [sp, #16]
 8002638:	9307      	str	r3, [sp, #28]
 800263a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800263e:	931a      	str	r3, [sp, #104]	; 0x68
 8002640:	46a8      	mov	r8, r5
 8002642:	2205      	movs	r2, #5
 8002644:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002648:	485e      	ldr	r0, [pc, #376]	; (80027c4 <_vfiprintf_r+0x210>)
 800264a:	f7fd fdf9 	bl	8000240 <memchr>
 800264e:	9b04      	ldr	r3, [sp, #16]
 8002650:	bb78      	cbnz	r0, 80026b2 <_vfiprintf_r+0xfe>
 8002652:	06d9      	lsls	r1, r3, #27
 8002654:	bf44      	itt	mi
 8002656:	2220      	movmi	r2, #32
 8002658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800265c:	071a      	lsls	r2, r3, #28
 800265e:	bf44      	itt	mi
 8002660:	222b      	movmi	r2, #43	; 0x2b
 8002662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002666:	782a      	ldrb	r2, [r5, #0]
 8002668:	2a2a      	cmp	r2, #42	; 0x2a
 800266a:	d02a      	beq.n	80026c2 <_vfiprintf_r+0x10e>
 800266c:	9a07      	ldr	r2, [sp, #28]
 800266e:	46a8      	mov	r8, r5
 8002670:	2000      	movs	r0, #0
 8002672:	250a      	movs	r5, #10
 8002674:	4641      	mov	r1, r8
 8002676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800267a:	3b30      	subs	r3, #48	; 0x30
 800267c:	2b09      	cmp	r3, #9
 800267e:	d969      	bls.n	8002754 <_vfiprintf_r+0x1a0>
 8002680:	b360      	cbz	r0, 80026dc <_vfiprintf_r+0x128>
 8002682:	e024      	b.n	80026ce <_vfiprintf_r+0x11a>
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <_vfiprintf_r+0x214>)
 8002686:	429c      	cmp	r4, r3
 8002688:	d101      	bne.n	800268e <_vfiprintf_r+0xda>
 800268a:	68b4      	ldr	r4, [r6, #8]
 800268c:	e7a2      	b.n	80025d4 <_vfiprintf_r+0x20>
 800268e:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <_vfiprintf_r+0x218>)
 8002690:	429c      	cmp	r4, r3
 8002692:	bf08      	it	eq
 8002694:	68f4      	ldreq	r4, [r6, #12]
 8002696:	e79d      	b.n	80025d4 <_vfiprintf_r+0x20>
 8002698:	4621      	mov	r1, r4
 800269a:	4630      	mov	r0, r6
 800269c:	f7ff fe3e 	bl	800231c <__swsetup_r>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d09d      	beq.n	80025e0 <_vfiprintf_r+0x2c>
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	b01d      	add	sp, #116	; 0x74
 80026aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ae:	46a8      	mov	r8, r5
 80026b0:	e7a2      	b.n	80025f8 <_vfiprintf_r+0x44>
 80026b2:	4a44      	ldr	r2, [pc, #272]	; (80027c4 <_vfiprintf_r+0x210>)
 80026b4:	1a80      	subs	r0, r0, r2
 80026b6:	fa0b f000 	lsl.w	r0, fp, r0
 80026ba:	4318      	orrs	r0, r3
 80026bc:	9004      	str	r0, [sp, #16]
 80026be:	4645      	mov	r5, r8
 80026c0:	e7be      	b.n	8002640 <_vfiprintf_r+0x8c>
 80026c2:	9a03      	ldr	r2, [sp, #12]
 80026c4:	1d11      	adds	r1, r2, #4
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	9103      	str	r1, [sp, #12]
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	db01      	blt.n	80026d2 <_vfiprintf_r+0x11e>
 80026ce:	9207      	str	r2, [sp, #28]
 80026d0:	e004      	b.n	80026dc <_vfiprintf_r+0x128>
 80026d2:	4252      	negs	r2, r2
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	9207      	str	r2, [sp, #28]
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	f898 3000 	ldrb.w	r3, [r8]
 80026e0:	2b2e      	cmp	r3, #46	; 0x2e
 80026e2:	d10e      	bne.n	8002702 <_vfiprintf_r+0x14e>
 80026e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80026e8:	2b2a      	cmp	r3, #42	; 0x2a
 80026ea:	d138      	bne.n	800275e <_vfiprintf_r+0x1aa>
 80026ec:	9b03      	ldr	r3, [sp, #12]
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	9203      	str	r2, [sp, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bfb8      	it	lt
 80026f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80026fc:	f108 0802 	add.w	r8, r8, #2
 8002700:	9305      	str	r3, [sp, #20]
 8002702:	4d33      	ldr	r5, [pc, #204]	; (80027d0 <_vfiprintf_r+0x21c>)
 8002704:	f898 1000 	ldrb.w	r1, [r8]
 8002708:	2203      	movs	r2, #3
 800270a:	4628      	mov	r0, r5
 800270c:	f7fd fd98 	bl	8000240 <memchr>
 8002710:	b140      	cbz	r0, 8002724 <_vfiprintf_r+0x170>
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	1b40      	subs	r0, r0, r5
 8002716:	fa03 f000 	lsl.w	r0, r3, r0
 800271a:	9b04      	ldr	r3, [sp, #16]
 800271c:	4303      	orrs	r3, r0
 800271e:	f108 0801 	add.w	r8, r8, #1
 8002722:	9304      	str	r3, [sp, #16]
 8002724:	f898 1000 	ldrb.w	r1, [r8]
 8002728:	482a      	ldr	r0, [pc, #168]	; (80027d4 <_vfiprintf_r+0x220>)
 800272a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800272e:	2206      	movs	r2, #6
 8002730:	f108 0701 	add.w	r7, r8, #1
 8002734:	f7fd fd84 	bl	8000240 <memchr>
 8002738:	2800      	cmp	r0, #0
 800273a:	d037      	beq.n	80027ac <_vfiprintf_r+0x1f8>
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <_vfiprintf_r+0x224>)
 800273e:	bb1b      	cbnz	r3, 8002788 <_vfiprintf_r+0x1d4>
 8002740:	9b03      	ldr	r3, [sp, #12]
 8002742:	3307      	adds	r3, #7
 8002744:	f023 0307 	bic.w	r3, r3, #7
 8002748:	3308      	adds	r3, #8
 800274a:	9303      	str	r3, [sp, #12]
 800274c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800274e:	444b      	add	r3, r9
 8002750:	9309      	str	r3, [sp, #36]	; 0x24
 8002752:	e750      	b.n	80025f6 <_vfiprintf_r+0x42>
 8002754:	fb05 3202 	mla	r2, r5, r2, r3
 8002758:	2001      	movs	r0, #1
 800275a:	4688      	mov	r8, r1
 800275c:	e78a      	b.n	8002674 <_vfiprintf_r+0xc0>
 800275e:	2300      	movs	r3, #0
 8002760:	f108 0801 	add.w	r8, r8, #1
 8002764:	9305      	str	r3, [sp, #20]
 8002766:	4619      	mov	r1, r3
 8002768:	250a      	movs	r5, #10
 800276a:	4640      	mov	r0, r8
 800276c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002770:	3a30      	subs	r2, #48	; 0x30
 8002772:	2a09      	cmp	r2, #9
 8002774:	d903      	bls.n	800277e <_vfiprintf_r+0x1ca>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0c3      	beq.n	8002702 <_vfiprintf_r+0x14e>
 800277a:	9105      	str	r1, [sp, #20]
 800277c:	e7c1      	b.n	8002702 <_vfiprintf_r+0x14e>
 800277e:	fb05 2101 	mla	r1, r5, r1, r2
 8002782:	2301      	movs	r3, #1
 8002784:	4680      	mov	r8, r0
 8002786:	e7f0      	b.n	800276a <_vfiprintf_r+0x1b6>
 8002788:	ab03      	add	r3, sp, #12
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4622      	mov	r2, r4
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <_vfiprintf_r+0x228>)
 8002790:	a904      	add	r1, sp, #16
 8002792:	4630      	mov	r0, r6
 8002794:	f3af 8000 	nop.w
 8002798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800279c:	4681      	mov	r9, r0
 800279e:	d1d5      	bne.n	800274c <_vfiprintf_r+0x198>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	065b      	lsls	r3, r3, #25
 80027a4:	f53f af7e 	bmi.w	80026a4 <_vfiprintf_r+0xf0>
 80027a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027aa:	e77d      	b.n	80026a8 <_vfiprintf_r+0xf4>
 80027ac:	ab03      	add	r3, sp, #12
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	4622      	mov	r2, r4
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <_vfiprintf_r+0x228>)
 80027b4:	a904      	add	r1, sp, #16
 80027b6:	4630      	mov	r0, r6
 80027b8:	f000 f888 	bl	80028cc <_printf_i>
 80027bc:	e7ec      	b.n	8002798 <_vfiprintf_r+0x1e4>
 80027be:	bf00      	nop
 80027c0:	080030a0 	.word	0x080030a0
 80027c4:	080030e4 	.word	0x080030e4
 80027c8:	080030c0 	.word	0x080030c0
 80027cc:	08003080 	.word	0x08003080
 80027d0:	080030ea 	.word	0x080030ea
 80027d4:	080030ee 	.word	0x080030ee
 80027d8:	00000000 	.word	0x00000000
 80027dc:	0800258f 	.word	0x0800258f

080027e0 <_printf_common>:
 80027e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	4691      	mov	r9, r2
 80027e6:	461f      	mov	r7, r3
 80027e8:	688a      	ldr	r2, [r1, #8]
 80027ea:	690b      	ldr	r3, [r1, #16]
 80027ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027f0:	4293      	cmp	r3, r2
 80027f2:	bfb8      	it	lt
 80027f4:	4613      	movlt	r3, r2
 80027f6:	f8c9 3000 	str.w	r3, [r9]
 80027fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027fe:	4606      	mov	r6, r0
 8002800:	460c      	mov	r4, r1
 8002802:	b112      	cbz	r2, 800280a <_printf_common+0x2a>
 8002804:	3301      	adds	r3, #1
 8002806:	f8c9 3000 	str.w	r3, [r9]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	0699      	lsls	r1, r3, #26
 800280e:	bf42      	ittt	mi
 8002810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002814:	3302      	addmi	r3, #2
 8002816:	f8c9 3000 	strmi.w	r3, [r9]
 800281a:	6825      	ldr	r5, [r4, #0]
 800281c:	f015 0506 	ands.w	r5, r5, #6
 8002820:	d107      	bne.n	8002832 <_printf_common+0x52>
 8002822:	f104 0a19 	add.w	sl, r4, #25
 8002826:	68e3      	ldr	r3, [r4, #12]
 8002828:	f8d9 2000 	ldr.w	r2, [r9]
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	42ab      	cmp	r3, r5
 8002830:	dc28      	bgt.n	8002884 <_printf_common+0xa4>
 8002832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	3300      	adds	r3, #0
 800283a:	bf18      	it	ne
 800283c:	2301      	movne	r3, #1
 800283e:	0692      	lsls	r2, r2, #26
 8002840:	d42d      	bmi.n	800289e <_printf_common+0xbe>
 8002842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002846:	4639      	mov	r1, r7
 8002848:	4630      	mov	r0, r6
 800284a:	47c0      	blx	r8
 800284c:	3001      	adds	r0, #1
 800284e:	d020      	beq.n	8002892 <_printf_common+0xb2>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	68e5      	ldr	r5, [r4, #12]
 8002854:	f8d9 2000 	ldr.w	r2, [r9]
 8002858:	f003 0306 	and.w	r3, r3, #6
 800285c:	2b04      	cmp	r3, #4
 800285e:	bf08      	it	eq
 8002860:	1aad      	subeq	r5, r5, r2
 8002862:	68a3      	ldr	r3, [r4, #8]
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	bf0c      	ite	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	2500      	movne	r5, #0
 800286e:	4293      	cmp	r3, r2
 8002870:	bfc4      	itt	gt
 8002872:	1a9b      	subgt	r3, r3, r2
 8002874:	18ed      	addgt	r5, r5, r3
 8002876:	f04f 0900 	mov.w	r9, #0
 800287a:	341a      	adds	r4, #26
 800287c:	454d      	cmp	r5, r9
 800287e:	d11a      	bne.n	80028b6 <_printf_common+0xd6>
 8002880:	2000      	movs	r0, #0
 8002882:	e008      	b.n	8002896 <_printf_common+0xb6>
 8002884:	2301      	movs	r3, #1
 8002886:	4652      	mov	r2, sl
 8002888:	4639      	mov	r1, r7
 800288a:	4630      	mov	r0, r6
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d103      	bne.n	800289a <_printf_common+0xba>
 8002892:	f04f 30ff 	mov.w	r0, #4294967295
 8002896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289a:	3501      	adds	r5, #1
 800289c:	e7c3      	b.n	8002826 <_printf_common+0x46>
 800289e:	18e1      	adds	r1, r4, r3
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	2030      	movs	r0, #48	; 0x30
 80028a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a8:	4422      	add	r2, r4
 80028aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b2:	3302      	adds	r3, #2
 80028b4:	e7c5      	b.n	8002842 <_printf_common+0x62>
 80028b6:	2301      	movs	r3, #1
 80028b8:	4622      	mov	r2, r4
 80028ba:	4639      	mov	r1, r7
 80028bc:	4630      	mov	r0, r6
 80028be:	47c0      	blx	r8
 80028c0:	3001      	adds	r0, #1
 80028c2:	d0e6      	beq.n	8002892 <_printf_common+0xb2>
 80028c4:	f109 0901 	add.w	r9, r9, #1
 80028c8:	e7d8      	b.n	800287c <_printf_common+0x9c>
	...

080028cc <_printf_i>:
 80028cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028d4:	460c      	mov	r4, r1
 80028d6:	7e09      	ldrb	r1, [r1, #24]
 80028d8:	b085      	sub	sp, #20
 80028da:	296e      	cmp	r1, #110	; 0x6e
 80028dc:	4617      	mov	r7, r2
 80028de:	4606      	mov	r6, r0
 80028e0:	4698      	mov	r8, r3
 80028e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028e4:	f000 80b3 	beq.w	8002a4e <_printf_i+0x182>
 80028e8:	d822      	bhi.n	8002930 <_printf_i+0x64>
 80028ea:	2963      	cmp	r1, #99	; 0x63
 80028ec:	d036      	beq.n	800295c <_printf_i+0x90>
 80028ee:	d80a      	bhi.n	8002906 <_printf_i+0x3a>
 80028f0:	2900      	cmp	r1, #0
 80028f2:	f000 80b9 	beq.w	8002a68 <_printf_i+0x19c>
 80028f6:	2958      	cmp	r1, #88	; 0x58
 80028f8:	f000 8083 	beq.w	8002a02 <_printf_i+0x136>
 80028fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002904:	e032      	b.n	800296c <_printf_i+0xa0>
 8002906:	2964      	cmp	r1, #100	; 0x64
 8002908:	d001      	beq.n	800290e <_printf_i+0x42>
 800290a:	2969      	cmp	r1, #105	; 0x69
 800290c:	d1f6      	bne.n	80028fc <_printf_i+0x30>
 800290e:	6820      	ldr	r0, [r4, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	0605      	lsls	r5, r0, #24
 8002914:	f103 0104 	add.w	r1, r3, #4
 8002918:	d52a      	bpl.n	8002970 <_printf_i+0xa4>
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	da03      	bge.n	800292a <_printf_i+0x5e>
 8002922:	222d      	movs	r2, #45	; 0x2d
 8002924:	425b      	negs	r3, r3
 8002926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800292a:	486f      	ldr	r0, [pc, #444]	; (8002ae8 <_printf_i+0x21c>)
 800292c:	220a      	movs	r2, #10
 800292e:	e039      	b.n	80029a4 <_printf_i+0xd8>
 8002930:	2973      	cmp	r1, #115	; 0x73
 8002932:	f000 809d 	beq.w	8002a70 <_printf_i+0x1a4>
 8002936:	d808      	bhi.n	800294a <_printf_i+0x7e>
 8002938:	296f      	cmp	r1, #111	; 0x6f
 800293a:	d020      	beq.n	800297e <_printf_i+0xb2>
 800293c:	2970      	cmp	r1, #112	; 0x70
 800293e:	d1dd      	bne.n	80028fc <_printf_i+0x30>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	6023      	str	r3, [r4, #0]
 8002948:	e003      	b.n	8002952 <_printf_i+0x86>
 800294a:	2975      	cmp	r1, #117	; 0x75
 800294c:	d017      	beq.n	800297e <_printf_i+0xb2>
 800294e:	2978      	cmp	r1, #120	; 0x78
 8002950:	d1d4      	bne.n	80028fc <_printf_i+0x30>
 8002952:	2378      	movs	r3, #120	; 0x78
 8002954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002958:	4864      	ldr	r0, [pc, #400]	; (8002aec <_printf_i+0x220>)
 800295a:	e055      	b.n	8002a08 <_printf_i+0x13c>
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	1d19      	adds	r1, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6011      	str	r1, [r2, #0]
 8002964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800296c:	2301      	movs	r3, #1
 800296e:	e08c      	b.n	8002a8a <_printf_i+0x1be>
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6011      	str	r1, [r2, #0]
 8002974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002978:	bf18      	it	ne
 800297a:	b21b      	sxthne	r3, r3
 800297c:	e7cf      	b.n	800291e <_printf_i+0x52>
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	1d18      	adds	r0, r3, #4
 8002984:	6010      	str	r0, [r2, #0]
 8002986:	0628      	lsls	r0, r5, #24
 8002988:	d501      	bpl.n	800298e <_printf_i+0xc2>
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	e002      	b.n	8002994 <_printf_i+0xc8>
 800298e:	0668      	lsls	r0, r5, #25
 8002990:	d5fb      	bpl.n	800298a <_printf_i+0xbe>
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4854      	ldr	r0, [pc, #336]	; (8002ae8 <_printf_i+0x21c>)
 8002996:	296f      	cmp	r1, #111	; 0x6f
 8002998:	bf14      	ite	ne
 800299a:	220a      	movne	r2, #10
 800299c:	2208      	moveq	r2, #8
 800299e:	2100      	movs	r1, #0
 80029a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029a4:	6865      	ldr	r5, [r4, #4]
 80029a6:	60a5      	str	r5, [r4, #8]
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	f2c0 8095 	blt.w	8002ad8 <_printf_i+0x20c>
 80029ae:	6821      	ldr	r1, [r4, #0]
 80029b0:	f021 0104 	bic.w	r1, r1, #4
 80029b4:	6021      	str	r1, [r4, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13d      	bne.n	8002a36 <_printf_i+0x16a>
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	f040 808e 	bne.w	8002adc <_printf_i+0x210>
 80029c0:	4665      	mov	r5, ip
 80029c2:	2a08      	cmp	r2, #8
 80029c4:	d10b      	bne.n	80029de <_printf_i+0x112>
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	07db      	lsls	r3, r3, #31
 80029ca:	d508      	bpl.n	80029de <_printf_i+0x112>
 80029cc:	6923      	ldr	r3, [r4, #16]
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	bfde      	ittt	le
 80029d4:	2330      	movle	r3, #48	; 0x30
 80029d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029de:	ebac 0305 	sub.w	r3, ip, r5
 80029e2:	6123      	str	r3, [r4, #16]
 80029e4:	f8cd 8000 	str.w	r8, [sp]
 80029e8:	463b      	mov	r3, r7
 80029ea:	aa03      	add	r2, sp, #12
 80029ec:	4621      	mov	r1, r4
 80029ee:	4630      	mov	r0, r6
 80029f0:	f7ff fef6 	bl	80027e0 <_printf_common>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d14d      	bne.n	8002a94 <_printf_i+0x1c8>
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	b005      	add	sp, #20
 80029fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a02:	4839      	ldr	r0, [pc, #228]	; (8002ae8 <_printf_i+0x21c>)
 8002a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	6821      	ldr	r1, [r4, #0]
 8002a0c:	1d1d      	adds	r5, r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6015      	str	r5, [r2, #0]
 8002a12:	060a      	lsls	r2, r1, #24
 8002a14:	d50b      	bpl.n	8002a2e <_printf_i+0x162>
 8002a16:	07ca      	lsls	r2, r1, #31
 8002a18:	bf44      	itt	mi
 8002a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8002a1e:	6021      	strmi	r1, [r4, #0]
 8002a20:	b91b      	cbnz	r3, 8002a2a <_printf_i+0x15e>
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	f022 0220 	bic.w	r2, r2, #32
 8002a28:	6022      	str	r2, [r4, #0]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	e7b7      	b.n	800299e <_printf_i+0xd2>
 8002a2e:	064d      	lsls	r5, r1, #25
 8002a30:	bf48      	it	mi
 8002a32:	b29b      	uxthmi	r3, r3
 8002a34:	e7ef      	b.n	8002a16 <_printf_i+0x14a>
 8002a36:	4665      	mov	r5, ip
 8002a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8002a40:	5cc3      	ldrb	r3, [r0, r3]
 8002a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a46:	460b      	mov	r3, r1
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	d1f5      	bne.n	8002a38 <_printf_i+0x16c>
 8002a4c:	e7b9      	b.n	80029c2 <_printf_i+0xf6>
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	6825      	ldr	r5, [r4, #0]
 8002a52:	6961      	ldr	r1, [r4, #20]
 8002a54:	1d18      	adds	r0, r3, #4
 8002a56:	6010      	str	r0, [r2, #0]
 8002a58:	0628      	lsls	r0, r5, #24
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	d501      	bpl.n	8002a62 <_printf_i+0x196>
 8002a5e:	6019      	str	r1, [r3, #0]
 8002a60:	e002      	b.n	8002a68 <_printf_i+0x19c>
 8002a62:	066a      	lsls	r2, r5, #25
 8002a64:	d5fb      	bpl.n	8002a5e <_printf_i+0x192>
 8002a66:	8019      	strh	r1, [r3, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6123      	str	r3, [r4, #16]
 8002a6c:	4665      	mov	r5, ip
 8002a6e:	e7b9      	b.n	80029e4 <_printf_i+0x118>
 8002a70:	6813      	ldr	r3, [r2, #0]
 8002a72:	1d19      	adds	r1, r3, #4
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	681d      	ldr	r5, [r3, #0]
 8002a78:	6862      	ldr	r2, [r4, #4]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f7fd fbdf 	bl	8000240 <memchr>
 8002a82:	b108      	cbz	r0, 8002a88 <_printf_i+0x1bc>
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	6060      	str	r0, [r4, #4]
 8002a88:	6863      	ldr	r3, [r4, #4]
 8002a8a:	6123      	str	r3, [r4, #16]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a92:	e7a7      	b.n	80029e4 <_printf_i+0x118>
 8002a94:	6923      	ldr	r3, [r4, #16]
 8002a96:	462a      	mov	r2, r5
 8002a98:	4639      	mov	r1, r7
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	47c0      	blx	r8
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d0aa      	beq.n	80029f8 <_printf_i+0x12c>
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d413      	bmi.n	8002ad0 <_printf_i+0x204>
 8002aa8:	68e0      	ldr	r0, [r4, #12]
 8002aaa:	9b03      	ldr	r3, [sp, #12]
 8002aac:	4298      	cmp	r0, r3
 8002aae:	bfb8      	it	lt
 8002ab0:	4618      	movlt	r0, r3
 8002ab2:	e7a3      	b.n	80029fc <_printf_i+0x130>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	4639      	mov	r1, r7
 8002aba:	4630      	mov	r0, r6
 8002abc:	47c0      	blx	r8
 8002abe:	3001      	adds	r0, #1
 8002ac0:	d09a      	beq.n	80029f8 <_printf_i+0x12c>
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	68e3      	ldr	r3, [r4, #12]
 8002ac6:	9a03      	ldr	r2, [sp, #12]
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	42ab      	cmp	r3, r5
 8002acc:	dcf2      	bgt.n	8002ab4 <_printf_i+0x1e8>
 8002ace:	e7eb      	b.n	8002aa8 <_printf_i+0x1dc>
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	f104 0919 	add.w	r9, r4, #25
 8002ad6:	e7f5      	b.n	8002ac4 <_printf_i+0x1f8>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ac      	bne.n	8002a36 <_printf_i+0x16a>
 8002adc:	7803      	ldrb	r3, [r0, #0]
 8002ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae6:	e76c      	b.n	80029c2 <_printf_i+0xf6>
 8002ae8:	080030f5 	.word	0x080030f5
 8002aec:	08003106 	.word	0x08003106

08002af0 <_putc_r>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	460d      	mov	r5, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	4606      	mov	r6, r0
 8002af8:	b118      	cbz	r0, 8002b02 <_putc_r+0x12>
 8002afa:	6983      	ldr	r3, [r0, #24]
 8002afc:	b90b      	cbnz	r3, 8002b02 <_putc_r+0x12>
 8002afe:	f7ff f939 	bl	8001d74 <__sinit>
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <_putc_r+0x60>)
 8002b04:	429c      	cmp	r4, r3
 8002b06:	d112      	bne.n	8002b2e <_putc_r+0x3e>
 8002b08:	6874      	ldr	r4, [r6, #4]
 8002b0a:	68a3      	ldr	r3, [r4, #8]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	60a3      	str	r3, [r4, #8]
 8002b12:	da16      	bge.n	8002b42 <_putc_r+0x52>
 8002b14:	69a2      	ldr	r2, [r4, #24]
 8002b16:	4293      	cmp	r3, r2
 8002b18:	db02      	blt.n	8002b20 <_putc_r+0x30>
 8002b1a:	b2eb      	uxtb	r3, r5
 8002b1c:	2b0a      	cmp	r3, #10
 8002b1e:	d110      	bne.n	8002b42 <_putc_r+0x52>
 8002b20:	4622      	mov	r2, r4
 8002b22:	4629      	mov	r1, r5
 8002b24:	4630      	mov	r0, r6
 8002b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b2a:	f7ff bb93 	b.w	8002254 <__swbuf_r>
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <_putc_r+0x64>)
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d101      	bne.n	8002b38 <_putc_r+0x48>
 8002b34:	68b4      	ldr	r4, [r6, #8]
 8002b36:	e7e8      	b.n	8002b0a <_putc_r+0x1a>
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <_putc_r+0x68>)
 8002b3a:	429c      	cmp	r4, r3
 8002b3c:	bf08      	it	eq
 8002b3e:	68f4      	ldreq	r4, [r6, #12]
 8002b40:	e7e3      	b.n	8002b0a <_putc_r+0x1a>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	6022      	str	r2, [r4, #0]
 8002b48:	701d      	strb	r5, [r3, #0]
 8002b4a:	b2e8      	uxtb	r0, r5
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	bf00      	nop
 8002b50:	080030a0 	.word	0x080030a0
 8002b54:	080030c0 	.word	0x080030c0
 8002b58:	08003080 	.word	0x08003080

08002b5c <_read_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4c07      	ldr	r4, [pc, #28]	; (8002b7c <_read_r+0x20>)
 8002b60:	4605      	mov	r5, r0
 8002b62:	4608      	mov	r0, r1
 8002b64:	4611      	mov	r1, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	6022      	str	r2, [r4, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7fd fed6 	bl	800091c <_read>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_read_r+0x1e>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_read_r+0x1e>
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	2000019c 	.word	0x2000019c

08002b80 <__srget_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	460c      	mov	r4, r1
 8002b84:	4605      	mov	r5, r0
 8002b86:	b118      	cbz	r0, 8002b90 <__srget_r+0x10>
 8002b88:	6983      	ldr	r3, [r0, #24]
 8002b8a:	b90b      	cbnz	r3, 8002b90 <__srget_r+0x10>
 8002b8c:	f7ff f8f2 	bl	8001d74 <__sinit>
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <__srget_r+0x4c>)
 8002b92:	429c      	cmp	r4, r3
 8002b94:	d10d      	bne.n	8002bb2 <__srget_r+0x32>
 8002b96:	686c      	ldr	r4, [r5, #4]
 8002b98:	4621      	mov	r1, r4
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 f848 	bl	8002c30 <__srefill_r>
 8002ba0:	b988      	cbnz	r0, 8002bc6 <__srget_r+0x46>
 8002ba2:	6863      	ldr	r3, [r4, #4]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	6063      	str	r3, [r4, #4]
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	6022      	str	r2, [r4, #0]
 8002bae:	7818      	ldrb	r0, [r3, #0]
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <__srget_r+0x50>)
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	d101      	bne.n	8002bbc <__srget_r+0x3c>
 8002bb8:	68ac      	ldr	r4, [r5, #8]
 8002bba:	e7ed      	b.n	8002b98 <__srget_r+0x18>
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <__srget_r+0x54>)
 8002bbe:	429c      	cmp	r4, r3
 8002bc0:	bf08      	it	eq
 8002bc2:	68ec      	ldreq	r4, [r5, #12]
 8002bc4:	e7e8      	b.n	8002b98 <__srget_r+0x18>
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	e7f1      	b.n	8002bb0 <__srget_r+0x30>
 8002bcc:	080030a0 	.word	0x080030a0
 8002bd0:	080030c0 	.word	0x080030c0
 8002bd4:	08003080 	.word	0x08003080

08002bd8 <_fstat_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4c07      	ldr	r4, [pc, #28]	; (8002bf8 <_fstat_r+0x20>)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4605      	mov	r5, r0
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	f000 f8b7 	bl	8002d58 <_fstat>
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	d102      	bne.n	8002bf4 <_fstat_r+0x1c>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	b103      	cbz	r3, 8002bf4 <_fstat_r+0x1c>
 8002bf2:	602b      	str	r3, [r5, #0]
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000019c 	.word	0x2000019c

08002bfc <_isatty_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4c06      	ldr	r4, [pc, #24]	; (8002c18 <_isatty_r+0x1c>)
 8002c00:	2300      	movs	r3, #0
 8002c02:	4605      	mov	r5, r0
 8002c04:	4608      	mov	r0, r1
 8002c06:	6023      	str	r3, [r4, #0]
 8002c08:	f000 f8ae 	bl	8002d68 <_isatty>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_isatty_r+0x1a>
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_isatty_r+0x1a>
 8002c14:	602b      	str	r3, [r5, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	2000019c 	.word	0x2000019c

08002c1c <lflush>:
 8002c1c:	8983      	ldrh	r3, [r0, #12]
 8002c1e:	f003 0309 	and.w	r3, r3, #9
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d101      	bne.n	8002c2a <lflush+0xe>
 8002c26:	f7ff b853 	b.w	8001cd0 <fflush>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	4770      	bx	lr
	...

08002c30 <__srefill_r>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	460c      	mov	r4, r1
 8002c34:	4605      	mov	r5, r0
 8002c36:	b118      	cbz	r0, 8002c40 <__srefill_r+0x10>
 8002c38:	6983      	ldr	r3, [r0, #24]
 8002c3a:	b90b      	cbnz	r3, 8002c40 <__srefill_r+0x10>
 8002c3c:	f7ff f89a 	bl	8001d74 <__sinit>
 8002c40:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <__srefill_r+0x104>)
 8002c42:	429c      	cmp	r4, r3
 8002c44:	d10a      	bne.n	8002c5c <__srefill_r+0x2c>
 8002c46:	686c      	ldr	r4, [r5, #4]
 8002c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	6063      	str	r3, [r4, #4]
 8002c50:	b293      	uxth	r3, r2
 8002c52:	069e      	lsls	r6, r3, #26
 8002c54:	d50c      	bpl.n	8002c70 <__srefill_r+0x40>
 8002c56:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5a:	e067      	b.n	8002d2c <__srefill_r+0xfc>
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <__srefill_r+0x108>)
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d101      	bne.n	8002c66 <__srefill_r+0x36>
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	e7f0      	b.n	8002c48 <__srefill_r+0x18>
 8002c66:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <__srefill_r+0x10c>)
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	bf08      	it	eq
 8002c6c:	68ec      	ldreq	r4, [r5, #12]
 8002c6e:	e7eb      	b.n	8002c48 <__srefill_r+0x18>
 8002c70:	0758      	lsls	r0, r3, #29
 8002c72:	d449      	bmi.n	8002d08 <__srefill_r+0xd8>
 8002c74:	06d9      	lsls	r1, r3, #27
 8002c76:	d405      	bmi.n	8002c84 <__srefill_r+0x54>
 8002c78:	2309      	movs	r3, #9
 8002c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7e:	602b      	str	r3, [r5, #0]
 8002c80:	81a2      	strh	r2, [r4, #12]
 8002c82:	e7e8      	b.n	8002c56 <__srefill_r+0x26>
 8002c84:	071a      	lsls	r2, r3, #28
 8002c86:	d50b      	bpl.n	8002ca0 <__srefill_r+0x70>
 8002c88:	4621      	mov	r1, r4
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f7fe fff6 	bl	8001c7c <_fflush_r>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d1e0      	bne.n	8002c56 <__srefill_r+0x26>
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	60a0      	str	r0, [r4, #8]
 8002c98:	f023 0308 	bic.w	r3, r3, #8
 8002c9c:	81a3      	strh	r3, [r4, #12]
 8002c9e:	61a0      	str	r0, [r4, #24]
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	6923      	ldr	r3, [r4, #16]
 8002caa:	b91b      	cbnz	r3, 8002cb4 <__srefill_r+0x84>
 8002cac:	4621      	mov	r1, r4
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7ff fc14 	bl	80024dc <__smakebuf_r>
 8002cb4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002cb8:	b2be      	uxth	r6, r7
 8002cba:	07b3      	lsls	r3, r6, #30
 8002cbc:	d00f      	beq.n	8002cde <__srefill_r+0xae>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <__srefill_r+0x110>)
 8002cc4:	491f      	ldr	r1, [pc, #124]	; (8002d44 <__srefill_r+0x114>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	f006 0609 	and.w	r6, r6, #9
 8002ccc:	f7ff f8be 	bl	8001e4c <_fwalk>
 8002cd0:	2e09      	cmp	r6, #9
 8002cd2:	81a7      	strh	r7, [r4, #12]
 8002cd4:	d103      	bne.n	8002cde <__srefill_r+0xae>
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7fe ff49 	bl	8001b70 <__sflush_r>
 8002cde:	6922      	ldr	r2, [r4, #16]
 8002ce0:	6022      	str	r2, [r4, #0]
 8002ce2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002ce4:	6963      	ldr	r3, [r4, #20]
 8002ce6:	6a21      	ldr	r1, [r4, #32]
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	2800      	cmp	r0, #0
 8002cee:	6060      	str	r0, [r4, #4]
 8002cf0:	dc1d      	bgt.n	8002d2e <__srefill_r+0xfe>
 8002cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cf6:	bf17      	itett	ne
 8002cf8:	2200      	movne	r2, #0
 8002cfa:	f043 0320 	orreq.w	r3, r3, #32
 8002cfe:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002d02:	6062      	strne	r2, [r4, #4]
 8002d04:	81a3      	strh	r3, [r4, #12]
 8002d06:	e7a6      	b.n	8002c56 <__srefill_r+0x26>
 8002d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d0a:	2900      	cmp	r1, #0
 8002d0c:	d0cc      	beq.n	8002ca8 <__srefill_r+0x78>
 8002d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d12:	4299      	cmp	r1, r3
 8002d14:	d002      	beq.n	8002d1c <__srefill_r+0xec>
 8002d16:	4628      	mov	r0, r5
 8002d18:	f7ff f910 	bl	8001f3c <_free_r>
 8002d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d1e:	6063      	str	r3, [r4, #4]
 8002d20:	2000      	movs	r0, #0
 8002d22:	6360      	str	r0, [r4, #52]	; 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0bf      	beq.n	8002ca8 <__srefill_r+0x78>
 8002d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d2e:	2000      	movs	r0, #0
 8002d30:	e7fc      	b.n	8002d2c <__srefill_r+0xfc>
 8002d32:	bf00      	nop
 8002d34:	080030a0 	.word	0x080030a0
 8002d38:	080030c0 	.word	0x080030c0
 8002d3c:	08003080 	.word	0x08003080
 8002d40:	080030e0 	.word	0x080030e0
 8002d44:	08002c1d 	.word	0x08002c1d

08002d48 <_close>:
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <_close+0xc>)
 8002d4a:	2258      	movs	r2, #88	; 0x58
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d52:	4770      	bx	lr
 8002d54:	2000019c 	.word	0x2000019c

08002d58 <_fstat>:
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <_fstat+0xc>)
 8002d5a:	2258      	movs	r2, #88	; 0x58
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d62:	4770      	bx	lr
 8002d64:	2000019c 	.word	0x2000019c

08002d68 <_isatty>:
 8002d68:	4b02      	ldr	r3, [pc, #8]	; (8002d74 <_isatty+0xc>)
 8002d6a:	2258      	movs	r2, #88	; 0x58
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	2000      	movs	r0, #0
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	2000019c 	.word	0x2000019c

08002d78 <_lseek>:
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <_lseek+0xc>)
 8002d7a:	2258      	movs	r2, #88	; 0x58
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d82:	4770      	bx	lr
 8002d84:	2000019c 	.word	0x2000019c

08002d88 <_sbrk>:
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <_sbrk+0x14>)
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	b909      	cbnz	r1, 8002d94 <_sbrk+0xc>
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <_sbrk+0x18>)
 8002d92:	6019      	str	r1, [r3, #0]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	4402      	add	r2, r0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4770      	bx	lr
 8002d9c:	20000094 	.word	0x20000094
 8002da0:	200001a0 	.word	0x200001a0

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
