
LAB-02-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002188  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002418  08002418  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002420  08002420  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002420  08002420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08002498  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000124  08002498  00020124  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dc1  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001658  00000000  00000000  00029e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bf0e  00000000  00000000  0002c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069a5  00000000  00000000  00057fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010dc5f  00000000  00000000  0005e953  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c5b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000154c  00000000  00000000  0016c630  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002da8  00000000  00000000  0016db7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  00170924  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00170990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08002368 	.word	0x08002368

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08002368 	.word	0x08002368

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
#include<stdint.h>


int trigger = 0;

int main(){
 8000538:	b508      	push	{r3, lr}
	Sys_Init();
 800053a:	f000 f8cf 	bl	80006dc <Sys_Init>

    //D5 pin C8
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;//enable clock
 800053e:	4a1f      	ldr	r2, [pc, #124]	; (80005bc <main+0x84>)
 8000540:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOC->MODER &= ~GPIO_MODER_MODER8_0;//set input mode
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0x88>)
 800054a:	6819      	ldr	r1, [r3, #0]
 800054c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000550:	6019      	str	r1, [r3, #0]
    GPIOC->MODER &= ~GPIO_MODER_MODER8_1;
 8000552:	6819      	ldr	r1, [r3, #0]
 8000554:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8000558:	6019      	str	r1, [r3, #0]
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR8_1;//turn on pull up resistor
 800055a:	68d9      	ldr	r1, [r3, #12]
 800055c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8000560:	60d9      	str	r1, [r3, #12]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPDR8_0;
 8000562:	68d9      	ldr	r1, [r3, #12]
 8000564:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000568:	60d9      	str	r1, [r3, #12]

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800056a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800056c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000570:	6453      	str	r3, [r2, #68]	; 0x44
	asm ("nop");
 8000572:	bf00      	nop
	asm ("nop");
 8000574:	bf00      	nop

	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PC;
 8000576:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800057a:	6913      	ldr	r3, [r2, #16]
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6113      	str	r3, [r2, #16]
	//SYSCFG->EXTICR |= SYSCFG_EXTICR3_EXTI8_1;
	//SYSCFG->EXTICR &= ~SYSCFG_EXTICR3_EXTI8_0;


	// Set interrupt enable for EXTI9_5.
	 NVIC->ISER[23 / 32] = (uint32_t) 1 << (23 % 32);
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <main+0x8c>)
 8000584:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000588:	601a      	str	r2, [r3, #0]

	// Unmask interrupt.
	 EXTI->IMR |= EXTI_IMR_MR8;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <main+0x90>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000592:	601a      	str	r2, [r3, #0]


	// Register for rising edge.
	 EXTI->RTSR |= EXTI_RTSR_TR8;
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	609a      	str	r2, [r3, #8]

	// And register for the falling edge.
	 EXTI->FTSR &= ~EXTI_FTSR_TR8;
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005a2:	60da      	str	r2, [r3, #12]


	while(1){
		if(trigger){
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <main+0x94>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0fb      	beq.n	80005a4 <main+0x6c>
			trigger = 0;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <main+0x94>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
			printf("Register Button Pressed\r\n");
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <main+0x98>)
 80005b4:	f001 fa9e 	bl	8001af4 <puts>
 80005b8:	e7f4      	b.n	80005a4 <main+0x6c>
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020800 	.word	0x40020800
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	08002398 	.word	0x08002398

080005d4 <EXTI9_5_IRQHandler>:
}

// Non-HAL GPIO/EXTI Handler
void EXTI9_5_IRQHandler() {
	// Clear Interrupt Bit by setting it to 1.
	EXTI->PR |= EXTI_PR_PR8;
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <EXTI9_5_IRQHandler+0x18>)
 80005d6:	6953      	ldr	r3, [r2, #20]
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6153      	str	r3, [r2, #20]
	asm ("nop");
 80005de:	bf00      	nop
	asm ("nop");
 80005e0:	bf00      	nop
	//printf("TEST");

	trigger = 1;
 80005e2:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <EXTI9_5_IRQHandler+0x1c>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]

}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40013c00 	.word	0x40013c00
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005f4:	b500      	push	{lr}
 80005f6:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800060a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800060c:	2219      	movs	r2, #25
 800060e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000610:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000614:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000618:	2309      	movs	r3, #9
 800061a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000620:	4668      	mov	r0, sp
 8000622:	f000 fb2b 	bl	8000c7c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000626:	b100      	cbz	r0, 800062a <SystemClock_Config+0x36>
 8000628:	e7fe      	b.n	8000628 <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800062a:	f000 fae9 	bl	8000c00 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800062e:	b100      	cbz	r0, 8000632 <SystemClock_Config+0x3e>
 8000630:	e7fe      	b.n	8000630 <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000632:	230f      	movs	r3, #15
 8000634:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800064a:	2107      	movs	r1, #7
 800064c:	a80d      	add	r0, sp, #52	; 0x34
 800064e:	f000 fd53 	bl	80010f8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000652:	b100      	cbz	r0, 8000656 <SystemClock_Config+0x62>
 8000654:	e7fe      	b.n	8000654 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 8000656:	b013      	add	sp, #76	; 0x4c
 8000658:	f85d fb04 	ldr.w	pc, [sp], #4

0800065c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800065c:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800065e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000662:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <CPU_CACHE_Enable+0x7c>)
 8000668:	2100      	movs	r1, #0
 800066a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800066e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800067c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000682:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000686:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800068e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000692:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000696:	e00f      	b.n	80006b8 <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000698:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800069a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800069e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80006a2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80006a6:	490c      	ldr	r1, [pc, #48]	; (80006d8 <CPU_CACHE_Enable+0x7c>)
 80006a8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80006ac:	1e53      	subs	r3, r2, #1
 80006ae:	2a00      	cmp	r2, #0
 80006b0:	d1f2      	bne.n	8000698 <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 80006b2:	1e43      	subs	r3, r0, #1
 80006b4:	b118      	cbz	r0, 80006be <CPU_CACHE_Enable+0x62>
 80006b6:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006b8:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80006bc:	e7ed      	b.n	800069a <CPU_CACHE_Enable+0x3e>
 80006be:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006c2:	694b      	ldr	r3, [r1, #20]
 80006c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c8:	614b      	str	r3, [r1, #20]
 80006ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ce:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80006d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80006dc:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80006de:	f7ff ffbd 	bl	800065c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80006e2:	f000 f91b 	bl	800091c <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80006e6:	f7ff ff85 	bl	80005f4 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80006ea:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <Sys_Init+0x1c>)
 80006ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <Sys_Init+0x20>)
 80006f2:	f000 f873 	bl	80007dc <initUart>
}
 80006f6:	bd08      	pop	{r3, pc}
 80006f8:	40011000 	.word	0x40011000
 80006fc:	2000009c 	.word	0x2000009c

08000700 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000700:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000702:	f000 f921 	bl	8000948 <HAL_IncTick>
}
 8000706:	bd08      	pop	{r3, pc}

08000708 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800070c:	6803      	ldr	r3, [r0, #0]
 800070e:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <HAL_UART_MspInit+0xc0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d004      	beq.n	800071e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000714:	4a2d      	ldr	r2, [pc, #180]	; (80007cc <HAL_UART_MspInit+0xc4>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d02c      	beq.n	8000774 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800071a:	b00b      	add	sp, #44	; 0x2c
 800071c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800071e:	4c2c      	ldr	r4, [pc, #176]	; (80007d0 <HAL_UART_MspInit+0xc8>)
 8000720:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6323      	str	r3, [r4, #48]	; 0x30
 8000728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000736:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000744:	2307      	movs	r3, #7
 8000746:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000748:	4d22      	ldr	r5, [pc, #136]	; (80007d4 <HAL_UART_MspInit+0xcc>)
 800074a:	a905      	add	r1, sp, #20
 800074c:	4628      	mov	r0, r5
 800074e:	f000 f967 	bl	8000a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000758:	a905      	add	r1, sp, #20
 800075a:	4628      	mov	r0, r5
 800075c:	f000 f960 	bl	8000a20 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000760:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6463      	str	r3, [r4, #68]	; 0x44
 8000768:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	9b02      	ldr	r3, [sp, #8]
 8000772:	e7d2      	b.n	800071a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000774:	4c16      	ldr	r4, [pc, #88]	; (80007d0 <HAL_UART_MspInit+0xc8>)
 8000776:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6323      	str	r3, [r4, #48]	; 0x30
 800077e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	9303      	str	r3, [sp, #12]
 8000786:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000788:	2340      	movs	r3, #64	; 0x40
 800078a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000798:	2308      	movs	r3, #8
 800079a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800079c:	4d0e      	ldr	r5, [pc, #56]	; (80007d8 <HAL_UART_MspInit+0xd0>)
 800079e:	a905      	add	r1, sp, #20
 80007a0:	4628      	mov	r0, r5
 80007a2:	f000 f93d 	bl	8000a20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80007aa:	a905      	add	r1, sp, #20
 80007ac:	4628      	mov	r0, r5
 80007ae:	f000 f937 	bl	8000a20 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80007b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	6463      	str	r3, [r4, #68]	; 0x44
 80007ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	9304      	str	r3, [sp, #16]
 80007c2:	9b04      	ldr	r3, [sp, #16]
}
 80007c4:	e7a9      	b.n	800071a <HAL_UART_MspInit+0x12>
 80007c6:	bf00      	nop
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40011400 	.word	0x40011400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 80007dc:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 80007de:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 80007e0:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	2200      	movs	r2, #0
 80007e4:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 80007e6:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 80007e8:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 80007ea:	210c      	movs	r1, #12
 80007ec:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80007ee:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80007f0:	f001 f8c7 	bl	8001982 <HAL_UART_Init>
}
 80007f4:	bd08      	pop	{r3, pc}
	...

080007f8 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 80007f8:	b510      	push	{r4, lr}
 80007fa:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 80007fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000800:	b292      	uxth	r2, r2
 8000802:	4802      	ldr	r0, [pc, #8]	; (800080c <_write+0x14>)
 8000804:	f000 ff9d 	bl	8001742 <HAL_UART_Transmit>
	return len;
}
 8000808:	4620      	mov	r0, r4
 800080a:	bd10      	pop	{r4, pc}
 800080c:	2000009c 	.word	0x2000009c

08000810 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000810:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000812:	2200      	movs	r2, #0
 8000814:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	2201      	movs	r2, #1
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <_read+0x18>)
 800081e:	f000 fffe 	bl	800181e <HAL_UART_Receive>
	return len;
}
 8000822:	2001      	movs	r0, #1
 8000824:	bd08      	pop	{r3, pc}
 8000826:	bf00      	nop
 8000828:	2000009c 	.word	0x2000009c

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000832:	e003      	b.n	800083c <LoopCopyDataInit>

08000834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800083a:	3104      	adds	r1, #4

0800083c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000844:	d3f6      	bcc.n	8000834 <CopyDataInit>
  ldr  r2, =_sbss
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000848:	e002      	b.n	8000850 <LoopFillZerobss>

0800084a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800084a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800084c:	f842 3b04 	str.w	r3, [r2], #4

08000850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000854:	d3f9      	bcc.n	800084a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000856:	f000 f813 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f001 f8c3 	bl	80019e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085e:	f7ff fe6b 	bl	8000538 <main>
  bx  lr    
 8000862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000868:	08002428 	.word	0x08002428
  ldr  r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000870:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000874:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000878:	20000124 	.word	0x20000124

0800087c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC_IRQHandler>
	...

08000880 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <SystemInit+0x40>)
 8000884:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <SystemInit+0x44>)
 8000892:	6819      	ldr	r1, [r3, #0]
 8000894:	f041 0101 	orr.w	r1, r1, #1
 8000898:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800089a:	2000      	movs	r0, #0
 800089c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	4909      	ldr	r1, [pc, #36]	; (80008c8 <SystemInit+0x48>)
 80008a2:	4021      	ands	r1, r4
 80008a4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008a6:	4909      	ldr	r1, [pc, #36]	; (80008cc <SystemInit+0x4c>)
 80008a8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80008b0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008b2:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b8:	6093      	str	r3, [r2, #8]
#endif
}
 80008ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00
 80008c4:	40023800 	.word	0x40023800
 80008c8:	fef6ffff 	.word	0xfef6ffff
 80008cc:	24003010 	.word	0x24003010

080008d0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b510      	push	{r4, lr}
 80008d6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_InitTick+0x40>)
 80008da:	7818      	ldrb	r0, [r3, #0]
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <HAL_InitTick+0x44>)
 80008e6:	6810      	ldr	r0, [r2, #0]
 80008e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80008ec:	f000 f882 	bl	80009f4 <HAL_SYSTICK_Config>
 80008f0:	b968      	cbnz	r0, 800090e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	2c0f      	cmp	r4, #15
 80008f4:	d901      	bls.n	80008fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80008f6:	2001      	movs	r0, #1
 80008f8:	e00a      	b.n	8000910 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	4621      	mov	r1, r4
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	f000 f845 	bl	8000990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_InitTick+0x40>)
 8000908:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2000      	movs	r0, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800090e:	2001      	movs	r0, #1
}
 8000910:	bd10      	pop	{r4, pc}
 8000912:	bf00      	nop
 8000914:	20000004 	.word	0x20000004
 8000918:	20000000 	.word	0x20000000

0800091c <HAL_Init>:
{
 800091c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_Init+0x28>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000926:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800092e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f81b 	bl	800096c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff ffcc 	bl	80008d4 <HAL_InitTick>
  HAL_MspInit();
 800093c:	f7ff ffc8 	bl	80008d0 <HAL_MspInit>
}
 8000940:	2000      	movs	r0, #0
 8000942:	bd08      	pop	{r3, pc}
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x10>)
 800094a:	6811      	ldr	r1, [r2, #0]
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_IncTick+0x14>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	440b      	add	r3, r1
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000011c 	.word	0x2000011c
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000960:	4b01      	ldr	r3, [pc, #4]	; (8000968 <HAL_GetTick+0x8>)
 8000962:	6818      	ldr	r0, [r3, #0]
}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000011c 	.word	0x2000011c

0800096c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800096e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	0200      	lsls	r0, r0, #8
 800097a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000980:	4a02      	ldr	r2, [pc, #8]	; (800098c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000982:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000984:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	05fa0000 	.word	0x05fa0000

08000990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000990:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_NVIC_SetPriority+0x58>)
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099a:	f1c3 0407 	rsb	r4, r3, #7
 800099e:	2c04      	cmp	r4, #4
 80009a0:	bf28      	it	cs
 80009a2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a4:	1d1d      	adds	r5, r3, #4
 80009a6:	2d06      	cmp	r5, #6
 80009a8:	d914      	bls.n	80009d4 <HAL_NVIC_SetPriority+0x44>
 80009aa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 35ff 	mov.w	r5, #4294967295
 80009b0:	fa05 f404 	lsl.w	r4, r5, r4
 80009b4:	ea21 0104 	bic.w	r1, r1, r4
 80009b8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ba:	fa05 f303 	lsl.w	r3, r5, r3
 80009be:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80009c4:	2800      	cmp	r0, #0
 80009c6:	db07      	blt.n	80009d8 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	0109      	lsls	r1, r1, #4
 80009ca:	b2c9      	uxtb	r1, r1
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <HAL_NVIC_SetPriority+0x5c>)
 80009ce:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009d0:	bc30      	pop	{r4, r5}
 80009d2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d4:	2300      	movs	r3, #0
 80009d6:	e7e9      	b.n	80009ac <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	f000 000f 	and.w	r0, r0, #15
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	b2c9      	uxtb	r1, r1
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_NVIC_SetPriority+0x60>)
 80009e2:	5419      	strb	r1, [r3, r0]
 80009e4:	e7f4      	b.n	80009d0 <HAL_NVIC_SetPriority+0x40>
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	e000e400 	.word	0xe000e400
 80009f0:	e000ed14 	.word	0xe000ed14

080009f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	3801      	subs	r0, #1
 80009f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009fa:	d20a      	bcs.n	8000a12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_SYSTICK_Config+0x24>)
 80009fe:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_SYSTICK_Config+0x28>)
 8000a02:	21f0      	movs	r1, #240	; 0xf0
 8000a04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	2000      	movs	r0, #0
 8000a0a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	f200 80e2 	bhi.w	8000bec <HAL_GPIO_Init+0x1cc>
{
 8000a28:	b4f0      	push	{r4, r5, r6, r7}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	e039      	b.n	8000aa2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a2e:	2209      	movs	r2, #9
 8000a30:	e000      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000a32:	2200      	movs	r2, #0
 8000a34:	40b2      	lsls	r2, r6
 8000a36:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a38:	3402      	adds	r4, #2
 8000a3a:	4e6d      	ldr	r6, [pc, #436]	; (8000bf0 <HAL_GPIO_Init+0x1d0>)
 8000a3c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a40:	4a6c      	ldr	r2, [pc, #432]	; (8000bf4 <HAL_GPIO_Init+0x1d4>)
 8000a42:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	43ea      	mvns	r2, r5
 8000a46:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	684f      	ldr	r7, [r1, #4]
 8000a4c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a50:	d001      	beq.n	8000a56 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000a52:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000a56:	4c67      	ldr	r4, [pc, #412]	; (8000bf4 <HAL_GPIO_Init+0x1d4>)
 8000a58:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000a5a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a60:	684f      	ldr	r7, [r1, #4]
 8000a62:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000a66:	d001      	beq.n	8000a6c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000a68:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000a6c:	4c61      	ldr	r4, [pc, #388]	; (8000bf4 <HAL_GPIO_Init+0x1d4>)
 8000a6e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a70:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000a72:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a76:	684f      	ldr	r7, [r1, #4]
 8000a78:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000a7c:	d001      	beq.n	8000a82 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000a7e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000a82:	4c5c      	ldr	r4, [pc, #368]	; (8000bf4 <HAL_GPIO_Init+0x1d4>)
 8000a84:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000a86:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8a:	684e      	ldr	r6, [r1, #4]
 8000a8c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000a90:	d001      	beq.n	8000a96 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000a92:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000a96:	4c57      	ldr	r4, [pc, #348]	; (8000bf4 <HAL_GPIO_Init+0x1d4>)
 8000a98:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	f200 80a2 	bhi.w	8000be6 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	680c      	ldr	r4, [r1, #0]
 8000aa8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000aac:	42aa      	cmp	r2, r5
 8000aae:	d1f4      	bne.n	8000a9a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab0:	684c      	ldr	r4, [r1, #4]
 8000ab2:	2c12      	cmp	r4, #18
 8000ab4:	bf18      	it	ne
 8000ab6:	2c02      	cmpne	r4, #2
 8000ab8:	d110      	bne.n	8000adc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000aba:	08de      	lsrs	r6, r3, #3
 8000abc:	3608      	adds	r6, #8
 8000abe:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ac2:	f003 0407 	and.w	r4, r3, #7
 8000ac6:	00a7      	lsls	r7, r4, #2
 8000ac8:	240f      	movs	r4, #15
 8000aca:	40bc      	lsls	r4, r7
 8000acc:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ad0:	690c      	ldr	r4, [r1, #16]
 8000ad2:	40bc      	lsls	r4, r7
 8000ad4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000ad8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000adc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ade:	005f      	lsls	r7, r3, #1
 8000ae0:	2603      	movs	r6, #3
 8000ae2:	40be      	lsls	r6, r7
 8000ae4:	43f6      	mvns	r6, r6
 8000ae6:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000aea:	684c      	ldr	r4, [r1, #4]
 8000aec:	f004 0403 	and.w	r4, r4, #3
 8000af0:	40bc      	lsls	r4, r7
 8000af2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000af6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	684c      	ldr	r4, [r1, #4]
 8000afa:	f104 3cff 	add.w	ip, r4, #4294967295
 8000afe:	2c11      	cmp	r4, #17
 8000b00:	bf18      	it	ne
 8000b02:	f1bc 0f01 	cmpne.w	ip, #1
 8000b06:	d901      	bls.n	8000b0c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b08:	2c12      	cmp	r4, #18
 8000b0a:	d111      	bne.n	8000b30 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000b0c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b0e:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b12:	68cc      	ldr	r4, [r1, #12]
 8000b14:	40bc      	lsls	r4, r7
 8000b16:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000b1a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1e:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b22:	684c      	ldr	r4, [r1, #4]
 8000b24:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000b2e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b30:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b32:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b34:	688a      	ldr	r2, [r1, #8]
 8000b36:	40ba      	lsls	r2, r7
 8000b38:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000b3a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3c:	684a      	ldr	r2, [r1, #4]
 8000b3e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b42:	d0aa      	beq.n	8000a9a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	4a2c      	ldr	r2, [pc, #176]	; (8000bf8 <HAL_GPIO_Init+0x1d8>)
 8000b46:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b48:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b4c:	6454      	str	r4, [r2, #68]	; 0x44
 8000b4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b50:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b58:	089c      	lsrs	r4, r3, #2
 8000b5a:	1ca6      	adds	r6, r4, #2
 8000b5c:	4a24      	ldr	r2, [pc, #144]	; (8000bf0 <HAL_GPIO_Init+0x1d0>)
 8000b5e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b62:	f003 0203 	and.w	r2, r3, #3
 8000b66:	0096      	lsls	r6, r2, #2
 8000b68:	220f      	movs	r2, #15
 8000b6a:	40b2      	lsls	r2, r6
 8000b6c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_GPIO_Init+0x1dc>)
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f43f af5d 	beq.w	8000a32 <HAL_GPIO_Init+0x12>
 8000b78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b7c:	4290      	cmp	r0, r2
 8000b7e:	d022      	beq.n	8000bc6 <HAL_GPIO_Init+0x1a6>
 8000b80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d020      	beq.n	8000bca <HAL_GPIO_Init+0x1aa>
 8000b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	d01e      	beq.n	8000bce <HAL_GPIO_Init+0x1ae>
 8000b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d01c      	beq.n	8000bd2 <HAL_GPIO_Init+0x1b2>
 8000b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	d01a      	beq.n	8000bd6 <HAL_GPIO_Init+0x1b6>
 8000ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d018      	beq.n	8000bda <HAL_GPIO_Init+0x1ba>
 8000ba8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bac:	4290      	cmp	r0, r2
 8000bae:	d016      	beq.n	8000bde <HAL_GPIO_Init+0x1be>
 8000bb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d014      	beq.n	8000be2 <HAL_GPIO_Init+0x1c2>
 8000bb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	f43f af36 	beq.w	8000a2e <HAL_GPIO_Init+0xe>
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	e736      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	e734      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bca:	2202      	movs	r2, #2
 8000bcc:	e732      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bce:	2203      	movs	r2, #3
 8000bd0:	e730      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	e72e      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	e72c      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bda:	2206      	movs	r2, #6
 8000bdc:	e72a      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000bde:	2207      	movs	r2, #7
 8000be0:	e728      	b.n	8000a34 <HAL_GPIO_Init+0x14>
 8000be2:	2208      	movs	r2, #8
 8000be4:	e726      	b.n	8000a34 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000be6:	b002      	add	sp, #8
 8000be8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bea:	4770      	bx	lr
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40013800 	.word	0x40013800
 8000bf4:	40013c00 	.word	0x40013c00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x74>)
 8000c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c22:	f7ff fe9d 	bl	8000960 <HAL_GetTick>
 8000c26:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c30:	d108      	bne.n	8000c44 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c32:	f7ff fe95 	bl	8000960 <HAL_GetTick>
 8000c36:	1b00      	subs	r0, r0, r4
 8000c38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c3c:	d9f4      	bls.n	8000c28 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000c3e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000c40:	b002      	add	sp, #8
 8000c42:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c46:	6813      	ldr	r3, [r2, #0]
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000c4e:	f7ff fe87 	bl	8000960 <HAL_GetTick>
 8000c52:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c5c:	d107      	bne.n	8000c6e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c5e:	f7ff fe7f 	bl	8000960 <HAL_GetTick>
 8000c62:	1b00      	subs	r0, r0, r4
 8000c64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c68:	d9f4      	bls.n	8000c54 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	e7e8      	b.n	8000c40 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7e6      	b.n	8000c40 <HAL_PWREx_EnableOverDrive+0x40>
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	f000 81dc 	beq.w	800103a <HAL_RCC_OscConfig+0x3be>
{
 8000c82:	b570      	push	{r4, r5, r6, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c88:	6803      	ldr	r3, [r0, #0]
 8000c8a:	f013 0f01 	tst.w	r3, #1
 8000c8e:	d029      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c90:	4ba2      	ldr	r3, [pc, #648]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d01a      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c9c:	4b9f      	ldr	r3, [pc, #636]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d00f      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cae:	d040      	beq.n	8000d32 <HAL_RCC_OscConfig+0xb6>
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d154      	bne.n	8000d5e <HAL_RCC_OscConfig+0xe2>
 8000cb4:	4b99      	ldr	r3, [pc, #612]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e039      	b.n	8000d3c <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cc8:	4b94      	ldr	r3, [pc, #592]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000cd0:	d0ea      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd2:	4b92      	ldr	r3, [pc, #584]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cda:	d003      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x68>
 8000cdc:	6863      	ldr	r3, [r4, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 81ad 	beq.w	800103e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	f013 0f02 	tst.w	r3, #2
 8000cea:	d075      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cec:	4b8b      	ldr	r3, [pc, #556]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f013 0f0c 	tst.w	r3, #12
 8000cf4:	d05e      	beq.n	8000db4 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf6:	4b89      	ldr	r3, [pc, #548]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d053      	beq.n	8000daa <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d02:	68e3      	ldr	r3, [r4, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 808a 	beq.w	8000e1e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0a:	4a84      	ldr	r2, [pc, #528]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d14:	f7ff fe24 	bl	8000960 <HAL_GetTick>
 8000d18:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1a:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f013 0f02 	tst.w	r3, #2
 8000d22:	d173      	bne.n	8000e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fe1c 	bl	8000960 <HAL_GetTick>
 8000d28:	1b40      	subs	r0, r0, r5
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9f5      	bls.n	8000d1a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000d2e:	2003      	movs	r0, #3
 8000d30:	e188      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	4a7a      	ldr	r2, [pc, #488]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d34:	6813      	ldr	r3, [r2, #0]
 8000d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d3c:	6863      	ldr	r3, [r4, #4]
 8000d3e:	b32b      	cbz	r3, 8000d8c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000d40:	f7ff fe0e 	bl	8000960 <HAL_GetTick>
 8000d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d4e:	d1c9      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fe06 	bl	8000960 <HAL_GetTick>
 8000d54:	1b40      	subs	r0, r0, r5
 8000d56:	2864      	cmp	r0, #100	; 0x64
 8000d58:	d9f5      	bls.n	8000d46 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	e172      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d62:	d009      	beq.n	8000d78 <HAL_RCC_OscConfig+0xfc>
 8000d64:	4b6d      	ldr	r3, [pc, #436]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e7e1      	b.n	8000d3c <HAL_RCC_OscConfig+0xc0>
 8000d78:	4b68      	ldr	r3, [pc, #416]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e7d7      	b.n	8000d3c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fde8 	bl	8000960 <HAL_GetTick>
 8000d90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d9a:	d0a3      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fde0 	bl	8000960 <HAL_GetTick>
 8000da0:	1b40      	subs	r0, r0, r5
 8000da2:	2864      	cmp	r0, #100	; 0x64
 8000da4:	d9f5      	bls.n	8000d92 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000da6:	2003      	movs	r0, #3
 8000da8:	e14c      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000db2:	d1a6      	bne.n	8000d02 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db4:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f013 0f02 	tst.w	r3, #2
 8000dbc:	d004      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x14c>
 8000dbe:	68e3      	ldr	r3, [r4, #12]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	e13d      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc8:	4a54      	ldr	r2, [pc, #336]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000dca:	6813      	ldr	r3, [r2, #0]
 8000dcc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dd0:	6921      	ldr	r1, [r4, #16]
 8000dd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dd6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	f013 0f08 	tst.w	r3, #8
 8000dde:	d046      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000de0:	6963      	ldr	r3, [r4, #20]
 8000de2:	b383      	cbz	r3, 8000e46 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de4:	4a4d      	ldr	r2, [pc, #308]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000de6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dee:	f7ff fdb7 	bl	8000960 <HAL_GetTick>
 8000df2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df4:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df8:	f013 0f02 	tst.w	r3, #2
 8000dfc:	d137      	bne.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fdaf 	bl	8000960 <HAL_GetTick>
 8000e02:	1b40      	subs	r0, r0, r5
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d9f5      	bls.n	8000df4 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000e08:	2003      	movs	r0, #3
 8000e0a:	e11b      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0c:	4a43      	ldr	r2, [pc, #268]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e0e:	6813      	ldr	r3, [r2, #0]
 8000e10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e14:	6921      	ldr	r1, [r4, #16]
 8000e16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e7dc      	b.n	8000dd8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000e1e:	4a3f      	ldr	r2, [pc, #252]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e20:	6813      	ldr	r3, [r2, #0]
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e28:	f7ff fd9a 	bl	8000960 <HAL_GetTick>
 8000e2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f013 0f02 	tst.w	r3, #2
 8000e36:	d0cf      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e38:	f7ff fd92 	bl	8000960 <HAL_GetTick>
 8000e3c:	1b40      	subs	r0, r0, r5
 8000e3e:	2802      	cmp	r0, #2
 8000e40:	d9f5      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
 8000e44:	e0fe      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e46:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e48:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e50:	f7ff fd86 	bl	8000960 <HAL_GetTick>
 8000e54:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e5a:	f013 0f02 	tst.w	r3, #2
 8000e5e:	d006      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fd7e 	bl	8000960 <HAL_GetTick>
 8000e64:	1b40      	subs	r0, r0, r5
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d9f5      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e0ea      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	f013 0f04 	tst.w	r3, #4
 8000e74:	d07e      	beq.n	8000f74 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e7e:	d11e      	bne.n	8000ebe <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e94:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_RCC_OscConfig+0x2a4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e9e:	d010      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	68a3      	ldr	r3, [r4, #8]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d021      	beq.n	8000eea <HAL_RCC_OscConfig+0x26e>
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d13c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x2a8>
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000eae:	f022 0201 	bic.w	r2, r2, #1
 8000eb2:	671a      	str	r2, [r3, #112]	; 0x70
 8000eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000eb6:	f022 0204 	bic.w	r2, r2, #4
 8000eba:	671a      	str	r2, [r3, #112]	; 0x70
 8000ebc:	e01a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	e7e9      	b.n	8000e96 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_RCC_OscConfig+0x2a4>)
 8000ec4:	6813      	ldr	r3, [r2, #0]
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fd48 	bl	8000960 <HAL_GetTick>
 8000ed0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_RCC_OscConfig+0x2a4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000eda:	d1e1      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000edc:	f7ff fd40 	bl	8000960 <HAL_GetTick>
 8000ee0:	1b80      	subs	r0, r0, r6
 8000ee2:	2864      	cmp	r0, #100	; 0x64
 8000ee4:	d9f5      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e0ac      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000eec:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ef4:	68a3      	ldr	r3, [r4, #8]
 8000ef6:	b35b      	cbz	r3, 8000f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fd32 	bl	8000960 <HAL_GetTick>
 8000efc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f02:	f013 0f02 	tst.w	r3, #2
 8000f06:	d134      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f08:	f7ff fd2a 	bl	8000960 <HAL_GetTick>
 8000f0c:	1b80      	subs	r0, r0, r6
 8000f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f12:	4298      	cmp	r0, r3
 8000f14:	d9f3      	bls.n	8000efe <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000f16:	2003      	movs	r0, #3
 8000f18:	e094      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d009      	beq.n	8000f3c <HAL_RCC_OscConfig+0x2c0>
 8000f28:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	671a      	str	r2, [r3, #112]	; 0x70
 8000f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f34:	f022 0204 	bic.w	r2, r2, #4
 8000f38:	671a      	str	r2, [r3, #112]	; 0x70
 8000f3a:	e7db      	b.n	8000ef4 <HAL_RCC_OscConfig+0x278>
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000f3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f40:	f042 0204 	orr.w	r2, r2, #4
 8000f44:	671a      	str	r2, [r3, #112]	; 0x70
 8000f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f48:	f042 0201 	orr.w	r2, r2, #1
 8000f4c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f4e:	e7d1      	b.n	8000ef4 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f50:	f7ff fd06 	bl	8000960 <HAL_GetTick>
 8000f54:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5a:	f013 0f02 	tst.w	r3, #2
 8000f5e:	d008      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f60:	f7ff fcfe 	bl	8000960 <HAL_GetTick>
 8000f64:	1b80      	subs	r0, r0, r6
 8000f66:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d9f3      	bls.n	8000f56 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8000f6e:	2003      	movs	r0, #3
 8000f70:	e068      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f72:	b9f5      	cbnz	r5, 8000fb2 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f74:	69a3      	ldr	r3, [r4, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d063      	beq.n	8001042 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7a:	4a34      	ldr	r2, [pc, #208]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000f7c:	6892      	ldr	r2, [r2, #8]
 8000f7e:	f002 020c 	and.w	r2, r2, #12
 8000f82:	2a08      	cmp	r2, #8
 8000f84:	d060      	beq.n	8001048 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d019      	beq.n	8000fbe <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fce4 	bl	8000960 <HAL_GetTick>
 8000f98:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fa2:	d048      	beq.n	8001036 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa4:	f7ff fcdc 	bl	8000960 <HAL_GetTick>
 8000fa8:	1b00      	subs	r0, r0, r4
 8000faa:	2802      	cmp	r0, #2
 8000fac:	d9f5      	bls.n	8000f9a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000fae:	2003      	movs	r0, #3
 8000fb0:	e048      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb2:	4a26      	ldr	r2, [pc, #152]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000fb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	e7da      	b.n	8000f74 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcca 	bl	8000960 <HAL_GetTick>
 8000fcc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fd6:	d006      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd8:	f7ff fcc2 	bl	8000960 <HAL_GetTick>
 8000fdc:	1b40      	subs	r0, r0, r5
 8000fde:	2802      	cmp	r0, #2
 8000fe0:	d9f5      	bls.n	8000fce <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	e02e      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe6:	69e3      	ldr	r3, [r4, #28]
 8000fe8:	6a22      	ldr	r2, [r4, #32]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ff2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ff4:	0852      	lsrs	r2, r2, #1
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ffc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ffe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001002:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001004:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 800100a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001012:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001014:	f7ff fca4 	bl	8000960 <HAL_GetTick>
 8001018:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_RCC_OscConfig+0x3d0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001022:	d106      	bne.n	8001032 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff fc9c 	bl	8000960 <HAL_GetTick>
 8001028:	1b00      	subs	r0, r0, r4
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f5      	bls.n	800101a <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001032:	2000      	movs	r0, #0
 8001034:	e006      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
 8001036:	2000      	movs	r0, #0
 8001038:	e004      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
}
 800103c:	4770      	bx	lr
        return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
 8001040:	e000      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001042:	2000      	movs	r0, #0
}
 8001044:	b002      	add	sp, #8
 8001046:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	e7fb      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b04      	cmp	r3, #4
 800105a:	d044      	beq.n	80010e6 <HAL_RCC_GetSysClockFreq+0x96>
 800105c:	2b08      	cmp	r3, #8
 800105e:	d001      	beq.n	8001064 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001060:	4823      	ldr	r0, [pc, #140]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001062:	4770      	bx	lr
{
 8001064:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001076:	d013      	beq.n	80010a0 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001080:	2300      	movs	r3, #0
 8001082:	481c      	ldr	r0, [pc, #112]	; (80010f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001084:	fba1 0100 	umull	r0, r1, r1, r0
 8001088:	f7ff f8d6 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001094:	3301      	adds	r3, #1
 8001096:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001098:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800109c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80010a8:	461e      	mov	r6, r3
 80010aa:	2700      	movs	r7, #0
 80010ac:	015c      	lsls	r4, r3, #5
 80010ae:	2500      	movs	r5, #0
 80010b0:	1ae4      	subs	r4, r4, r3
 80010b2:	eb65 0507 	sbc.w	r5, r5, r7
 80010b6:	01a9      	lsls	r1, r5, #6
 80010b8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80010bc:	01a0      	lsls	r0, r4, #6
 80010be:	1b00      	subs	r0, r0, r4
 80010c0:	eb61 0105 	sbc.w	r1, r1, r5
 80010c4:	00cb      	lsls	r3, r1, #3
 80010c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010ca:	00c4      	lsls	r4, r0, #3
 80010cc:	19a0      	adds	r0, r4, r6
 80010ce:	eb43 0107 	adc.w	r1, r3, r7
 80010d2:	028b      	lsls	r3, r1, #10
 80010d4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80010d8:	0284      	lsls	r4, r0, #10
 80010da:	4620      	mov	r0, r4
 80010dc:	4619      	mov	r1, r3
 80010de:	2300      	movs	r3, #0
 80010e0:	f7ff f8aa 	bl	8000238 <__aeabi_uldivmod>
 80010e4:	e7d2      	b.n	800108c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	00f42400 	.word	0x00f42400
 80010f4:	017d7840 	.word	0x017d7840

080010f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80010f8:	2800      	cmp	r0, #0
 80010fa:	f000 80a2 	beq.w	8001242 <HAL_RCC_ClockConfig+0x14a>
{
 80010fe:	b570      	push	{r4, r5, r6, lr}
 8001100:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001102:	4b52      	ldr	r3, [pc, #328]	; (800124c <HAL_RCC_ClockConfig+0x154>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	428b      	cmp	r3, r1
 800110c:	d20c      	bcs.n	8001128 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4a4f      	ldr	r2, [pc, #316]	; (800124c <HAL_RCC_ClockConfig+0x154>)
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f023 030f 	bic.w	r3, r3, #15
 8001116:	430b      	orrs	r3, r1
 8001118:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	428b      	cmp	r3, r1
 8001122:	d001      	beq.n	8001128 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
}
 8001126:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	f013 0f02 	tst.w	r3, #2
 800112e:	d017      	beq.n	8001160 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	f013 0f04 	tst.w	r3, #4
 8001134:	d004      	beq.n	8001140 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001136:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001138:	6893      	ldr	r3, [r2, #8]
 800113a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800113e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	f013 0f08 	tst.w	r3, #8
 8001146:	d004      	beq.n	8001152 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001148:	4a41      	ldr	r2, [pc, #260]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 800114a:	6893      	ldr	r3, [r2, #8]
 800114c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001150:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001154:	6893      	ldr	r3, [r2, #8]
 8001156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800115a:	68a0      	ldr	r0, [r4, #8]
 800115c:	4303      	orrs	r3, r0
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f013 0f01 	tst.w	r3, #1
 8001168:	d031      	beq.n	80011ce <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	6863      	ldr	r3, [r4, #4]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d020      	beq.n	80011b2 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001170:	2b02      	cmp	r3, #2
 8001172:	d025      	beq.n	80011c0 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	4a36      	ldr	r2, [pc, #216]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	f012 0f02 	tst.w	r2, #2
 800117c:	d063      	beq.n	8001246 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117e:	4934      	ldr	r1, [pc, #208]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001180:	688a      	ldr	r2, [r1, #8]
 8001182:	f022 0203 	bic.w	r2, r2, #3
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800118a:	f7ff fbe9 	bl	8000960 <HAL_GetTick>
 800118e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	6862      	ldr	r2, [r4, #4]
 800119a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800119e:	d016      	beq.n	80011ce <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a0:	f7ff fbde 	bl	8000960 <HAL_GetTick>
 80011a4:	1b80      	subs	r0, r0, r6
 80011a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d9f0      	bls.n	8001190 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80011ae:	2003      	movs	r0, #3
 80011b0:	e7b9      	b.n	8001126 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80011ba:	d1e0      	bne.n	800117e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
 80011be:	e7b2      	b.n	8001126 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c0:	4a23      	ldr	r2, [pc, #140]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80011c8:	d1d9      	bne.n	800117e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	e7ab      	b.n	8001126 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_RCC_ClockConfig+0x154>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	42ab      	cmp	r3, r5
 80011d8:	d90c      	bls.n	80011f4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_RCC_ClockConfig+0x154>)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f023 030f 	bic.w	r3, r3, #15
 80011e2:	432b      	orrs	r3, r5
 80011e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	6813      	ldr	r3, [r2, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	42ab      	cmp	r3, r5
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
 80011f2:	e798      	b.n	8001126 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	f013 0f04 	tst.w	r3, #4
 80011fa:	d006      	beq.n	800120a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 80011fe:	6893      	ldr	r3, [r2, #8]
 8001200:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001204:	68e1      	ldr	r1, [r4, #12]
 8001206:	430b      	orrs	r3, r1
 8001208:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f013 0f08 	tst.w	r3, #8
 8001210:	d007      	beq.n	8001222 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001214:	6893      	ldr	r3, [r2, #8]
 8001216:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800121a:	6921      	ldr	r1, [r4, #16]
 800121c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001220:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001222:	f7ff ff15 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x158>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x15c>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	40d8      	lsrs	r0, r3
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_RCC_ClockConfig+0x160>)
 8001236:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff fb4b 	bl	80008d4 <HAL_InitTick>
  return HAL_OK;
 800123e:	2000      	movs	r0, #0
 8001240:	e771      	b.n	8001126 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
}
 8001244:	4770      	bx	lr
        return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
 8001248:	e76d      	b.n	8001126 <HAL_RCC_ClockConfig+0x2e>
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00
 8001250:	40023800 	.word	0x40023800
 8001254:	08002380 	.word	0x08002380
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800125c:	4b01      	ldr	r3, [pc, #4]	; (8001264 <HAL_RCC_GetHCLKFreq+0x8>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000

08001268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001268:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800126a:	f7ff fff7 	bl	800125c <HAL_RCC_GetHCLKFreq>
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
}
 800127a:	40d8      	lsrs	r0, r3
 800127c:	bd08      	pop	{r3, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	08002390 	.word	0x08002390

08001288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001288:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800128a:	f7ff ffe7 	bl	800125c <HAL_RCC_GetHCLKFreq>
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001296:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
}
 800129a:	40d8      	lsrs	r0, r3
 800129c:	bd08      	pop	{r3, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	08002390 	.word	0x08002390

080012a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012ac:	6883      	ldr	r3, [r0, #8]
 80012ae:	6902      	ldr	r2, [r0, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6942      	ldr	r2, [r0, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	69c2      	ldr	r2, [r0, #28]
 80012b8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80012ba:	6801      	ldr	r1, [r0, #0]
 80012bc:	6808      	ldr	r0, [r1, #0]
 80012be:	4a99      	ldr	r2, [pc, #612]	; (8001524 <UART_SetConfig+0x27c>)
 80012c0:	4002      	ands	r2, r0
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012c6:	6822      	ldr	r2, [r4, #0]
 80012c8:	6853      	ldr	r3, [r2, #4]
 80012ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ce:	68e1      	ldr	r1, [r4, #12]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80012d4:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80012d6:	6a23      	ldr	r3, [r4, #32]
 80012d8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80012da:	6821      	ldr	r1, [r4, #0]
 80012dc:	688b      	ldr	r3, [r1, #8]
 80012de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	4a8f      	ldr	r2, [pc, #572]	; (8001528 <UART_SetConfig+0x280>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d018      	beq.n	8001320 <UART_SetConfig+0x78>
 80012ee:	4a8f      	ldr	r2, [pc, #572]	; (800152c <UART_SetConfig+0x284>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d028      	beq.n	8001346 <UART_SetConfig+0x9e>
 80012f4:	4a8e      	ldr	r2, [pc, #568]	; (8001530 <UART_SetConfig+0x288>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d03d      	beq.n	8001376 <UART_SetConfig+0xce>
 80012fa:	4a8e      	ldr	r2, [pc, #568]	; (8001534 <UART_SetConfig+0x28c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d050      	beq.n	80013a2 <UART_SetConfig+0xfa>
 8001300:	4a8d      	ldr	r2, [pc, #564]	; (8001538 <UART_SetConfig+0x290>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d062      	beq.n	80013cc <UART_SetConfig+0x124>
 8001306:	4a8d      	ldr	r2, [pc, #564]	; (800153c <UART_SetConfig+0x294>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d077      	beq.n	80013fc <UART_SetConfig+0x154>
 800130c:	4a8c      	ldr	r2, [pc, #560]	; (8001540 <UART_SetConfig+0x298>)
 800130e:	4293      	cmp	r3, r2
 8001310:	f000 808c 	beq.w	800142c <UART_SetConfig+0x184>
 8001314:	4a8b      	ldr	r2, [pc, #556]	; (8001544 <UART_SetConfig+0x29c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f000 80a0 	beq.w	800145c <UART_SetConfig+0x1b4>
 800131c:	2310      	movs	r3, #16
 800131e:	e0b6      	b.n	800148e <UART_SetConfig+0x1e6>
 8001320:	4b89      	ldr	r3, [pc, #548]	; (8001548 <UART_SetConfig+0x2a0>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d809      	bhi.n	8001342 <UART_SetConfig+0x9a>
 800132e:	e8df f003 	tbb	[pc, r3]
 8001332:	0402      	.short	0x0402
 8001334:	06ad      	.short	0x06ad
 8001336:	2301      	movs	r3, #1
 8001338:	e0a9      	b.n	800148e <UART_SetConfig+0x1e6>
 800133a:	2304      	movs	r3, #4
 800133c:	e0a7      	b.n	800148e <UART_SetConfig+0x1e6>
 800133e:	2308      	movs	r3, #8
 8001340:	e0a5      	b.n	800148e <UART_SetConfig+0x1e6>
 8001342:	2310      	movs	r3, #16
 8001344:	e0a3      	b.n	800148e <UART_SetConfig+0x1e6>
 8001346:	4b80      	ldr	r3, [pc, #512]	; (8001548 <UART_SetConfig+0x2a0>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b0c      	cmp	r3, #12
 8001352:	d80e      	bhi.n	8001372 <UART_SetConfig+0xca>
 8001354:	e8df f003 	tbb	[pc, r3]
 8001358:	0d0d0d07 	.word	0x0d0d0d07
 800135c:	0d0d0d09 	.word	0x0d0d0d09
 8001360:	0d0d0da9 	.word	0x0d0d0da9
 8001364:	0b          	.byte	0x0b
 8001365:	00          	.byte	0x00
 8001366:	2300      	movs	r3, #0
 8001368:	e091      	b.n	800148e <UART_SetConfig+0x1e6>
 800136a:	2304      	movs	r3, #4
 800136c:	e08f      	b.n	800148e <UART_SetConfig+0x1e6>
 800136e:	2308      	movs	r3, #8
 8001370:	e08d      	b.n	800148e <UART_SetConfig+0x1e6>
 8001372:	2310      	movs	r3, #16
 8001374:	e08b      	b.n	800148e <UART_SetConfig+0x1e6>
 8001376:	4b74      	ldr	r3, [pc, #464]	; (8001548 <UART_SetConfig+0x2a0>)
 8001378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001380:	2b10      	cmp	r3, #16
 8001382:	d00a      	beq.n	800139a <UART_SetConfig+0xf2>
 8001384:	d906      	bls.n	8001394 <UART_SetConfig+0xec>
 8001386:	2b20      	cmp	r3, #32
 8001388:	f000 8091 	beq.w	80014ae <UART_SetConfig+0x206>
 800138c:	2b30      	cmp	r3, #48	; 0x30
 800138e:	d106      	bne.n	800139e <UART_SetConfig+0xf6>
 8001390:	2308      	movs	r3, #8
 8001392:	e07c      	b.n	800148e <UART_SetConfig+0x1e6>
 8001394:	b91b      	cbnz	r3, 800139e <UART_SetConfig+0xf6>
 8001396:	2300      	movs	r3, #0
 8001398:	e079      	b.n	800148e <UART_SetConfig+0x1e6>
 800139a:	2304      	movs	r3, #4
 800139c:	e077      	b.n	800148e <UART_SetConfig+0x1e6>
 800139e:	2310      	movs	r3, #16
 80013a0:	e075      	b.n	800148e <UART_SetConfig+0x1e6>
 80013a2:	4b69      	ldr	r3, [pc, #420]	; (8001548 <UART_SetConfig+0x2a0>)
 80013a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d009      	beq.n	80013c4 <UART_SetConfig+0x11c>
 80013b0:	d905      	bls.n	80013be <UART_SetConfig+0x116>
 80013b2:	2b80      	cmp	r3, #128	; 0x80
 80013b4:	d07d      	beq.n	80014b2 <UART_SetConfig+0x20a>
 80013b6:	2bc0      	cmp	r3, #192	; 0xc0
 80013b8:	d106      	bne.n	80013c8 <UART_SetConfig+0x120>
 80013ba:	2308      	movs	r3, #8
 80013bc:	e067      	b.n	800148e <UART_SetConfig+0x1e6>
 80013be:	b91b      	cbnz	r3, 80013c8 <UART_SetConfig+0x120>
 80013c0:	2300      	movs	r3, #0
 80013c2:	e064      	b.n	800148e <UART_SetConfig+0x1e6>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e062      	b.n	800148e <UART_SetConfig+0x1e6>
 80013c8:	2310      	movs	r3, #16
 80013ca:	e060      	b.n	800148e <UART_SetConfig+0x1e6>
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <UART_SetConfig+0x2a0>)
 80013ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013da:	d00b      	beq.n	80013f4 <UART_SetConfig+0x14c>
 80013dc:	d907      	bls.n	80013ee <UART_SetConfig+0x146>
 80013de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e2:	d068      	beq.n	80014b6 <UART_SetConfig+0x20e>
 80013e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013e8:	d106      	bne.n	80013f8 <UART_SetConfig+0x150>
 80013ea:	2308      	movs	r3, #8
 80013ec:	e04f      	b.n	800148e <UART_SetConfig+0x1e6>
 80013ee:	b91b      	cbnz	r3, 80013f8 <UART_SetConfig+0x150>
 80013f0:	2300      	movs	r3, #0
 80013f2:	e04c      	b.n	800148e <UART_SetConfig+0x1e6>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e04a      	b.n	800148e <UART_SetConfig+0x1e6>
 80013f8:	2310      	movs	r3, #16
 80013fa:	e048      	b.n	800148e <UART_SetConfig+0x1e6>
 80013fc:	4b52      	ldr	r3, [pc, #328]	; (8001548 <UART_SetConfig+0x2a0>)
 80013fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	d00b      	beq.n	8001424 <UART_SetConfig+0x17c>
 800140c:	d907      	bls.n	800141e <UART_SetConfig+0x176>
 800140e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001412:	d052      	beq.n	80014ba <UART_SetConfig+0x212>
 8001414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001418:	d106      	bne.n	8001428 <UART_SetConfig+0x180>
 800141a:	2308      	movs	r3, #8
 800141c:	e037      	b.n	800148e <UART_SetConfig+0x1e6>
 800141e:	b91b      	cbnz	r3, 8001428 <UART_SetConfig+0x180>
 8001420:	2301      	movs	r3, #1
 8001422:	e034      	b.n	800148e <UART_SetConfig+0x1e6>
 8001424:	2304      	movs	r3, #4
 8001426:	e032      	b.n	800148e <UART_SetConfig+0x1e6>
 8001428:	2310      	movs	r3, #16
 800142a:	e030      	b.n	800148e <UART_SetConfig+0x1e6>
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <UART_SetConfig+0x2a0>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143a:	d00b      	beq.n	8001454 <UART_SetConfig+0x1ac>
 800143c:	d907      	bls.n	800144e <UART_SetConfig+0x1a6>
 800143e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001442:	d03c      	beq.n	80014be <UART_SetConfig+0x216>
 8001444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001448:	d106      	bne.n	8001458 <UART_SetConfig+0x1b0>
 800144a:	2308      	movs	r3, #8
 800144c:	e01f      	b.n	800148e <UART_SetConfig+0x1e6>
 800144e:	b91b      	cbnz	r3, 8001458 <UART_SetConfig+0x1b0>
 8001450:	2300      	movs	r3, #0
 8001452:	e01c      	b.n	800148e <UART_SetConfig+0x1e6>
 8001454:	2304      	movs	r3, #4
 8001456:	e01a      	b.n	800148e <UART_SetConfig+0x1e6>
 8001458:	2310      	movs	r3, #16
 800145a:	e018      	b.n	800148e <UART_SetConfig+0x1e6>
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <UART_SetConfig+0x2a0>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800146a:	d00b      	beq.n	8001484 <UART_SetConfig+0x1dc>
 800146c:	d907      	bls.n	800147e <UART_SetConfig+0x1d6>
 800146e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001472:	d026      	beq.n	80014c2 <UART_SetConfig+0x21a>
 8001474:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001478:	d106      	bne.n	8001488 <UART_SetConfig+0x1e0>
 800147a:	2308      	movs	r3, #8
 800147c:	e007      	b.n	800148e <UART_SetConfig+0x1e6>
 800147e:	b91b      	cbnz	r3, 8001488 <UART_SetConfig+0x1e0>
 8001480:	2300      	movs	r3, #0
 8001482:	e004      	b.n	800148e <UART_SetConfig+0x1e6>
 8001484:	2304      	movs	r3, #4
 8001486:	e002      	b.n	800148e <UART_SetConfig+0x1e6>
 8001488:	2310      	movs	r3, #16
 800148a:	e000      	b.n	800148e <UART_SetConfig+0x1e6>
 800148c:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800148e:	69e2      	ldr	r2, [r4, #28]
 8001490:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001494:	d017      	beq.n	80014c6 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001496:	2b08      	cmp	r3, #8
 8001498:	f200 80b3 	bhi.w	8001602 <UART_SetConfig+0x35a>
 800149c:	e8df f003 	tbb	[pc, r3]
 80014a0:	b1958b76 	.word	0xb1958b76
 80014a4:	b1b1b19e 	.word	0xb1b1b19e
 80014a8:	a8          	.byte	0xa8
 80014a9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014aa:	2302      	movs	r3, #2
 80014ac:	e7ef      	b.n	800148e <UART_SetConfig+0x1e6>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e7ed      	b.n	800148e <UART_SetConfig+0x1e6>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e7eb      	b.n	800148e <UART_SetConfig+0x1e6>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e7e9      	b.n	800148e <UART_SetConfig+0x1e6>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e7e7      	b.n	800148e <UART_SetConfig+0x1e6>
 80014be:	2302      	movs	r3, #2
 80014c0:	e7e5      	b.n	800148e <UART_SetConfig+0x1e6>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e7e3      	b.n	800148e <UART_SetConfig+0x1e6>
    switch (clocksource)
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d85d      	bhi.n	8001586 <UART_SetConfig+0x2de>
 80014ca:	e8df f003 	tbb	[pc, r3]
 80014ce:	1f05      	.short	0x1f05
 80014d0:	5c485c3f 	.word	0x5c485c3f
 80014d4:	5c5c      	.short	0x5c5c
 80014d6:	53          	.byte	0x53
 80014d7:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014d8:	f7ff fec6 	bl	8001268 <HAL_RCC_GetPCLK1Freq>
 80014dc:	6862      	ldr	r2, [r4, #4]
 80014de:	0853      	lsrs	r3, r2, #1
 80014e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80014e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80014ea:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80014ec:	f1a3 0110 	sub.w	r1, r3, #16
 80014f0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80014f4:	4291      	cmp	r1, r2
 80014f6:	f200 8087 	bhi.w	8001608 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001500:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001504:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	60d3      	str	r3, [r2, #12]
 800150a:	e050      	b.n	80015ae <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800150c:	f7ff febc 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001510:	6862      	ldr	r2, [r4, #4]
 8001512:	0853      	lsrs	r3, r2, #1
 8001514:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001518:	fbb3 f3f2 	udiv	r3, r3, r2
 800151c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800151e:	2000      	movs	r0, #0
        break;
 8001520:	e7e4      	b.n	80014ec <UART_SetConfig+0x244>
 8001522:	bf00      	nop
 8001524:	efff69f3 	.word	0xefff69f3
 8001528:	40011000 	.word	0x40011000
 800152c:	40004400 	.word	0x40004400
 8001530:	40004800 	.word	0x40004800
 8001534:	40004c00 	.word	0x40004c00
 8001538:	40005000 	.word	0x40005000
 800153c:	40011400 	.word	0x40011400
 8001540:	40007800 	.word	0x40007800
 8001544:	40007c00 	.word	0x40007c00
 8001548:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800154c:	6862      	ldr	r2, [r4, #4]
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <UART_SetConfig+0x368>)
 8001550:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001554:	fbb3 f3f2 	udiv	r3, r3, r2
 8001558:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800155a:	2000      	movs	r0, #0
        break;
 800155c:	e7c6      	b.n	80014ec <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800155e:	f7ff fd77 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8001562:	6862      	ldr	r2, [r4, #4]
 8001564:	0853      	lsrs	r3, r2, #1
 8001566:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800156a:	fbb3 f3f2 	udiv	r3, r3, r2
 800156e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001570:	2000      	movs	r0, #0
        break;
 8001572:	e7bb      	b.n	80014ec <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001574:	6862      	ldr	r2, [r4, #4]
 8001576:	0853      	lsrs	r3, r2, #1
 8001578:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800157c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001580:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001582:	2000      	movs	r0, #0
        break;
 8001584:	e7b2      	b.n	80014ec <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8001586:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001588:	2300      	movs	r3, #0
 800158a:	e7af      	b.n	80014ec <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800158c:	f7ff fe6c 	bl	8001268 <HAL_RCC_GetPCLK1Freq>
 8001590:	6862      	ldr	r2, [r4, #4]
 8001592:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001596:	fbb3 f3f2 	udiv	r3, r3, r2
 800159a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800159c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800159e:	f1a3 0110 	sub.w	r1, r3, #16
 80015a2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80015a6:	4291      	cmp	r1, r2
 80015a8:	d830      	bhi.n	800160c <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 80015aa:	6822      	ldr	r2, [r4, #0]
 80015ac:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80015b2:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80015b4:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80015b6:	f7ff fe67 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 80015ba:	6862      	ldr	r2, [r4, #4]
 80015bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80015c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80015c6:	2000      	movs	r0, #0
        break;
 80015c8:	e7e9      	b.n	800159e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80015ca:	6862      	ldr	r2, [r4, #4]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <UART_SetConfig+0x36c>)
 80015ce:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80015d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80015d8:	2000      	movs	r0, #0
        break;
 80015da:	e7e0      	b.n	800159e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80015dc:	f7ff fd38 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 80015e0:	6862      	ldr	r2, [r4, #4]
 80015e2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80015e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80015ea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80015ec:	2000      	movs	r0, #0
        break;
 80015ee:	e7d6      	b.n	800159e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80015f0:	6862      	ldr	r2, [r4, #4]
 80015f2:	0853      	lsrs	r3, r2, #1
 80015f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80015fe:	2000      	movs	r0, #0
        break;
 8001600:	e7cd      	b.n	800159e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8001602:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001604:	2300      	movs	r3, #0
 8001606:	e7ca      	b.n	800159e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001608:	2001      	movs	r0, #1
 800160a:	e7d0      	b.n	80015ae <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 800160c:	2001      	movs	r0, #1
 800160e:	e7ce      	b.n	80015ae <UART_SetConfig+0x306>
 8001610:	01e84800 	.word	0x01e84800
 8001614:	00f42400 	.word	0x00f42400

08001618 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001618:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800161a:	f013 0f01 	tst.w	r3, #1
 800161e:	d006      	beq.n	800162e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001620:	6802      	ldr	r2, [r0, #0]
 8001622:	6853      	ldr	r3, [r2, #4]
 8001624:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001628:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800162a:	430b      	orrs	r3, r1
 800162c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800162e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001630:	f013 0f02 	tst.w	r3, #2
 8001634:	d006      	beq.n	8001644 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001636:	6802      	ldr	r2, [r0, #0]
 8001638:	6853      	ldr	r3, [r2, #4]
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001640:	430b      	orrs	r3, r1
 8001642:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001644:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001646:	f013 0f04 	tst.w	r3, #4
 800164a:	d006      	beq.n	800165a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800164c:	6802      	ldr	r2, [r0, #0]
 800164e:	6853      	ldr	r3, [r2, #4]
 8001650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001654:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001656:	430b      	orrs	r3, r1
 8001658:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800165a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800165c:	f013 0f08 	tst.w	r3, #8
 8001660:	d006      	beq.n	8001670 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001662:	6802      	ldr	r2, [r0, #0]
 8001664:	6853      	ldr	r3, [r2, #4]
 8001666:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800166a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800166c:	430b      	orrs	r3, r1
 800166e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001670:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001672:	f013 0f10 	tst.w	r3, #16
 8001676:	d006      	beq.n	8001686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	6893      	ldr	r3, [r2, #8]
 800167c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001680:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001682:	430b      	orrs	r3, r1
 8001684:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001686:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001688:	f013 0f20 	tst.w	r3, #32
 800168c:	d006      	beq.n	800169c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800168e:	6802      	ldr	r2, [r0, #0]
 8001690:	6893      	ldr	r3, [r2, #8]
 8001692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001696:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001698:	430b      	orrs	r3, r1
 800169a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800169c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800169e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80016a2:	d00a      	beq.n	80016ba <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80016a4:	6802      	ldr	r2, [r0, #0]
 80016a6:	6853      	ldr	r3, [r2, #4]
 80016a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016ae:	430b      	orrs	r3, r1
 80016b0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80016b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016b8:	d00b      	beq.n	80016d2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80016ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016c0:	d006      	beq.n	80016d0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80016c2:	6802      	ldr	r2, [r0, #0]
 80016c4:	6853      	ldr	r3, [r2, #4]
 80016c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80016ca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6053      	str	r3, [r2, #4]
  }
}
 80016d0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80016d2:	6802      	ldr	r2, [r0, #0]
 80016d4:	6853      	ldr	r3, [r2, #4]
 80016d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80016da:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80016dc:	430b      	orrs	r3, r1
 80016de:	6053      	str	r3, [r2, #4]
 80016e0:	e7eb      	b.n	80016ba <UART_AdvFeatureConfig+0xa2>

080016e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016e6:	4605      	mov	r5, r0
 80016e8:	460f      	mov	r7, r1
 80016ea:	4616      	mov	r6, r2
 80016ec:	4698      	mov	r8, r3
 80016ee:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	ea37 0303 	bics.w	r3, r7, r3
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	42b3      	cmp	r3, r6
 8001700:	d11c      	bne.n	800173c <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001702:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001706:	d0f3      	beq.n	80016f0 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001708:	f7ff f92a 	bl	8000960 <HAL_GetTick>
 800170c:	eba0 0008 	sub.w	r0, r0, r8
 8001710:	42a0      	cmp	r0, r4
 8001712:	d801      	bhi.n	8001718 <UART_WaitOnFlagUntilTimeout+0x36>
 8001714:	2c00      	cmp	r4, #0
 8001716:	d1eb      	bne.n	80016f0 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001718:	682a      	ldr	r2, [r5, #0]
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001720:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001722:	682a      	ldr	r2, [r5, #0]
 8001724:	6893      	ldr	r3, [r2, #8]
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 800172c:	2320      	movs	r3, #32
 800172e:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001730:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001732:	2300      	movs	r3, #0
 8001734:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8001738:	2003      	movs	r0, #3
 800173a:	e000      	b.n	800173e <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 800173c:	2000      	movs	r0, #0
}
 800173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001742 <HAL_UART_Transmit>:
{
 8001742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800174a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800174c:	2b20      	cmp	r3, #32
 800174e:	d159      	bne.n	8001804 <HAL_UART_Transmit+0xc2>
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
 8001754:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001756:	fab2 f382 	clz	r3, r2
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2900      	cmp	r1, #0
 800175e:	bf08      	it	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d153      	bne.n	800180e <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8001766:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800176a:	2b01      	cmp	r3, #1
 800176c:	d051      	beq.n	8001812 <HAL_UART_Transmit+0xd0>
 800176e:	2301      	movs	r3, #1
 8001770:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001778:	2321      	movs	r3, #33	; 0x21
 800177a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800177c:	f7ff f8f0 	bl	8000960 <HAL_GetTick>
 8001780:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001782:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001786:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800178a:	68a3      	ldr	r3, [r4, #8]
 800178c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001790:	d002      	beq.n	8001798 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8001792:	f04f 0800 	mov.w	r8, #0
 8001796:	e010      	b.n	80017ba <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001798:	6923      	ldr	r3, [r4, #16]
 800179a:	b30b      	cbz	r3, 80017e0 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 800179c:	f04f 0800 	mov.w	r8, #0
 80017a0:	e00b      	b.n	80017ba <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017a2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ac:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80017ae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80017ba:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b18b      	cbz	r3, 80017e6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017c2:	9600      	str	r6, [sp, #0]
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff ff89 	bl	80016e2 <UART_WaitOnFlagUntilTimeout>
 80017d0:	bb08      	cbnz	r0, 8001816 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80017d2:	2d00      	cmp	r5, #0
 80017d4:	d0e5      	beq.n	80017a2 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80017d6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
 80017de:	e7e6      	b.n	80017ae <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 80017e0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80017e2:	2500      	movs	r5, #0
 80017e4:	e7e9      	b.n	80017ba <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017e6:	9600      	str	r6, [sp, #0]
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	2140      	movs	r1, #64	; 0x40
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff ff77 	bl	80016e2 <UART_WaitOnFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b980      	cbnz	r0, 800181a <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 80017f8:	2220      	movs	r2, #32
 80017fa:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8001802:	e000      	b.n	8001806 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
}
 8001806:	4618      	mov	r0, r3
 8001808:	b002      	add	sp, #8
 800180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e7f9      	b.n	8001806 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001812:	2302      	movs	r3, #2
 8001814:	e7f7      	b.n	8001806 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e7f5      	b.n	8001806 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e7f3      	b.n	8001806 <HAL_UART_Transmit+0xc4>

0800181e <HAL_UART_Receive>:
{
 800181e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001826:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001828:	2b20      	cmp	r3, #32
 800182a:	d17e      	bne.n	800192a <HAL_UART_Receive+0x10c>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001832:	fab2 f382 	clz	r3, r2
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2900      	cmp	r1, #0
 800183a:	bf08      	it	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d177      	bne.n	8001932 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001842:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001846:	2b01      	cmp	r3, #1
 8001848:	d075      	beq.n	8001936 <HAL_UART_Receive+0x118>
 800184a:	2301      	movs	r3, #1
 800184c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001854:	2322      	movs	r3, #34	; 0x22
 8001856:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001858:	f7ff f882 	bl	8000960 <HAL_GetTick>
 800185c:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 800185e:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001862:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001866:	68a3      	ldr	r3, [r4, #8]
 8001868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186c:	d006      	beq.n	800187c <HAL_UART_Receive+0x5e>
 800186e:	b9a3      	cbnz	r3, 800189a <HAL_UART_Receive+0x7c>
 8001870:	6922      	ldr	r2, [r4, #16]
 8001872:	b972      	cbnz	r2, 8001892 <HAL_UART_Receive+0x74>
 8001874:	22ff      	movs	r2, #255	; 0xff
 8001876:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800187a:	e014      	b.n	80018a6 <HAL_UART_Receive+0x88>
 800187c:	6922      	ldr	r2, [r4, #16]
 800187e:	b922      	cbnz	r2, 800188a <HAL_UART_Receive+0x6c>
 8001880:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001884:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001888:	e00d      	b.n	80018a6 <HAL_UART_Receive+0x88>
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001890:	e009      	b.n	80018a6 <HAL_UART_Receive+0x88>
 8001892:	227f      	movs	r2, #127	; 0x7f
 8001894:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001898:	e005      	b.n	80018a6 <HAL_UART_Receive+0x88>
 800189a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800189e:	d00a      	beq.n	80018b6 <HAL_UART_Receive+0x98>
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80018a6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ae:	d00c      	beq.n	80018ca <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 80018b0:	f04f 0900 	mov.w	r9, #0
 80018b4:	e01d      	b.n	80018f2 <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 80018b6:	6922      	ldr	r2, [r4, #16]
 80018b8:	b91a      	cbnz	r2, 80018c2 <HAL_UART_Receive+0xa4>
 80018ba:	227f      	movs	r2, #127	; 0x7f
 80018bc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80018c0:	e7f1      	b.n	80018a6 <HAL_UART_Receive+0x88>
 80018c2:	223f      	movs	r2, #63	; 0x3f
 80018c4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80018c8:	e7ed      	b.n	80018a6 <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ca:	6923      	ldr	r3, [r4, #16]
 80018cc:	b113      	cbz	r3, 80018d4 <HAL_UART_Receive+0xb6>
      pdata16bits = NULL;
 80018ce:	f04f 0900 	mov.w	r9, #0
 80018d2:	e00e      	b.n	80018f2 <HAL_UART_Receive+0xd4>
      pdata16bits = (uint16_t *) pData;
 80018d4:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80018d6:	2500      	movs	r5, #0
 80018d8:	e00b      	b.n	80018f2 <HAL_UART_Receive+0xd4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	ea08 0303 	and.w	r3, r8, r3
 80018e2:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80018e6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80018f2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b18b      	cbz	r3, 800191e <HAL_UART_Receive+0x100>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018fa:	9600      	str	r6, [sp, #0]
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	2120      	movs	r1, #32
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff feed 	bl	80016e2 <UART_WaitOnFlagUntilTimeout>
 8001908:	b9b8      	cbnz	r0, 800193a <HAL_UART_Receive+0x11c>
      if (pdata8bits == NULL)
 800190a:	2d00      	cmp	r5, #0
 800190c:	d0e5      	beq.n	80018da <HAL_UART_Receive+0xbc>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001912:	fa5f f388 	uxtb.w	r3, r8
 8001916:	4013      	ands	r3, r2
 8001918:	f805 3b01 	strb.w	r3, [r5], #1
 800191c:	e7e3      	b.n	80018e6 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 800191e:	2320      	movs	r3, #32
 8001920:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 8001922:	2000      	movs	r0, #0
 8001924:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001928:	e000      	b.n	800192c <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 800192a:	2002      	movs	r0, #2
}
 800192c:	b003      	add	sp, #12
 800192e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001932:	2001      	movs	r0, #1
 8001934:	e7fa      	b.n	800192c <HAL_UART_Receive+0x10e>
    __HAL_LOCK(huart);
 8001936:	2002      	movs	r0, #2
 8001938:	e7f8      	b.n	800192c <HAL_UART_Receive+0x10e>
        return HAL_TIMEOUT;
 800193a:	2003      	movs	r0, #3
 800193c:	e7f6      	b.n	800192c <HAL_UART_Receive+0x10e>

0800193e <UART_CheckIdleState>:
{
 800193e:	b510      	push	{r4, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001944:	2300      	movs	r3, #0
 8001946:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001948:	f7ff f80a 	bl	8000960 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800194c:	6822      	ldr	r2, [r4, #0]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f012 0f08 	tst.w	r2, #8
 8001954:	d107      	bne.n	8001966 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8001956:	2320      	movs	r3, #32
 8001958:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800195a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800195c:	2000      	movs	r0, #0
 800195e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001962:	b002      	add	sp, #8
 8001964:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001966:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4603      	mov	r3, r0
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff feb4 	bl	80016e2 <UART_WaitOnFlagUntilTimeout>
 800197a:	2800      	cmp	r0, #0
 800197c:	d0eb      	beq.n	8001956 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e7ef      	b.n	8001962 <UART_CheckIdleState+0x24>

08001982 <HAL_UART_Init>:
  if (huart == NULL)
 8001982:	b368      	cbz	r0, 80019e0 <HAL_UART_Init+0x5e>
{
 8001984:	b510      	push	{r4, lr}
 8001986:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001988:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800198a:	b303      	cbz	r3, 80019ce <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	2324      	movs	r3, #36	; 0x24
 800198e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001990:	6822      	ldr	r2, [r4, #0]
 8001992:	6813      	ldr	r3, [r2, #0]
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff fc84 	bl	80012a8 <UART_SetConfig>
 80019a0:	2801      	cmp	r0, #1
 80019a2:	d013      	beq.n	80019cc <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019a6:	b9bb      	cbnz	r3, 80019d8 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	6853      	ldr	r3, [r2, #4]
 80019ac:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019b0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019b2:	6822      	ldr	r2, [r4, #0]
 80019b4:	6893      	ldr	r3, [r2, #8]
 80019b6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019ba:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ffb9 	bl	800193e <UART_CheckIdleState>
}
 80019cc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019ce:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80019d2:	f7fe fe99 	bl	8000708 <HAL_UART_MspInit>
 80019d6:	e7d9      	b.n	800198c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff fe1d 	bl	8001618 <UART_AdvFeatureConfig>
 80019de:	e7e3      	b.n	80019a8 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
}
 80019e2:	4770      	bx	lr

080019e4 <__libc_init_array>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4e0d      	ldr	r6, [pc, #52]	; (8001a1c <__libc_init_array+0x38>)
 80019e8:	4c0d      	ldr	r4, [pc, #52]	; (8001a20 <__libc_init_array+0x3c>)
 80019ea:	1ba4      	subs	r4, r4, r6
 80019ec:	10a4      	asrs	r4, r4, #2
 80019ee:	2500      	movs	r5, #0
 80019f0:	42a5      	cmp	r5, r4
 80019f2:	d109      	bne.n	8001a08 <__libc_init_array+0x24>
 80019f4:	4e0b      	ldr	r6, [pc, #44]	; (8001a24 <__libc_init_array+0x40>)
 80019f6:	4c0c      	ldr	r4, [pc, #48]	; (8001a28 <__libc_init_array+0x44>)
 80019f8:	f000 fcb6 	bl	8002368 <_init>
 80019fc:	1ba4      	subs	r4, r4, r6
 80019fe:	10a4      	asrs	r4, r4, #2
 8001a00:	2500      	movs	r5, #0
 8001a02:	42a5      	cmp	r5, r4
 8001a04:	d105      	bne.n	8001a12 <__libc_init_array+0x2e>
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
 8001a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a0c:	4798      	blx	r3
 8001a0e:	3501      	adds	r5, #1
 8001a10:	e7ee      	b.n	80019f0 <__libc_init_array+0xc>
 8001a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a16:	4798      	blx	r3
 8001a18:	3501      	adds	r5, #1
 8001a1a:	e7f2      	b.n	8001a02 <__libc_init_array+0x1e>
 8001a1c:	08002420 	.word	0x08002420
 8001a20:	08002420 	.word	0x08002420
 8001a24:	08002420 	.word	0x08002420
 8001a28:	08002424 	.word	0x08002424

08001a2c <memset>:
 8001a2c:	4402      	add	r2, r0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <memset+0xa>
 8001a34:	4770      	bx	lr
 8001a36:	f803 1b01 	strb.w	r1, [r3], #1
 8001a3a:	e7f9      	b.n	8001a30 <memset+0x4>

08001a3c <_puts_r>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	460e      	mov	r6, r1
 8001a40:	4605      	mov	r5, r0
 8001a42:	b118      	cbz	r0, 8001a4c <_puts_r+0x10>
 8001a44:	6983      	ldr	r3, [r0, #24]
 8001a46:	b90b      	cbnz	r3, 8001a4c <_puts_r+0x10>
 8001a48:	f000 fa0c 	bl	8001e64 <__sinit>
 8001a4c:	69ab      	ldr	r3, [r5, #24]
 8001a4e:	68ac      	ldr	r4, [r5, #8]
 8001a50:	b913      	cbnz	r3, 8001a58 <_puts_r+0x1c>
 8001a52:	4628      	mov	r0, r5
 8001a54:	f000 fa06 	bl	8001e64 <__sinit>
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <_puts_r+0xac>)
 8001a5a:	429c      	cmp	r4, r3
 8001a5c:	d117      	bne.n	8001a8e <_puts_r+0x52>
 8001a5e:	686c      	ldr	r4, [r5, #4]
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	071b      	lsls	r3, r3, #28
 8001a64:	d51d      	bpl.n	8001aa2 <_puts_r+0x66>
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	b1db      	cbz	r3, 8001aa2 <_puts_r+0x66>
 8001a6a:	3e01      	subs	r6, #1
 8001a6c:	68a3      	ldr	r3, [r4, #8]
 8001a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a72:	3b01      	subs	r3, #1
 8001a74:	60a3      	str	r3, [r4, #8]
 8001a76:	b9e9      	cbnz	r1, 8001ab4 <_puts_r+0x78>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da2e      	bge.n	8001ada <_puts_r+0x9e>
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	210a      	movs	r1, #10
 8001a80:	4628      	mov	r0, r5
 8001a82:	f000 f83f 	bl	8001b04 <__swbuf_r>
 8001a86:	3001      	adds	r0, #1
 8001a88:	d011      	beq.n	8001aae <_puts_r+0x72>
 8001a8a:	200a      	movs	r0, #10
 8001a8c:	e011      	b.n	8001ab2 <_puts_r+0x76>
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <_puts_r+0xb0>)
 8001a90:	429c      	cmp	r4, r3
 8001a92:	d101      	bne.n	8001a98 <_puts_r+0x5c>
 8001a94:	68ac      	ldr	r4, [r5, #8]
 8001a96:	e7e3      	b.n	8001a60 <_puts_r+0x24>
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_puts_r+0xb4>)
 8001a9a:	429c      	cmp	r4, r3
 8001a9c:	bf08      	it	eq
 8001a9e:	68ec      	ldreq	r4, [r5, #12]
 8001aa0:	e7de      	b.n	8001a60 <_puts_r+0x24>
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f000 f87f 	bl	8001ba8 <__swsetup_r>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0dd      	beq.n	8001a6a <_puts_r+0x2e>
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da04      	bge.n	8001ac2 <_puts_r+0x86>
 8001ab8:	69a2      	ldr	r2, [r4, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dc06      	bgt.n	8001acc <_puts_r+0x90>
 8001abe:	290a      	cmp	r1, #10
 8001ac0:	d004      	beq.n	8001acc <_puts_r+0x90>
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	6022      	str	r2, [r4, #0]
 8001ac8:	7019      	strb	r1, [r3, #0]
 8001aca:	e7cf      	b.n	8001a6c <_puts_r+0x30>
 8001acc:	4622      	mov	r2, r4
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f000 f818 	bl	8001b04 <__swbuf_r>
 8001ad4:	3001      	adds	r0, #1
 8001ad6:	d1c9      	bne.n	8001a6c <_puts_r+0x30>
 8001ad8:	e7e9      	b.n	8001aae <_puts_r+0x72>
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	200a      	movs	r0, #10
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	6022      	str	r2, [r4, #0]
 8001ae2:	7018      	strb	r0, [r3, #0]
 8001ae4:	e7e5      	b.n	8001ab2 <_puts_r+0x76>
 8001ae6:	bf00      	nop
 8001ae8:	080023d8 	.word	0x080023d8
 8001aec:	080023f8 	.word	0x080023f8
 8001af0:	080023b8 	.word	0x080023b8

08001af4 <puts>:
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <puts+0xc>)
 8001af6:	4601      	mov	r1, r0
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f7ff bf9f 	b.w	8001a3c <_puts_r>
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <__swbuf_r>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	460e      	mov	r6, r1
 8001b08:	4614      	mov	r4, r2
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	b118      	cbz	r0, 8001b16 <__swbuf_r+0x12>
 8001b0e:	6983      	ldr	r3, [r0, #24]
 8001b10:	b90b      	cbnz	r3, 8001b16 <__swbuf_r+0x12>
 8001b12:	f000 f9a7 	bl	8001e64 <__sinit>
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <__swbuf_r+0x98>)
 8001b18:	429c      	cmp	r4, r3
 8001b1a:	d12a      	bne.n	8001b72 <__swbuf_r+0x6e>
 8001b1c:	686c      	ldr	r4, [r5, #4]
 8001b1e:	69a3      	ldr	r3, [r4, #24]
 8001b20:	60a3      	str	r3, [r4, #8]
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	071a      	lsls	r2, r3, #28
 8001b26:	d52e      	bpl.n	8001b86 <__swbuf_r+0x82>
 8001b28:	6923      	ldr	r3, [r4, #16]
 8001b2a:	b363      	cbz	r3, 8001b86 <__swbuf_r+0x82>
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	6820      	ldr	r0, [r4, #0]
 8001b30:	1ac0      	subs	r0, r0, r3
 8001b32:	6963      	ldr	r3, [r4, #20]
 8001b34:	b2f6      	uxtb	r6, r6
 8001b36:	4283      	cmp	r3, r0
 8001b38:	4637      	mov	r7, r6
 8001b3a:	dc04      	bgt.n	8001b46 <__swbuf_r+0x42>
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 f926 	bl	8001d90 <_fflush_r>
 8001b44:	bb28      	cbnz	r0, 8001b92 <__swbuf_r+0x8e>
 8001b46:	68a3      	ldr	r3, [r4, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60a3      	str	r3, [r4, #8]
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	701e      	strb	r6, [r3, #0]
 8001b54:	6963      	ldr	r3, [r4, #20]
 8001b56:	3001      	adds	r0, #1
 8001b58:	4283      	cmp	r3, r0
 8001b5a:	d004      	beq.n	8001b66 <__swbuf_r+0x62>
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	07db      	lsls	r3, r3, #31
 8001b60:	d519      	bpl.n	8001b96 <__swbuf_r+0x92>
 8001b62:	2e0a      	cmp	r6, #10
 8001b64:	d117      	bne.n	8001b96 <__swbuf_r+0x92>
 8001b66:	4621      	mov	r1, r4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 f911 	bl	8001d90 <_fflush_r>
 8001b6e:	b190      	cbz	r0, 8001b96 <__swbuf_r+0x92>
 8001b70:	e00f      	b.n	8001b92 <__swbuf_r+0x8e>
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <__swbuf_r+0x9c>)
 8001b74:	429c      	cmp	r4, r3
 8001b76:	d101      	bne.n	8001b7c <__swbuf_r+0x78>
 8001b78:	68ac      	ldr	r4, [r5, #8]
 8001b7a:	e7d0      	b.n	8001b1e <__swbuf_r+0x1a>
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <__swbuf_r+0xa0>)
 8001b7e:	429c      	cmp	r4, r3
 8001b80:	bf08      	it	eq
 8001b82:	68ec      	ldreq	r4, [r5, #12]
 8001b84:	e7cb      	b.n	8001b1e <__swbuf_r+0x1a>
 8001b86:	4621      	mov	r1, r4
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f000 f80d 	bl	8001ba8 <__swsetup_r>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d0cc      	beq.n	8001b2c <__swbuf_r+0x28>
 8001b92:	f04f 37ff 	mov.w	r7, #4294967295
 8001b96:	4638      	mov	r0, r7
 8001b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	080023d8 	.word	0x080023d8
 8001ba0:	080023f8 	.word	0x080023f8
 8001ba4:	080023b8 	.word	0x080023b8

08001ba8 <__swsetup_r>:
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <__swsetup_r+0xcc>)
 8001baa:	b570      	push	{r4, r5, r6, lr}
 8001bac:	681d      	ldr	r5, [r3, #0]
 8001bae:	4606      	mov	r6, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	b125      	cbz	r5, 8001bbe <__swsetup_r+0x16>
 8001bb4:	69ab      	ldr	r3, [r5, #24]
 8001bb6:	b913      	cbnz	r3, 8001bbe <__swsetup_r+0x16>
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 f953 	bl	8001e64 <__sinit>
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <__swsetup_r+0xd0>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d10f      	bne.n	8001be4 <__swsetup_r+0x3c>
 8001bc4:	686c      	ldr	r4, [r5, #4]
 8001bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	0715      	lsls	r5, r2, #28
 8001bce:	d42c      	bmi.n	8001c2a <__swsetup_r+0x82>
 8001bd0:	06d0      	lsls	r0, r2, #27
 8001bd2:	d411      	bmi.n	8001bf8 <__swsetup_r+0x50>
 8001bd4:	2209      	movs	r2, #9
 8001bd6:	6032      	str	r2, [r6, #0]
 8001bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bdc:	81a3      	strh	r3, [r4, #12]
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295
 8001be2:	e03e      	b.n	8001c62 <__swsetup_r+0xba>
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <__swsetup_r+0xd4>)
 8001be6:	429c      	cmp	r4, r3
 8001be8:	d101      	bne.n	8001bee <__swsetup_r+0x46>
 8001bea:	68ac      	ldr	r4, [r5, #8]
 8001bec:	e7eb      	b.n	8001bc6 <__swsetup_r+0x1e>
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <__swsetup_r+0xd8>)
 8001bf0:	429c      	cmp	r4, r3
 8001bf2:	bf08      	it	eq
 8001bf4:	68ec      	ldreq	r4, [r5, #12]
 8001bf6:	e7e6      	b.n	8001bc6 <__swsetup_r+0x1e>
 8001bf8:	0751      	lsls	r1, r2, #29
 8001bfa:	d512      	bpl.n	8001c22 <__swsetup_r+0x7a>
 8001bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bfe:	b141      	cbz	r1, 8001c12 <__swsetup_r+0x6a>
 8001c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d002      	beq.n	8001c0e <__swsetup_r+0x66>
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f000 fa19 	bl	8002040 <_free_r>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6363      	str	r3, [r4, #52]	; 0x34
 8001c12:	89a3      	ldrh	r3, [r4, #12]
 8001c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c18:	81a3      	strh	r3, [r4, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6063      	str	r3, [r4, #4]
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	6023      	str	r3, [r4, #0]
 8001c22:	89a3      	ldrh	r3, [r4, #12]
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	81a3      	strh	r3, [r4, #12]
 8001c2a:	6923      	ldr	r3, [r4, #16]
 8001c2c:	b94b      	cbnz	r3, 8001c42 <__swsetup_r+0x9a>
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d003      	beq.n	8001c42 <__swsetup_r+0x9a>
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f000 f9bf 	bl	8001fc0 <__smakebuf_r>
 8001c42:	89a2      	ldrh	r2, [r4, #12]
 8001c44:	f012 0301 	ands.w	r3, r2, #1
 8001c48:	d00c      	beq.n	8001c64 <__swsetup_r+0xbc>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60a3      	str	r3, [r4, #8]
 8001c4e:	6963      	ldr	r3, [r4, #20]
 8001c50:	425b      	negs	r3, r3
 8001c52:	61a3      	str	r3, [r4, #24]
 8001c54:	6923      	ldr	r3, [r4, #16]
 8001c56:	b953      	cbnz	r3, 8001c6e <__swsetup_r+0xc6>
 8001c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001c60:	d1ba      	bne.n	8001bd8 <__swsetup_r+0x30>
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	0792      	lsls	r2, r2, #30
 8001c66:	bf58      	it	pl
 8001c68:	6963      	ldrpl	r3, [r4, #20]
 8001c6a:	60a3      	str	r3, [r4, #8]
 8001c6c:	e7f2      	b.n	8001c54 <__swsetup_r+0xac>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	e7f7      	b.n	8001c62 <__swsetup_r+0xba>
 8001c72:	bf00      	nop
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	080023d8 	.word	0x080023d8
 8001c7c:	080023f8 	.word	0x080023f8
 8001c80:	080023b8 	.word	0x080023b8

08001c84 <__sflush_r>:
 8001c84:	898a      	ldrh	r2, [r1, #12]
 8001c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	0710      	lsls	r0, r2, #28
 8001c8e:	460c      	mov	r4, r1
 8001c90:	d458      	bmi.n	8001d44 <__sflush_r+0xc0>
 8001c92:	684b      	ldr	r3, [r1, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dc05      	bgt.n	8001ca4 <__sflush_r+0x20>
 8001c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dc02      	bgt.n	8001ca4 <__sflush_r+0x20>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	d0f9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001caa:	2300      	movs	r3, #0
 8001cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cb0:	682f      	ldr	r7, [r5, #0]
 8001cb2:	6a21      	ldr	r1, [r4, #32]
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	d032      	beq.n	8001d1e <__sflush_r+0x9a>
 8001cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	d505      	bpl.n	8001ccc <__sflush_r+0x48>
 8001cc0:	6863      	ldr	r3, [r4, #4]
 8001cc2:	1ac0      	subs	r0, r0, r3
 8001cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cc6:	b10b      	cbz	r3, 8001ccc <__sflush_r+0x48>
 8001cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cca:	1ac0      	subs	r0, r0, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cd2:	6a21      	ldr	r1, [r4, #32]
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	47b0      	blx	r6
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	89a3      	ldrh	r3, [r4, #12]
 8001cdc:	d106      	bne.n	8001cec <__sflush_r+0x68>
 8001cde:	6829      	ldr	r1, [r5, #0]
 8001ce0:	291d      	cmp	r1, #29
 8001ce2:	d848      	bhi.n	8001d76 <__sflush_r+0xf2>
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <__sflush_r+0x108>)
 8001ce6:	40ca      	lsrs	r2, r1
 8001ce8:	07d6      	lsls	r6, r2, #31
 8001cea:	d544      	bpl.n	8001d76 <__sflush_r+0xf2>
 8001cec:	2200      	movs	r2, #0
 8001cee:	6062      	str	r2, [r4, #4]
 8001cf0:	04d9      	lsls	r1, r3, #19
 8001cf2:	6922      	ldr	r2, [r4, #16]
 8001cf4:	6022      	str	r2, [r4, #0]
 8001cf6:	d504      	bpl.n	8001d02 <__sflush_r+0x7e>
 8001cf8:	1c42      	adds	r2, r0, #1
 8001cfa:	d101      	bne.n	8001d00 <__sflush_r+0x7c>
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	b903      	cbnz	r3, 8001d02 <__sflush_r+0x7e>
 8001d00:	6560      	str	r0, [r4, #84]	; 0x54
 8001d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d04:	602f      	str	r7, [r5, #0]
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d0c9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d0e:	4299      	cmp	r1, r3
 8001d10:	d002      	beq.n	8001d18 <__sflush_r+0x94>
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 f994 	bl	8002040 <_free_r>
 8001d18:	2000      	movs	r0, #0
 8001d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8001d1c:	e7c0      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4628      	mov	r0, r5
 8001d22:	47b0      	blx	r6
 8001d24:	1c41      	adds	r1, r0, #1
 8001d26:	d1c8      	bne.n	8001cba <__sflush_r+0x36>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0c5      	beq.n	8001cba <__sflush_r+0x36>
 8001d2e:	2b1d      	cmp	r3, #29
 8001d30:	d001      	beq.n	8001d36 <__sflush_r+0xb2>
 8001d32:	2b16      	cmp	r3, #22
 8001d34:	d101      	bne.n	8001d3a <__sflush_r+0xb6>
 8001d36:	602f      	str	r7, [r5, #0]
 8001d38:	e7b1      	b.n	8001c9e <__sflush_r+0x1a>
 8001d3a:	89a3      	ldrh	r3, [r4, #12]
 8001d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d40:	81a3      	strh	r3, [r4, #12]
 8001d42:	e7ad      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d44:	690f      	ldr	r7, [r1, #16]
 8001d46:	2f00      	cmp	r7, #0
 8001d48:	d0a9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001d4a:	0793      	lsls	r3, r2, #30
 8001d4c:	680e      	ldr	r6, [r1, #0]
 8001d4e:	bf08      	it	eq
 8001d50:	694b      	ldreq	r3, [r1, #20]
 8001d52:	600f      	str	r7, [r1, #0]
 8001d54:	bf18      	it	ne
 8001d56:	2300      	movne	r3, #0
 8001d58:	eba6 0807 	sub.w	r8, r6, r7
 8001d5c:	608b      	str	r3, [r1, #8]
 8001d5e:	f1b8 0f00 	cmp.w	r8, #0
 8001d62:	dd9c      	ble.n	8001c9e <__sflush_r+0x1a>
 8001d64:	4643      	mov	r3, r8
 8001d66:	463a      	mov	r2, r7
 8001d68:	6a21      	ldr	r1, [r4, #32]
 8001d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	47b0      	blx	r6
 8001d70:	2800      	cmp	r0, #0
 8001d72:	dc06      	bgt.n	8001d82 <__sflush_r+0xfe>
 8001d74:	89a3      	ldrh	r3, [r4, #12]
 8001d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7a:	81a3      	strh	r3, [r4, #12]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	e78e      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d82:	4407      	add	r7, r0
 8001d84:	eba8 0800 	sub.w	r8, r8, r0
 8001d88:	e7e9      	b.n	8001d5e <__sflush_r+0xda>
 8001d8a:	bf00      	nop
 8001d8c:	20400001 	.word	0x20400001

08001d90 <_fflush_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	690b      	ldr	r3, [r1, #16]
 8001d94:	4605      	mov	r5, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	b1db      	cbz	r3, 8001dd2 <_fflush_r+0x42>
 8001d9a:	b118      	cbz	r0, 8001da4 <_fflush_r+0x14>
 8001d9c:	6983      	ldr	r3, [r0, #24]
 8001d9e:	b90b      	cbnz	r3, 8001da4 <_fflush_r+0x14>
 8001da0:	f000 f860 	bl	8001e64 <__sinit>
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <_fflush_r+0x48>)
 8001da6:	429c      	cmp	r4, r3
 8001da8:	d109      	bne.n	8001dbe <_fflush_r+0x2e>
 8001daa:	686c      	ldr	r4, [r5, #4]
 8001dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db0:	b17b      	cbz	r3, 8001dd2 <_fflush_r+0x42>
 8001db2:	4621      	mov	r1, r4
 8001db4:	4628      	mov	r0, r5
 8001db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dba:	f7ff bf63 	b.w	8001c84 <__sflush_r>
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_fflush_r+0x4c>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	d101      	bne.n	8001dc8 <_fflush_r+0x38>
 8001dc4:	68ac      	ldr	r4, [r5, #8]
 8001dc6:	e7f1      	b.n	8001dac <_fflush_r+0x1c>
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <_fflush_r+0x50>)
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	bf08      	it	eq
 8001dce:	68ec      	ldreq	r4, [r5, #12]
 8001dd0:	e7ec      	b.n	8001dac <_fflush_r+0x1c>
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	bd38      	pop	{r3, r4, r5, pc}
 8001dd6:	bf00      	nop
 8001dd8:	080023d8 	.word	0x080023d8
 8001ddc:	080023f8 	.word	0x080023f8
 8001de0:	080023b8 	.word	0x080023b8

08001de4 <std>:
 8001de4:	2300      	movs	r3, #0
 8001de6:	b510      	push	{r4, lr}
 8001de8:	4604      	mov	r4, r0
 8001dea:	e9c0 3300 	strd	r3, r3, [r0]
 8001dee:	6083      	str	r3, [r0, #8]
 8001df0:	8181      	strh	r1, [r0, #12]
 8001df2:	6643      	str	r3, [r0, #100]	; 0x64
 8001df4:	81c2      	strh	r2, [r0, #14]
 8001df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dfa:	6183      	str	r3, [r0, #24]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	2208      	movs	r2, #8
 8001e00:	305c      	adds	r0, #92	; 0x5c
 8001e02:	f7ff fe13 	bl	8001a2c <memset>
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <std+0x38>)
 8001e08:	6263      	str	r3, [r4, #36]	; 0x24
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <std+0x3c>)
 8001e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <std+0x40>)
 8001e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <std+0x44>)
 8001e14:	6224      	str	r4, [r4, #32]
 8001e16:	6323      	str	r3, [r4, #48]	; 0x30
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	bf00      	nop
 8001e1c:	080021b1 	.word	0x080021b1
 8001e20:	080021d3 	.word	0x080021d3
 8001e24:	0800220b 	.word	0x0800220b
 8001e28:	0800222f 	.word	0x0800222f

08001e2c <_cleanup_r>:
 8001e2c:	4901      	ldr	r1, [pc, #4]	; (8001e34 <_cleanup_r+0x8>)
 8001e2e:	f000 b885 	b.w	8001f3c <_fwalk_reent>
 8001e32:	bf00      	nop
 8001e34:	08001d91 	.word	0x08001d91

08001e38 <__sfmoreglue>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	1e4a      	subs	r2, r1, #1
 8001e3c:	2568      	movs	r5, #104	; 0x68
 8001e3e:	4355      	muls	r5, r2
 8001e40:	460e      	mov	r6, r1
 8001e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e46:	f000 f949 	bl	80020dc <_malloc_r>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b140      	cbz	r0, 8001e60 <__sfmoreglue+0x28>
 8001e4e:	2100      	movs	r1, #0
 8001e50:	e9c0 1600 	strd	r1, r6, [r0]
 8001e54:	300c      	adds	r0, #12
 8001e56:	60a0      	str	r0, [r4, #8]
 8001e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e5c:	f7ff fde6 	bl	8001a2c <memset>
 8001e60:	4620      	mov	r0, r4
 8001e62:	bd70      	pop	{r4, r5, r6, pc}

08001e64 <__sinit>:
 8001e64:	6983      	ldr	r3, [r0, #24]
 8001e66:	b510      	push	{r4, lr}
 8001e68:	4604      	mov	r4, r0
 8001e6a:	bb33      	cbnz	r3, 8001eba <__sinit+0x56>
 8001e6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001e70:	6503      	str	r3, [r0, #80]	; 0x50
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <__sinit+0x58>)
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <__sinit+0x5c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6282      	str	r2, [r0, #40]	; 0x28
 8001e7a:	4298      	cmp	r0, r3
 8001e7c:	bf04      	itt	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	6183      	streq	r3, [r0, #24]
 8001e82:	f000 f81f 	bl	8001ec4 <__sfp>
 8001e86:	6060      	str	r0, [r4, #4]
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f000 f81b 	bl	8001ec4 <__sfp>
 8001e8e:	60a0      	str	r0, [r4, #8]
 8001e90:	4620      	mov	r0, r4
 8001e92:	f000 f817 	bl	8001ec4 <__sfp>
 8001e96:	2200      	movs	r2, #0
 8001e98:	60e0      	str	r0, [r4, #12]
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	6860      	ldr	r0, [r4, #4]
 8001e9e:	f7ff ffa1 	bl	8001de4 <std>
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2109      	movs	r1, #9
 8001ea6:	68a0      	ldr	r0, [r4, #8]
 8001ea8:	f7ff ff9c 	bl	8001de4 <std>
 8001eac:	2202      	movs	r2, #2
 8001eae:	2112      	movs	r1, #18
 8001eb0:	68e0      	ldr	r0, [r4, #12]
 8001eb2:	f7ff ff97 	bl	8001de4 <std>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61a3      	str	r3, [r4, #24]
 8001eba:	bd10      	pop	{r4, pc}
 8001ebc:	080023b4 	.word	0x080023b4
 8001ec0:	08001e2d 	.word	0x08001e2d

08001ec4 <__sfp>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <__sfp+0x70>)
 8001ec8:	681e      	ldr	r6, [r3, #0]
 8001eca:	69b3      	ldr	r3, [r6, #24]
 8001ecc:	4607      	mov	r7, r0
 8001ece:	b913      	cbnz	r3, 8001ed6 <__sfp+0x12>
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7ff ffc7 	bl	8001e64 <__sinit>
 8001ed6:	3648      	adds	r6, #72	; 0x48
 8001ed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	d503      	bpl.n	8001ee8 <__sfp+0x24>
 8001ee0:	6833      	ldr	r3, [r6, #0]
 8001ee2:	b133      	cbz	r3, 8001ef2 <__sfp+0x2e>
 8001ee4:	6836      	ldr	r6, [r6, #0]
 8001ee6:	e7f7      	b.n	8001ed8 <__sfp+0x14>
 8001ee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001eec:	b16d      	cbz	r5, 8001f0a <__sfp+0x46>
 8001eee:	3468      	adds	r4, #104	; 0x68
 8001ef0:	e7f4      	b.n	8001edc <__sfp+0x18>
 8001ef2:	2104      	movs	r1, #4
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	f7ff ff9f 	bl	8001e38 <__sfmoreglue>
 8001efa:	6030      	str	r0, [r6, #0]
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d1f1      	bne.n	8001ee4 <__sfp+0x20>
 8001f00:	230c      	movs	r3, #12
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4604      	mov	r4, r0
 8001f06:	4620      	mov	r0, r4
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <__sfp+0x74>)
 8001f0c:	6665      	str	r5, [r4, #100]	; 0x64
 8001f0e:	e9c4 5500 	strd	r5, r5, [r4]
 8001f12:	60a5      	str	r5, [r4, #8]
 8001f14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001f18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f24:	f7ff fd82 	bl	8001a2c <memset>
 8001f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f30:	e7e9      	b.n	8001f06 <__sfp+0x42>
 8001f32:	bf00      	nop
 8001f34:	080023b4 	.word	0x080023b4
 8001f38:	ffff0001 	.word	0xffff0001

08001f3c <_fwalk_reent>:
 8001f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f40:	4680      	mov	r8, r0
 8001f42:	4689      	mov	r9, r1
 8001f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f48:	2600      	movs	r6, #0
 8001f4a:	b914      	cbnz	r4, 8001f52 <_fwalk_reent+0x16>
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001f56:	3f01      	subs	r7, #1
 8001f58:	d501      	bpl.n	8001f5e <_fwalk_reent+0x22>
 8001f5a:	6824      	ldr	r4, [r4, #0]
 8001f5c:	e7f5      	b.n	8001f4a <_fwalk_reent+0xe>
 8001f5e:	89ab      	ldrh	r3, [r5, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d907      	bls.n	8001f74 <_fwalk_reent+0x38>
 8001f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	d003      	beq.n	8001f74 <_fwalk_reent+0x38>
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4640      	mov	r0, r8
 8001f70:	47c8      	blx	r9
 8001f72:	4306      	orrs	r6, r0
 8001f74:	3568      	adds	r5, #104	; 0x68
 8001f76:	e7ee      	b.n	8001f56 <_fwalk_reent+0x1a>

08001f78 <__swhatbuf_r>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	460e      	mov	r6, r1
 8001f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f80:	2900      	cmp	r1, #0
 8001f82:	b096      	sub	sp, #88	; 0x58
 8001f84:	4614      	mov	r4, r2
 8001f86:	461d      	mov	r5, r3
 8001f88:	da07      	bge.n	8001f9a <__swhatbuf_r+0x22>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	89b3      	ldrh	r3, [r6, #12]
 8001f90:	061a      	lsls	r2, r3, #24
 8001f92:	d410      	bmi.n	8001fb6 <__swhatbuf_r+0x3e>
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	e00e      	b.n	8001fb8 <__swhatbuf_r+0x40>
 8001f9a:	466a      	mov	r2, sp
 8001f9c:	f000 f96e 	bl	800227c <_fstat_r>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	dbf2      	blt.n	8001f8a <__swhatbuf_r+0x12>
 8001fa4:	9a01      	ldr	r2, [sp, #4]
 8001fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001fae:	425a      	negs	r2, r3
 8001fb0:	415a      	adcs	r2, r3
 8001fb2:	602a      	str	r2, [r5, #0]
 8001fb4:	e7ee      	b.n	8001f94 <__swhatbuf_r+0x1c>
 8001fb6:	2340      	movs	r3, #64	; 0x40
 8001fb8:	2000      	movs	r0, #0
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	b016      	add	sp, #88	; 0x58
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}

08001fc0 <__smakebuf_r>:
 8001fc0:	898b      	ldrh	r3, [r1, #12]
 8001fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fc4:	079d      	lsls	r5, r3, #30
 8001fc6:	4606      	mov	r6, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	d507      	bpl.n	8001fdc <__smakebuf_r+0x1c>
 8001fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001fd0:	6023      	str	r3, [r4, #0]
 8001fd2:	6123      	str	r3, [r4, #16]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6163      	str	r3, [r4, #20]
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	ab01      	add	r3, sp, #4
 8001fde:	466a      	mov	r2, sp
 8001fe0:	f7ff ffca 	bl	8001f78 <__swhatbuf_r>
 8001fe4:	9900      	ldr	r1, [sp, #0]
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f000 f877 	bl	80020dc <_malloc_r>
 8001fee:	b948      	cbnz	r0, 8002004 <__smakebuf_r+0x44>
 8001ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ff4:	059a      	lsls	r2, r3, #22
 8001ff6:	d4ef      	bmi.n	8001fd8 <__smakebuf_r+0x18>
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	81a3      	strh	r3, [r4, #12]
 8002002:	e7e3      	b.n	8001fcc <__smakebuf_r+0xc>
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <__smakebuf_r+0x7c>)
 8002006:	62b3      	str	r3, [r6, #40]	; 0x28
 8002008:	89a3      	ldrh	r3, [r4, #12]
 800200a:	6020      	str	r0, [r4, #0]
 800200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002010:	81a3      	strh	r3, [r4, #12]
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	6163      	str	r3, [r4, #20]
 8002016:	9b01      	ldr	r3, [sp, #4]
 8002018:	6120      	str	r0, [r4, #16]
 800201a:	b15b      	cbz	r3, 8002034 <__smakebuf_r+0x74>
 800201c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002020:	4630      	mov	r0, r6
 8002022:	f000 f93d 	bl	80022a0 <_isatty_r>
 8002026:	b128      	cbz	r0, 8002034 <__smakebuf_r+0x74>
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	431d      	orrs	r5, r3
 8002038:	81a5      	strh	r5, [r4, #12]
 800203a:	e7cd      	b.n	8001fd8 <__smakebuf_r+0x18>
 800203c:	08001e2d 	.word	0x08001e2d

08002040 <_free_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4605      	mov	r5, r0
 8002044:	2900      	cmp	r1, #0
 8002046:	d045      	beq.n	80020d4 <_free_r+0x94>
 8002048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800204c:	1f0c      	subs	r4, r1, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	bfb8      	it	lt
 8002052:	18e4      	addlt	r4, r4, r3
 8002054:	f000 f946 	bl	80022e4 <__malloc_lock>
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <_free_r+0x98>)
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	4610      	mov	r0, r2
 800205e:	b933      	cbnz	r3, 800206e <_free_r+0x2e>
 8002060:	6063      	str	r3, [r4, #4]
 8002062:	6014      	str	r4, [r2, #0]
 8002064:	4628      	mov	r0, r5
 8002066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800206a:	f000 b93c 	b.w	80022e6 <__malloc_unlock>
 800206e:	42a3      	cmp	r3, r4
 8002070:	d90c      	bls.n	800208c <_free_r+0x4c>
 8002072:	6821      	ldr	r1, [r4, #0]
 8002074:	1862      	adds	r2, r4, r1
 8002076:	4293      	cmp	r3, r2
 8002078:	bf04      	itt	eq
 800207a:	681a      	ldreq	r2, [r3, #0]
 800207c:	685b      	ldreq	r3, [r3, #4]
 800207e:	6063      	str	r3, [r4, #4]
 8002080:	bf04      	itt	eq
 8002082:	1852      	addeq	r2, r2, r1
 8002084:	6022      	streq	r2, [r4, #0]
 8002086:	6004      	str	r4, [r0, #0]
 8002088:	e7ec      	b.n	8002064 <_free_r+0x24>
 800208a:	4613      	mov	r3, r2
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	b10a      	cbz	r2, 8002094 <_free_r+0x54>
 8002090:	42a2      	cmp	r2, r4
 8002092:	d9fa      	bls.n	800208a <_free_r+0x4a>
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	1858      	adds	r0, r3, r1
 8002098:	42a0      	cmp	r0, r4
 800209a:	d10b      	bne.n	80020b4 <_free_r+0x74>
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	4401      	add	r1, r0
 80020a0:	1858      	adds	r0, r3, r1
 80020a2:	4282      	cmp	r2, r0
 80020a4:	6019      	str	r1, [r3, #0]
 80020a6:	d1dd      	bne.n	8002064 <_free_r+0x24>
 80020a8:	6810      	ldr	r0, [r2, #0]
 80020aa:	6852      	ldr	r2, [r2, #4]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	4401      	add	r1, r0
 80020b0:	6019      	str	r1, [r3, #0]
 80020b2:	e7d7      	b.n	8002064 <_free_r+0x24>
 80020b4:	d902      	bls.n	80020bc <_free_r+0x7c>
 80020b6:	230c      	movs	r3, #12
 80020b8:	602b      	str	r3, [r5, #0]
 80020ba:	e7d3      	b.n	8002064 <_free_r+0x24>
 80020bc:	6820      	ldr	r0, [r4, #0]
 80020be:	1821      	adds	r1, r4, r0
 80020c0:	428a      	cmp	r2, r1
 80020c2:	bf04      	itt	eq
 80020c4:	6811      	ldreq	r1, [r2, #0]
 80020c6:	6852      	ldreq	r2, [r2, #4]
 80020c8:	6062      	str	r2, [r4, #4]
 80020ca:	bf04      	itt	eq
 80020cc:	1809      	addeq	r1, r1, r0
 80020ce:	6021      	streq	r1, [r4, #0]
 80020d0:	605c      	str	r4, [r3, #4]
 80020d2:	e7c7      	b.n	8002064 <_free_r+0x24>
 80020d4:	bd38      	pop	{r3, r4, r5, pc}
 80020d6:	bf00      	nop
 80020d8:	20000090 	.word	0x20000090

080020dc <_malloc_r>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	1ccd      	adds	r5, r1, #3
 80020e0:	f025 0503 	bic.w	r5, r5, #3
 80020e4:	3508      	adds	r5, #8
 80020e6:	2d0c      	cmp	r5, #12
 80020e8:	bf38      	it	cc
 80020ea:	250c      	movcc	r5, #12
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	4606      	mov	r6, r0
 80020f0:	db01      	blt.n	80020f6 <_malloc_r+0x1a>
 80020f2:	42a9      	cmp	r1, r5
 80020f4:	d903      	bls.n	80020fe <_malloc_r+0x22>
 80020f6:	230c      	movs	r3, #12
 80020f8:	6033      	str	r3, [r6, #0]
 80020fa:	2000      	movs	r0, #0
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	f000 f8f1 	bl	80022e4 <__malloc_lock>
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <_malloc_r+0xac>)
 8002104:	6814      	ldr	r4, [r2, #0]
 8002106:	4621      	mov	r1, r4
 8002108:	b991      	cbnz	r1, 8002130 <_malloc_r+0x54>
 800210a:	4c20      	ldr	r4, [pc, #128]	; (800218c <_malloc_r+0xb0>)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	b91b      	cbnz	r3, 8002118 <_malloc_r+0x3c>
 8002110:	4630      	mov	r0, r6
 8002112:	f000 f83d 	bl	8002190 <_sbrk_r>
 8002116:	6020      	str	r0, [r4, #0]
 8002118:	4629      	mov	r1, r5
 800211a:	4630      	mov	r0, r6
 800211c:	f000 f838 	bl	8002190 <_sbrk_r>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d124      	bne.n	800216e <_malloc_r+0x92>
 8002124:	230c      	movs	r3, #12
 8002126:	6033      	str	r3, [r6, #0]
 8002128:	4630      	mov	r0, r6
 800212a:	f000 f8dc 	bl	80022e6 <__malloc_unlock>
 800212e:	e7e4      	b.n	80020fa <_malloc_r+0x1e>
 8002130:	680b      	ldr	r3, [r1, #0]
 8002132:	1b5b      	subs	r3, r3, r5
 8002134:	d418      	bmi.n	8002168 <_malloc_r+0x8c>
 8002136:	2b0b      	cmp	r3, #11
 8002138:	d90f      	bls.n	800215a <_malloc_r+0x7e>
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	50cd      	str	r5, [r1, r3]
 800213e:	18cc      	adds	r4, r1, r3
 8002140:	4630      	mov	r0, r6
 8002142:	f000 f8d0 	bl	80022e6 <__malloc_unlock>
 8002146:	f104 000b 	add.w	r0, r4, #11
 800214a:	1d23      	adds	r3, r4, #4
 800214c:	f020 0007 	bic.w	r0, r0, #7
 8002150:	1ac3      	subs	r3, r0, r3
 8002152:	d0d3      	beq.n	80020fc <_malloc_r+0x20>
 8002154:	425a      	negs	r2, r3
 8002156:	50e2      	str	r2, [r4, r3]
 8002158:	e7d0      	b.n	80020fc <_malloc_r+0x20>
 800215a:	428c      	cmp	r4, r1
 800215c:	684b      	ldr	r3, [r1, #4]
 800215e:	bf16      	itet	ne
 8002160:	6063      	strne	r3, [r4, #4]
 8002162:	6013      	streq	r3, [r2, #0]
 8002164:	460c      	movne	r4, r1
 8002166:	e7eb      	b.n	8002140 <_malloc_r+0x64>
 8002168:	460c      	mov	r4, r1
 800216a:	6849      	ldr	r1, [r1, #4]
 800216c:	e7cc      	b.n	8002108 <_malloc_r+0x2c>
 800216e:	1cc4      	adds	r4, r0, #3
 8002170:	f024 0403 	bic.w	r4, r4, #3
 8002174:	42a0      	cmp	r0, r4
 8002176:	d005      	beq.n	8002184 <_malloc_r+0xa8>
 8002178:	1a21      	subs	r1, r4, r0
 800217a:	4630      	mov	r0, r6
 800217c:	f000 f808 	bl	8002190 <_sbrk_r>
 8002180:	3001      	adds	r0, #1
 8002182:	d0cf      	beq.n	8002124 <_malloc_r+0x48>
 8002184:	6025      	str	r5, [r4, #0]
 8002186:	e7db      	b.n	8002140 <_malloc_r+0x64>
 8002188:	20000090 	.word	0x20000090
 800218c:	20000094 	.word	0x20000094

08002190 <_sbrk_r>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	4c06      	ldr	r4, [pc, #24]	; (80021ac <_sbrk_r+0x1c>)
 8002194:	2300      	movs	r3, #0
 8002196:	4605      	mov	r5, r0
 8002198:	4608      	mov	r0, r1
 800219a:	6023      	str	r3, [r4, #0]
 800219c:	f000 f8d6 	bl	800234c <_sbrk>
 80021a0:	1c43      	adds	r3, r0, #1
 80021a2:	d102      	bne.n	80021aa <_sbrk_r+0x1a>
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	b103      	cbz	r3, 80021aa <_sbrk_r+0x1a>
 80021a8:	602b      	str	r3, [r5, #0]
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
 80021ac:	20000120 	.word	0x20000120

080021b0 <__sread>:
 80021b0:	b510      	push	{r4, lr}
 80021b2:	460c      	mov	r4, r1
 80021b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b8:	f000 f896 	bl	80022e8 <_read_r>
 80021bc:	2800      	cmp	r0, #0
 80021be:	bfab      	itete	ge
 80021c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021c2:	89a3      	ldrhlt	r3, [r4, #12]
 80021c4:	181b      	addge	r3, r3, r0
 80021c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021ca:	bfac      	ite	ge
 80021cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ce:	81a3      	strhlt	r3, [r4, #12]
 80021d0:	bd10      	pop	{r4, pc}

080021d2 <__swrite>:
 80021d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d6:	461f      	mov	r7, r3
 80021d8:	898b      	ldrh	r3, [r1, #12]
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	4605      	mov	r5, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	4616      	mov	r6, r2
 80021e2:	d505      	bpl.n	80021f0 <__swrite+0x1e>
 80021e4:	2302      	movs	r3, #2
 80021e6:	2200      	movs	r2, #0
 80021e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ec:	f000 f868 	bl	80022c0 <_lseek_r>
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021fa:	81a3      	strh	r3, [r4, #12]
 80021fc:	4632      	mov	r2, r6
 80021fe:	463b      	mov	r3, r7
 8002200:	4628      	mov	r0, r5
 8002202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002206:	f000 b817 	b.w	8002238 <_write_r>

0800220a <__sseek>:
 800220a:	b510      	push	{r4, lr}
 800220c:	460c      	mov	r4, r1
 800220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002212:	f000 f855 	bl	80022c0 <_lseek_r>
 8002216:	1c43      	adds	r3, r0, #1
 8002218:	89a3      	ldrh	r3, [r4, #12]
 800221a:	bf15      	itete	ne
 800221c:	6560      	strne	r0, [r4, #84]	; 0x54
 800221e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002226:	81a3      	strheq	r3, [r4, #12]
 8002228:	bf18      	it	ne
 800222a:	81a3      	strhne	r3, [r4, #12]
 800222c:	bd10      	pop	{r4, pc}

0800222e <__sclose>:
 800222e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002232:	f000 b813 	b.w	800225c <_close_r>
	...

08002238 <_write_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	4c07      	ldr	r4, [pc, #28]	; (8002258 <_write_r+0x20>)
 800223c:	4605      	mov	r5, r0
 800223e:	4608      	mov	r0, r1
 8002240:	4611      	mov	r1, r2
 8002242:	2200      	movs	r2, #0
 8002244:	6022      	str	r2, [r4, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f7fe fad6 	bl	80007f8 <_write>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_write_r+0x1e>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	b103      	cbz	r3, 8002256 <_write_r+0x1e>
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	20000120 	.word	0x20000120

0800225c <_close_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4c06      	ldr	r4, [pc, #24]	; (8002278 <_close_r+0x1c>)
 8002260:	2300      	movs	r3, #0
 8002262:	4605      	mov	r5, r0
 8002264:	4608      	mov	r0, r1
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	f000 f850 	bl	800230c <_close>
 800226c:	1c43      	adds	r3, r0, #1
 800226e:	d102      	bne.n	8002276 <_close_r+0x1a>
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	b103      	cbz	r3, 8002276 <_close_r+0x1a>
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	bd38      	pop	{r3, r4, r5, pc}
 8002278:	20000120 	.word	0x20000120

0800227c <_fstat_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	4c07      	ldr	r4, [pc, #28]	; (800229c <_fstat_r+0x20>)
 8002280:	2300      	movs	r3, #0
 8002282:	4605      	mov	r5, r0
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	f000 f847 	bl	800231c <_fstat>
 800228e:	1c43      	adds	r3, r0, #1
 8002290:	d102      	bne.n	8002298 <_fstat_r+0x1c>
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	b103      	cbz	r3, 8002298 <_fstat_r+0x1c>
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	bd38      	pop	{r3, r4, r5, pc}
 800229a:	bf00      	nop
 800229c:	20000120 	.word	0x20000120

080022a0 <_isatty_r>:
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	4c06      	ldr	r4, [pc, #24]	; (80022bc <_isatty_r+0x1c>)
 80022a4:	2300      	movs	r3, #0
 80022a6:	4605      	mov	r5, r0
 80022a8:	4608      	mov	r0, r1
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	f000 f83e 	bl	800232c <_isatty>
 80022b0:	1c43      	adds	r3, r0, #1
 80022b2:	d102      	bne.n	80022ba <_isatty_r+0x1a>
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	b103      	cbz	r3, 80022ba <_isatty_r+0x1a>
 80022b8:	602b      	str	r3, [r5, #0]
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
 80022bc:	20000120 	.word	0x20000120

080022c0 <_lseek_r>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4c07      	ldr	r4, [pc, #28]	; (80022e0 <_lseek_r+0x20>)
 80022c4:	4605      	mov	r5, r0
 80022c6:	4608      	mov	r0, r1
 80022c8:	4611      	mov	r1, r2
 80022ca:	2200      	movs	r2, #0
 80022cc:	6022      	str	r2, [r4, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f834 	bl	800233c <_lseek>
 80022d4:	1c43      	adds	r3, r0, #1
 80022d6:	d102      	bne.n	80022de <_lseek_r+0x1e>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	b103      	cbz	r3, 80022de <_lseek_r+0x1e>
 80022dc:	602b      	str	r3, [r5, #0]
 80022de:	bd38      	pop	{r3, r4, r5, pc}
 80022e0:	20000120 	.word	0x20000120

080022e4 <__malloc_lock>:
 80022e4:	4770      	bx	lr

080022e6 <__malloc_unlock>:
 80022e6:	4770      	bx	lr

080022e8 <_read_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4c07      	ldr	r4, [pc, #28]	; (8002308 <_read_r+0x20>)
 80022ec:	4605      	mov	r5, r0
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	2200      	movs	r2, #0
 80022f4:	6022      	str	r2, [r4, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7fe fa8a 	bl	8000810 <_read>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	d102      	bne.n	8002306 <_read_r+0x1e>
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	b103      	cbz	r3, 8002306 <_read_r+0x1e>
 8002304:	602b      	str	r3, [r5, #0]
 8002306:	bd38      	pop	{r3, r4, r5, pc}
 8002308:	20000120 	.word	0x20000120

0800230c <_close>:
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <_close+0xc>)
 800230e:	2258      	movs	r2, #88	; 0x58
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f04f 30ff 	mov.w	r0, #4294967295
 8002316:	4770      	bx	lr
 8002318:	20000120 	.word	0x20000120

0800231c <_fstat>:
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <_fstat+0xc>)
 800231e:	2258      	movs	r2, #88	; 0x58
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f04f 30ff 	mov.w	r0, #4294967295
 8002326:	4770      	bx	lr
 8002328:	20000120 	.word	0x20000120

0800232c <_isatty>:
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <_isatty+0xc>)
 800232e:	2258      	movs	r2, #88	; 0x58
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	2000      	movs	r0, #0
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000120 	.word	0x20000120

0800233c <_lseek>:
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <_lseek+0xc>)
 800233e:	2258      	movs	r2, #88	; 0x58
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f04f 30ff 	mov.w	r0, #4294967295
 8002346:	4770      	bx	lr
 8002348:	20000120 	.word	0x20000120

0800234c <_sbrk>:
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <_sbrk+0x14>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4602      	mov	r2, r0
 8002352:	b909      	cbnz	r1, 8002358 <_sbrk+0xc>
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <_sbrk+0x18>)
 8002356:	6019      	str	r1, [r3, #0]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	4402      	add	r2, r0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	4770      	bx	lr
 8002360:	20000098 	.word	0x20000098
 8002364:	20000128 	.word	0x20000128

08002368 <_init>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr

08002374 <_fini>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr
