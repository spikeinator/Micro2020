
LAB-02-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080043d8  080043d8  000143d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c0  080046c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080046c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001dc  080048a4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200002d4  080048a4  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb6a  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aeb  00000000  00000000  0002ed74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b829  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009107  00000000  00000000  0005d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f22b  00000000  00000000  000667a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001759d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  00175a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000814e  00000000  00000000  001784dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  0018062c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00180698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	080043c0 	.word	0x080043c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	080043c0 	.word	0x080043c0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:

#include<stdint.h>
int trigger=0;
TIM_HandleTypeDef HALtime7;
float timecount=0;
int main(){
 80005f0:	b500      	push	{lr}
 80005f2:	b083      	sub	sp, #12
	Sys_Init();
 80005f4:	f000 f8d4 	bl	80007a0 <Sys_Init>
	asm ("nop");
 80005f8:	bf00      	nop
	asm ("nop");
 80005fa:	bf00      	nop
    HALtime7.Instance = TIM7;
 80005fc:	4c1e      	ldr	r4, [pc, #120]	; (8000678 <main+0x88>)
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <main+0x8c>)
 8000600:	6023      	str	r3, [r4, #0]
    HALtime7.Init.Prescaler = 9999;
 8000602:	f242 730f 	movw	r3, #9999	; 0x270f
 8000606:	6063      	str	r3, [r4, #4]
    HALtime7.Init.Period = 1080;
 8000608:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800060c:	60e3      	str	r3, [r4, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <main+0x90>)
 8000610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000612:	f042 0220 	orr.w	r2, r2, #32
 8000616:	641a      	str	r2, [r3, #64]	; 0x40
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000622:	2037      	movs	r0, #55	; 0x37
 8000624:	f000 fa48 	bl	8000ab8 <HAL_NVIC_EnableIRQ>
    HAL_TIM_Base_Init(&HALtime7);
 8000628:	4620      	mov	r0, r4
 800062a:	f001 f81d 	bl	8001668 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start_IT(&HALtime7);
 800062e:	4620      	mov	r0, r4
 8000630:	f000 feac 	bl	800138c <HAL_TIM_Base_Start_IT>


	while(1){
		if (trigger){
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x94>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0fb      	beq.n	8000634 <main+0x44>
			timecount=timecount+0.1;
 800063c:	4c11      	ldr	r4, [pc, #68]	; (8000684 <main+0x94>)
 800063e:	ed94 7a01 	vldr	s14, [r4, #4]
 8000642:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000646:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000670 <main+0x80>
 800064a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800064e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000652:	ed84 7a01 	vstr	s14, [r4, #4]
			printf("%.1f\r\n",timecount);
 8000656:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800065a:	ec53 2b17 	vmov	r2, r3, d7
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <main+0x98>)
 8000660:	f002 f822 	bl	80026a8 <iprintf>
			trigger=0;
 8000664:	2300      	movs	r3, #0
 8000666:	6023      	str	r3, [r4, #0]
 8000668:	e7e4      	b.n	8000634 <main+0x44>
 800066a:	bf00      	nop
 800066c:	f3af 8000 	nop.w
 8000670:	9999999a 	.word	0x9999999a
 8000674:	3fb99999 	.word	0x3fb99999
 8000678:	2000028c 	.word	0x2000028c
 800067c:	40001400 	.word	0x40001400
 8000680:	40023800 	.word	0x40023800
 8000684:	200001f8 	.word	0x200001f8
 8000688:	080043f0 	.word	0x080043f0

0800068c <TIM7_IRQHandler>:
		}
	}
}

void TIM7_IRQHandler(){
 800068c:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&HALtime7);
 800068e:	4802      	ldr	r0, [pc, #8]	; (8000698 <TIM7_IRQHandler+0xc>)
 8000690:	f000 fe96 	bl	80013c0 <HAL_TIM_IRQHandler>
}
 8000694:	bd08      	pop	{r3, pc}
 8000696:	bf00      	nop
 8000698:	2000028c 	.word	0x2000028c

0800069c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance==TIM7){
 800069c:	6802      	ldr	r2, [r0, #0]
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d000      	beq.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0xa>
		trigger =1;

	}
}
 80006a4:	4770      	bx	lr
		trigger =1;
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	e7fa      	b.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x8>
 80006ae:	bf00      	nop
 80006b0:	40001400 	.word	0x40001400
 80006b4:	200001f8 	.word	0x200001f8

080006b8 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80006b8:	b500      	push	{lr}
 80006ba:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006ce:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d0:	2219      	movs	r2, #25
 80006d2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006d4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80006d8:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006dc:	2309      	movs	r3, #9
 80006de:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f000 fb39 	bl	8000d5c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 80006ea:	b100      	cbz	r0, 80006ee <SystemClock_Config+0x36>
 80006ec:	e7fe      	b.n	80006ec <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80006ee:	f000 faf7 	bl	8000ce0 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80006f2:	b100      	cbz	r0, 80006f6 <SystemClock_Config+0x3e>
 80006f4:	e7fe      	b.n	80006f4 <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006f6:	230f      	movs	r3, #15
 80006f8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800070e:	2107      	movs	r1, #7
 8000710:	a80d      	add	r0, sp, #52	; 0x34
 8000712:	f000 fd61 	bl	80011d8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000716:	b100      	cbz	r0, 800071a <SystemClock_Config+0x62>
 8000718:	e7fe      	b.n	8000718 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 800071a:	b013      	add	sp, #76	; 0x4c
 800071c:	f85d fb04 	ldr.w	pc, [sp], #4

08000720 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000720:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000726:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <CPU_CACHE_Enable+0x7c>)
 800072c:	2100      	movs	r1, #0
 800072e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000736:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800073a:	695a      	ldr	r2, [r3, #20]
 800073c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000740:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000746:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800074a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800074e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000752:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000756:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075a:	e00f      	b.n	800077c <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800075c:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000762:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000766:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800076a:	490c      	ldr	r1, [pc, #48]	; (800079c <CPU_CACHE_Enable+0x7c>)
 800076c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000770:	1e53      	subs	r3, r2, #1
 8000772:	2a00      	cmp	r2, #0
 8000774:	d1f2      	bne.n	800075c <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 8000776:	1e43      	subs	r3, r0, #1
 8000778:	b118      	cbz	r0, 8000782 <CPU_CACHE_Enable+0x62>
 800077a:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800077c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8000780:	e7ed      	b.n	800075e <CPU_CACHE_Enable+0x3e>
 8000782:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000786:	694b      	ldr	r3, [r1, #20]
 8000788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078c:	614b      	str	r3, [r1, #20]
 800078e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000792:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80007a0:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80007a2:	f7ff ffbd 	bl	8000720 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80007a6:	f000 f91b 	bl	80009e0 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80007aa:	f7ff ff85 	bl	80006b8 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80007ae:	4a03      	ldr	r2, [pc, #12]	; (80007bc <Sys_Init+0x1c>)
 80007b0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <Sys_Init+0x20>)
 80007b6:	f000 f873 	bl	80008a0 <initUart>
}
 80007ba:	bd08      	pop	{r3, pc}
 80007bc:	40011000 	.word	0x40011000
 80007c0:	2000020c 	.word	0x2000020c

080007c4 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 80007c4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80007c6:	f000 f921 	bl	8000a0c <HAL_IncTick>
}
 80007ca:	bd08      	pop	{r3, pc}

080007cc <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80007cc:	b530      	push	{r4, r5, lr}
 80007ce:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80007d0:	6803      	ldr	r3, [r0, #0]
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <HAL_UART_MspInit+0xc0>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d004      	beq.n	80007e2 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80007d8:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <HAL_UART_MspInit+0xc4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d02c      	beq.n	8000838 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80007de:	b00b      	add	sp, #44	; 0x2c
 80007e0:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80007e2:	4c2c      	ldr	r4, [pc, #176]	; (8000894 <HAL_UART_MspInit+0xc8>)
 80007e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6323      	str	r3, [r4, #48]	; 0x30
 80007ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80007f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fa:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000800:	2301      	movs	r3, #1
 8000802:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000808:	2307      	movs	r3, #7
 800080a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800080c:	4d22      	ldr	r5, [pc, #136]	; (8000898 <HAL_UART_MspInit+0xcc>)
 800080e:	a905      	add	r1, sp, #20
 8000810:	4628      	mov	r0, r5
 8000812:	f000 f975 	bl	8000b00 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800081c:	a905      	add	r1, sp, #20
 800081e:	4628      	mov	r0, r5
 8000820:	f000 f96e 	bl	8000b00 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000824:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6463      	str	r3, [r4, #68]	; 0x44
 800082c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	9b02      	ldr	r3, [sp, #8]
 8000836:	e7d2      	b.n	80007de <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000838:	4c16      	ldr	r4, [pc, #88]	; (8000894 <HAL_UART_MspInit+0xc8>)
 800083a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6323      	str	r3, [r4, #48]	; 0x30
 8000842:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	9303      	str	r3, [sp, #12]
 800084a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800084c:	2340      	movs	r3, #64	; 0x40
 800084e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800085c:	2308      	movs	r3, #8
 800085e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000860:	4d0e      	ldr	r5, [pc, #56]	; (800089c <HAL_UART_MspInit+0xd0>)
 8000862:	a905      	add	r1, sp, #20
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f94b 	bl	8000b00 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800086e:	a905      	add	r1, sp, #20
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f945 	bl	8000b00 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6463      	str	r3, [r4, #68]	; 0x44
 800087e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	9304      	str	r3, [sp, #16]
 8000886:	9b04      	ldr	r3, [sp, #16]
}
 8000888:	e7a9      	b.n	80007de <HAL_UART_MspInit+0x12>
 800088a:	bf00      	nop
 800088c:	40011000 	.word	0x40011000
 8000890:	40011400 	.word	0x40011400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800

080008a0 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 80008a0:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 80008a2:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 80008a4:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	2200      	movs	r2, #0
 80008a8:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 80008aa:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 80008ac:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 80008ae:	210c      	movs	r1, #12
 80008b0:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80008b2:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80008b4:	f001 fa61 	bl	8001d7a <HAL_UART_Init>
}
 80008b8:	bd08      	pop	{r3, pc}
	...

080008bc <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 80008bc:	b510      	push	{r4, lr}
 80008be:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 80008c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c4:	b292      	uxth	r2, r2
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <_write+0x14>)
 80008c8:	f001 f937 	bl	8001b3a <HAL_UART_Transmit>
	return len;
}
 80008cc:	4620      	mov	r0, r4
 80008ce:	bd10      	pop	{r4, pc}
 80008d0:	2000020c 	.word	0x2000020c

080008d4 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 80008d4:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 80008d6:	2200      	movs	r2, #0
 80008d8:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	2201      	movs	r2, #1
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <_read+0x18>)
 80008e2:	f001 f998 	bl	8001c16 <HAL_UART_Receive>
	return len;
}
 80008e6:	2001      	movs	r0, #1
 80008e8:	bd08      	pop	{r3, pc}
 80008ea:	bf00      	nop
 80008ec:	2000020c 	.word	0x2000020c

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008f6:	e003      	b.n	8000900 <LoopCopyDataInit>

080008f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008fe:	3104      	adds	r1, #4

08000900 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000904:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000906:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000908:	d3f6      	bcc.n	80008f8 <CopyDataInit>
  ldr  r2, =_sbss
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800090c:	e002      	b.n	8000914 <LoopFillZerobss>

0800090e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800090e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000910:	f842 3b04 	str.w	r3, [r2], #4

08000914 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000916:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000918:	d3f9      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800091a:	f000 f813 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fa5d 	bl	8001ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fe65 	bl	80005f0 <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800092c:	080046c8 	.word	0x080046c8
  ldr  r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000934:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000938:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800093c:	200002d4 	.word	0x200002d4

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <SystemInit+0x40>)
 8000948:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <SystemInit+0x44>)
 8000956:	6819      	ldr	r1, [r3, #0]
 8000958:	f041 0101 	orr.w	r1, r1, #1
 800095c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800095e:	2000      	movs	r0, #0
 8000960:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000962:	681c      	ldr	r4, [r3, #0]
 8000964:	4909      	ldr	r1, [pc, #36]	; (800098c <SystemInit+0x48>)
 8000966:	4021      	ands	r1, r4
 8000968:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800096a:	4909      	ldr	r1, [pc, #36]	; (8000990 <SystemInit+0x4c>)
 800096c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800096e:	6819      	ldr	r1, [r3, #0]
 8000970:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000974:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000976:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800097c:	6093      	str	r3, [r2, #8]
#endif
}
 800097e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00
 8000988:	40023800 	.word	0x40023800
 800098c:	fef6ffff 	.word	0xfef6ffff
 8000990:	24003010 	.word	0x24003010

08000994 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000994:	4770      	bx	lr
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b510      	push	{r4, lr}
 800099a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_InitTick+0x40>)
 800099e:	7818      	ldrb	r0, [r3, #0]
 80009a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <HAL_InitTick+0x44>)
 80009aa:	6810      	ldr	r0, [r2, #0]
 80009ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80009b0:	f000 f890 	bl	8000ad4 <HAL_SYSTICK_Config>
 80009b4:	b968      	cbnz	r0, 80009d2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	2c0f      	cmp	r4, #15
 80009b8:	d901      	bls.n	80009be <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	e00a      	b.n	80009d4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	2200      	movs	r2, #0
 80009c0:	4621      	mov	r1, r4
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	f000 f845 	bl	8000a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_InitTick+0x40>)
 80009cc:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2000      	movs	r0, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
}
 80009d4:	bd10      	pop	{r4, pc}
 80009d6:	bf00      	nop
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000000 	.word	0x20000000

080009e0 <HAL_Init>:
{
 80009e0:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_Init+0x28>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f81b 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff ffcc 	bl	8000998 <HAL_InitTick>
  HAL_MspInit();
 8000a00:	f7ff ffc8 	bl	8000994 <HAL_MspInit>
}
 8000a04:	2000      	movs	r0, #0
 8000a06:	bd08      	pop	{r3, pc}
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x10>)
 8000a0e:	6811      	ldr	r1, [r2, #0]
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <HAL_IncTick+0x14>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	440b      	add	r3, r1
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200002cc 	.word	0x200002cc
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <HAL_GetTick+0x8>)
 8000a26:	6818      	ldr	r0, [r3, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200002cc 	.word	0x200002cc

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4906      	ldr	r1, [pc, #24]	; (8000a4c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000a32:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a38:	041b      	lsls	r3, r3, #16
 8000a3a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	0200      	lsls	r0, r0, #8
 8000a3e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a42:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a44:	4a02      	ldr	r2, [pc, #8]	; (8000a50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a46:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000a48:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	05fa0000 	.word	0x05fa0000

08000a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a54:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_NVIC_SetPriority+0x58>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5e:	f1c3 0407 	rsb	r4, r3, #7
 8000a62:	2c04      	cmp	r4, #4
 8000a64:	bf28      	it	cs
 8000a66:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a68:	1d1d      	adds	r5, r3, #4
 8000a6a:	2d06      	cmp	r5, #6
 8000a6c:	d914      	bls.n	8000a98 <HAL_NVIC_SetPriority+0x44>
 8000a6e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 35ff 	mov.w	r5, #4294967295
 8000a74:	fa05 f404 	lsl.w	r4, r5, r4
 8000a78:	ea21 0104 	bic.w	r1, r1, r4
 8000a7c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7e:	fa05 f303 	lsl.w	r3, r5, r3
 8000a82:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a86:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	db07      	blt.n	8000a9c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	0109      	lsls	r1, r1, #4
 8000a8e:	b2c9      	uxtb	r1, r1
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_NVIC_SetPriority+0x5c>)
 8000a92:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a94:	bc30      	pop	{r4, r5}
 8000a96:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e7e9      	b.n	8000a70 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	f000 000f 	and.w	r0, r0, #15
 8000aa0:	0109      	lsls	r1, r1, #4
 8000aa2:	b2c9      	uxtb	r1, r1
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_NVIC_SetPriority+0x60>)
 8000aa6:	5419      	strb	r1, [r3, r0]
 8000aa8:	e7f4      	b.n	8000a94 <HAL_NVIC_SetPriority+0x40>
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00
 8000ab0:	e000e400 	.word	0xe000e400
 8000ab4:	e000ed14 	.word	0xe000ed14

08000ab8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	db07      	blt.n	8000acc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abc:	f000 021f 	and.w	r2, r0, #31
 8000ac0:	0940      	lsrs	r0, r0, #5
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	4a02      	ldr	r2, [pc, #8]	; (8000ad0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ac8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d20a      	bcs.n	8000af2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_SYSTICK_Config+0x24>)
 8000ade:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_SYSTICK_Config+0x28>)
 8000ae2:	21f0      	movs	r1, #240	; 0xf0
 8000ae4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	2000      	movs	r0, #0
 8000aea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	f200 80e2 	bhi.w	8000ccc <HAL_GPIO_Init+0x1cc>
{
 8000b08:	b4f0      	push	{r4, r5, r6, r7}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	e039      	b.n	8000b82 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b0e:	2209      	movs	r2, #9
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000b12:	2200      	movs	r2, #0
 8000b14:	40b2      	lsls	r2, r6
 8000b16:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b18:	3402      	adds	r4, #2
 8000b1a:	4e6d      	ldr	r6, [pc, #436]	; (8000cd0 <HAL_GPIO_Init+0x1d0>)
 8000b1c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b20:	4a6c      	ldr	r2, [pc, #432]	; (8000cd4 <HAL_GPIO_Init+0x1d4>)
 8000b22:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	43ea      	mvns	r2, r5
 8000b26:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2a:	684f      	ldr	r7, [r1, #4]
 8000b2c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000b30:	d001      	beq.n	8000b36 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000b32:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000b36:	4c67      	ldr	r4, [pc, #412]	; (8000cd4 <HAL_GPIO_Init+0x1d4>)
 8000b38:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000b3a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b3c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b40:	684f      	ldr	r7, [r1, #4]
 8000b42:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b46:	d001      	beq.n	8000b4c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000b48:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000b4c:	4c61      	ldr	r4, [pc, #388]	; (8000cd4 <HAL_GPIO_Init+0x1d4>)
 8000b4e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b50:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b52:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b56:	684f      	ldr	r7, [r1, #4]
 8000b58:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b5c:	d001      	beq.n	8000b62 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000b5e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000b62:	4c5c      	ldr	r4, [pc, #368]	; (8000cd4 <HAL_GPIO_Init+0x1d4>)
 8000b64:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000b66:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b68:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6a:	684e      	ldr	r6, [r1, #4]
 8000b6c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b70:	d001      	beq.n	8000b76 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000b72:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000b76:	4c57      	ldr	r4, [pc, #348]	; (8000cd4 <HAL_GPIO_Init+0x1d4>)
 8000b78:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	f200 80a2 	bhi.w	8000cc6 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000b82:	2201      	movs	r2, #1
 8000b84:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	680c      	ldr	r4, [r1, #0]
 8000b88:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000b8c:	42aa      	cmp	r2, r5
 8000b8e:	d1f4      	bne.n	8000b7a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b90:	684c      	ldr	r4, [r1, #4]
 8000b92:	2c12      	cmp	r4, #18
 8000b94:	bf18      	it	ne
 8000b96:	2c02      	cmpne	r4, #2
 8000b98:	d110      	bne.n	8000bbc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000b9a:	08de      	lsrs	r6, r3, #3
 8000b9c:	3608      	adds	r6, #8
 8000b9e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ba2:	f003 0407 	and.w	r4, r3, #7
 8000ba6:	00a7      	lsls	r7, r4, #2
 8000ba8:	240f      	movs	r4, #15
 8000baa:	40bc      	lsls	r4, r7
 8000bac:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bb0:	690c      	ldr	r4, [r1, #16]
 8000bb2:	40bc      	lsls	r4, r7
 8000bb4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000bb8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000bbc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bbe:	005f      	lsls	r7, r3, #1
 8000bc0:	2603      	movs	r6, #3
 8000bc2:	40be      	lsls	r6, r7
 8000bc4:	43f6      	mvns	r6, r6
 8000bc6:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bca:	684c      	ldr	r4, [r1, #4]
 8000bcc:	f004 0403 	and.w	r4, r4, #3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000bd6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd8:	684c      	ldr	r4, [r1, #4]
 8000bda:	f104 3cff 	add.w	ip, r4, #4294967295
 8000bde:	2c11      	cmp	r4, #17
 8000be0:	bf18      	it	ne
 8000be2:	f1bc 0f01 	cmpne.w	ip, #1
 8000be6:	d901      	bls.n	8000bec <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be8:	2c12      	cmp	r4, #18
 8000bea:	d111      	bne.n	8000c10 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000bec:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bee:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bf2:	68cc      	ldr	r4, [r1, #12]
 8000bf4:	40bc      	lsls	r4, r7
 8000bf6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000bfa:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bfc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfe:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c02:	684c      	ldr	r4, [r1, #4]
 8000c04:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000c0e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c10:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c12:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c14:	688a      	ldr	r2, [r1, #8]
 8000c16:	40ba      	lsls	r2, r7
 8000c18:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000c1a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1c:	684a      	ldr	r2, [r1, #4]
 8000c1e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c22:	d0aa      	beq.n	8000b7a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4a2c      	ldr	r2, [pc, #176]	; (8000cd8 <HAL_GPIO_Init+0x1d8>)
 8000c26:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000c28:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000c2c:	6454      	str	r4, [r2, #68]	; 0x44
 8000c2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c30:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c38:	089c      	lsrs	r4, r3, #2
 8000c3a:	1ca6      	adds	r6, r4, #2
 8000c3c:	4a24      	ldr	r2, [pc, #144]	; (8000cd0 <HAL_GPIO_Init+0x1d0>)
 8000c3e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c42:	f003 0203 	and.w	r2, r3, #3
 8000c46:	0096      	lsls	r6, r2, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	40b2      	lsls	r2, r6
 8000c4c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <HAL_GPIO_Init+0x1dc>)
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f43f af5d 	beq.w	8000b12 <HAL_GPIO_Init+0x12>
 8000c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d022      	beq.n	8000ca6 <HAL_GPIO_Init+0x1a6>
 8000c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c64:	4290      	cmp	r0, r2
 8000c66:	d020      	beq.n	8000caa <HAL_GPIO_Init+0x1aa>
 8000c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d01e      	beq.n	8000cae <HAL_GPIO_Init+0x1ae>
 8000c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d01c      	beq.n	8000cb2 <HAL_GPIO_Init+0x1b2>
 8000c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d01a      	beq.n	8000cb6 <HAL_GPIO_Init+0x1b6>
 8000c80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d018      	beq.n	8000cba <HAL_GPIO_Init+0x1ba>
 8000c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	d016      	beq.n	8000cbe <HAL_GPIO_Init+0x1be>
 8000c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d014      	beq.n	8000cc2 <HAL_GPIO_Init+0x1c2>
 8000c98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f43f af36 	beq.w	8000b0e <HAL_GPIO_Init+0xe>
 8000ca2:	220a      	movs	r2, #10
 8000ca4:	e736      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	e734      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000caa:	2202      	movs	r2, #2
 8000cac:	e732      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000cae:	2203      	movs	r2, #3
 8000cb0:	e730      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	e72e      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000cb6:	2205      	movs	r2, #5
 8000cb8:	e72c      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000cba:	2206      	movs	r2, #6
 8000cbc:	e72a      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	e728      	b.n	8000b14 <HAL_GPIO_Init+0x14>
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	e726      	b.n	8000b14 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000cca:	4770      	bx	lr
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40013c00 	.word	0x40013c00
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ce0:	b510      	push	{r4, lr}
 8000ce2:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_PWREx_EnableOverDrive+0x74>)
 8000ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_PWREx_EnableOverDrive+0x78>)
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d02:	f7ff fe8f 	bl	8000a24 <HAL_GetTick>
 8000d06:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d10:	d108      	bne.n	8000d24 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d12:	f7ff fe87 	bl	8000a24 <HAL_GetTick>
 8000d16:	1b00      	subs	r0, r0, r4
 8000d18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d1c:	d9f4      	bls.n	8000d08 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000d20:	b002      	add	sp, #8
 8000d22:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000d2e:	f7ff fe79 	bl	8000a24 <HAL_GetTick>
 8000d32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d3c:	d107      	bne.n	8000d4e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d3e:	f7ff fe71 	bl	8000a24 <HAL_GetTick>
 8000d42:	1b00      	subs	r0, r0, r4
 8000d44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d48:	d9f4      	bls.n	8000d34 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	e7e8      	b.n	8000d20 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e7e6      	b.n	8000d20 <HAL_PWREx_EnableOverDrive+0x40>
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	f000 81dc 	beq.w	800111a <HAL_RCC_OscConfig+0x3be>
{
 8000d62:	b570      	push	{r4, r5, r6, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	6803      	ldr	r3, [r0, #0]
 8000d6a:	f013 0f01 	tst.w	r3, #1
 8000d6e:	d029      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4ba2      	ldr	r3, [pc, #648]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d01a      	beq.n	8000db2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d7c:	4b9f      	ldr	r3, [pc, #636]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d00f      	beq.n	8000da8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8e:	d040      	beq.n	8000e12 <HAL_RCC_OscConfig+0xb6>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d154      	bne.n	8000e3e <HAL_RCC_OscConfig+0xe2>
 8000d94:	4b99      	ldr	r3, [pc, #612]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e039      	b.n	8000e1c <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da8:	4b94      	ldr	r3, [pc, #592]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000db0:	d0ea      	beq.n	8000d88 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	4b92      	ldr	r3, [pc, #584]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dba:	d003      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x68>
 8000dbc:	6863      	ldr	r3, [r4, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 81ad 	beq.w	800111e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	f013 0f02 	tst.w	r3, #2
 8000dca:	d075      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dcc:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f013 0f0c 	tst.w	r3, #12
 8000dd4:	d05e      	beq.n	8000e94 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd6:	4b89      	ldr	r3, [pc, #548]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 030c 	and.w	r3, r3, #12
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d053      	beq.n	8000e8a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000de2:	68e3      	ldr	r3, [r4, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 808a 	beq.w	8000efe <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dea:	4a84      	ldr	r2, [pc, #528]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df4:	f7ff fe16 	bl	8000a24 <HAL_GetTick>
 8000df8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfa:	4b80      	ldr	r3, [pc, #512]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f013 0f02 	tst.w	r3, #2
 8000e02:	d173      	bne.n	8000eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e04:	f7ff fe0e 	bl	8000a24 <HAL_GetTick>
 8000e08:	1b40      	subs	r0, r0, r5
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9f5      	bls.n	8000dfa <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000e0e:	2003      	movs	r0, #3
 8000e10:	e188      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	b32b      	cbz	r3, 8000e6c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000e20:	f7ff fe00 	bl	8000a24 <HAL_GetTick>
 8000e24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	4b75      	ldr	r3, [pc, #468]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e2e:	d1c9      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fdf8 	bl	8000a24 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2864      	cmp	r0, #100	; 0x64
 8000e38:	d9f5      	bls.n	8000e26 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	e172      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e42:	d009      	beq.n	8000e58 <HAL_RCC_OscConfig+0xfc>
 8000e44:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e7e1      	b.n	8000e1c <HAL_RCC_OscConfig+0xc0>
 8000e58:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e7d7      	b.n	8000e1c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fdda 	bl	8000a24 <HAL_GetTick>
 8000e70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	4b62      	ldr	r3, [pc, #392]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e7a:	d0a3      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fdd2 	bl	8000a24 <HAL_GetTick>
 8000e80:	1b40      	subs	r0, r0, r5
 8000e82:	2864      	cmp	r0, #100	; 0x64
 8000e84:	d9f5      	bls.n	8000e72 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000e86:	2003      	movs	r0, #3
 8000e88:	e14c      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e92:	d1a6      	bne.n	8000de2 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f013 0f02 	tst.w	r3, #2
 8000e9c:	d004      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x14c>
 8000e9e:	68e3      	ldr	r3, [r4, #12]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d001      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e13d      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4a54      	ldr	r2, [pc, #336]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000eb0:	6921      	ldr	r1, [r4, #16]
 8000eb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eb6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f013 0f08 	tst.w	r3, #8
 8000ebe:	d046      	beq.n	8000f4e <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ec0:	6963      	ldr	r3, [r4, #20]
 8000ec2:	b383      	cbz	r3, 8000f26 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec4:	4a4d      	ldr	r2, [pc, #308]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000ec6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fda9 	bl	8000a24 <HAL_GetTick>
 8000ed2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed4:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ed8:	f013 0f02 	tst.w	r3, #2
 8000edc:	d137      	bne.n	8000f4e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ede:	f7ff fda1 	bl	8000a24 <HAL_GetTick>
 8000ee2:	1b40      	subs	r0, r0, r5
 8000ee4:	2802      	cmp	r0, #2
 8000ee6:	d9f5      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000ee8:	2003      	movs	r0, #3
 8000eea:	e11b      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eec:	4a43      	ldr	r2, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000eee:	6813      	ldr	r3, [r2, #0]
 8000ef0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ef4:	6921      	ldr	r1, [r4, #16]
 8000ef6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e7dc      	b.n	8000eb8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000efe:	4a3f      	ldr	r2, [pc, #252]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f08:	f7ff fd8c 	bl	8000a24 <HAL_GetTick>
 8000f0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f013 0f02 	tst.w	r3, #2
 8000f16:	d0cf      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fd84 	bl	8000a24 <HAL_GetTick>
 8000f1c:	1b40      	subs	r0, r0, r5
 8000f1e:	2802      	cmp	r0, #2
 8000f20:	d9f5      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000f22:	2003      	movs	r0, #3
 8000f24:	e0fe      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f26:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f28:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f30:	f7ff fd78 	bl	8000a24 <HAL_GetTick>
 8000f34:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f3a:	f013 0f02 	tst.w	r3, #2
 8000f3e:	d006      	beq.n	8000f4e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fd70 	bl	8000a24 <HAL_GetTick>
 8000f44:	1b40      	subs	r0, r0, r5
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9f5      	bls.n	8000f36 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e0ea      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f013 0f04 	tst.w	r3, #4
 8000f54:	d07e      	beq.n	8001054 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f5e:	d11e      	bne.n	8000f9e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f74:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_RCC_OscConfig+0x2a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f7e:	d010      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	68a3      	ldr	r3, [r4, #8]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d021      	beq.n	8000fca <HAL_RCC_OscConfig+0x26e>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d13c      	bne.n	8001004 <HAL_RCC_OscConfig+0x2a8>
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	671a      	str	r2, [r3, #112]	; 0x70
 8000f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f96:	f022 0204 	bic.w	r2, r2, #4
 8000f9a:	671a      	str	r2, [r3, #112]	; 0x70
 8000f9c:	e01a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	e7e9      	b.n	8000f76 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_RCC_OscConfig+0x2a4>)
 8000fa4:	6813      	ldr	r3, [r2, #0]
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000faa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000fac:	f7ff fd3a 	bl	8000a24 <HAL_GetTick>
 8000fb0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_RCC_OscConfig+0x2a4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fba:	d1e1      	bne.n	8000f80 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000fbc:	f7ff fd32 	bl	8000a24 <HAL_GetTick>
 8000fc0:	1b80      	subs	r0, r0, r6
 8000fc2:	2864      	cmp	r0, #100	; 0x64
 8000fc4:	d9f5      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	e0ac      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000fcc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fd4:	68a3      	ldr	r3, [r4, #8]
 8000fd6:	b35b      	cbz	r3, 8001030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fd24 	bl	8000a24 <HAL_GetTick>
 8000fdc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_RCC_OscConfig+0x2a0>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe2:	f013 0f02 	tst.w	r3, #2
 8000fe6:	d134      	bne.n	8001052 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fd1c 	bl	8000a24 <HAL_GetTick>
 8000fec:	1b80      	subs	r0, r0, r6
 8000fee:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ff2:	4298      	cmp	r0, r3
 8000ff4:	d9f3      	bls.n	8000fde <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	e094      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	2b05      	cmp	r3, #5
 8001006:	d009      	beq.n	800101c <HAL_RCC_OscConfig+0x2c0>
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 800100a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	671a      	str	r2, [r3, #112]	; 0x70
 8001012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001014:	f022 0204 	bic.w	r2, r2, #4
 8001018:	671a      	str	r2, [r3, #112]	; 0x70
 800101a:	e7db      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 800101e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001020:	f042 0204 	orr.w	r2, r2, #4
 8001024:	671a      	str	r2, [r3, #112]	; 0x70
 8001026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001028:	f042 0201 	orr.w	r2, r2, #1
 800102c:	671a      	str	r2, [r3, #112]	; 0x70
 800102e:	e7d1      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001030:	f7ff fcf8 	bl	8000a24 <HAL_GetTick>
 8001034:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 8001038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800103a:	f013 0f02 	tst.w	r3, #2
 800103e:	d008      	beq.n	8001052 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001040:	f7ff fcf0 	bl	8000a24 <HAL_GetTick>
 8001044:	1b80      	subs	r0, r0, r6
 8001046:	f241 3388 	movw	r3, #5000	; 0x1388
 800104a:	4298      	cmp	r0, r3
 800104c:	d9f3      	bls.n	8001036 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800104e:	2003      	movs	r0, #3
 8001050:	e068      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001052:	b9f5      	cbnz	r5, 8001092 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001054:	69a3      	ldr	r3, [r4, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800105a:	4a34      	ldr	r2, [pc, #208]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 800105c:	6892      	ldr	r2, [r2, #8]
 800105e:	f002 020c 	and.w	r2, r2, #12
 8001062:	2a08      	cmp	r2, #8
 8001064:	d060      	beq.n	8001128 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001066:	2b02      	cmp	r3, #2
 8001068:	d019      	beq.n	800109e <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fcd6 	bl	8000a24 <HAL_GetTick>
 8001078:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001082:	d048      	beq.n	8001116 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001084:	f7ff fcce 	bl	8000a24 <HAL_GetTick>
 8001088:	1b00      	subs	r0, r0, r4
 800108a:	2802      	cmp	r0, #2
 800108c:	d9f5      	bls.n	800107a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e048      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 8001094:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	e7da      	b.n	8001054 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 80010a0:	6813      	ldr	r3, [r2, #0]
 80010a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcbc 	bl	8000a24 <HAL_GetTick>
 80010ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010b6:	d006      	beq.n	80010c6 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b8:	f7ff fcb4 	bl	8000a24 <HAL_GetTick>
 80010bc:	1b40      	subs	r0, r0, r5
 80010be:	2802      	cmp	r0, #2
 80010c0:	d9f5      	bls.n	80010ae <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
 80010c4:	e02e      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c6:	69e3      	ldr	r3, [r4, #28]
 80010c8:	6a22      	ldr	r2, [r4, #32]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010d4:	0852      	lsrs	r2, r2, #1
 80010d6:	3a01      	subs	r2, #1
 80010d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010e8:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 80010ea:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc96 	bl	8000a24 <HAL_GetTick>
 80010f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_RCC_OscConfig+0x3d0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001104:	f7ff fc8e 	bl	8000a24 <HAL_GetTick>
 8001108:	1b00      	subs	r0, r0, r4
 800110a:	2802      	cmp	r0, #2
 800110c:	d9f5      	bls.n	80010fa <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001112:	2000      	movs	r0, #0
 8001114:	e006      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
 8001116:	2000      	movs	r0, #0
 8001118:	e004      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
}
 800111c:	4770      	bx	lr
        return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001122:	2000      	movs	r0, #0
}
 8001124:	b002      	add	sp, #8
 8001126:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
 800112a:	e7fb      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b04      	cmp	r3, #4
 800113a:	d044      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x96>
 800113c:	2b08      	cmp	r3, #8
 800113e:	d001      	beq.n	8001144 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001140:	4823      	ldr	r0, [pc, #140]	; (80011d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001142:	4770      	bx	lr
{
 8001144:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001156:	d013      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800115a:	6859      	ldr	r1, [r3, #4]
 800115c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001160:	2300      	movs	r3, #0
 8001162:	481c      	ldr	r0, [pc, #112]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001164:	fba1 0100 	umull	r0, r1, r1, r0
 8001168:	f7ff f8c2 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001174:	3301      	adds	r3, #1
 8001176:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001178:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800117c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001188:	461e      	mov	r6, r3
 800118a:	2700      	movs	r7, #0
 800118c:	015c      	lsls	r4, r3, #5
 800118e:	2500      	movs	r5, #0
 8001190:	1ae4      	subs	r4, r4, r3
 8001192:	eb65 0507 	sbc.w	r5, r5, r7
 8001196:	01a9      	lsls	r1, r5, #6
 8001198:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800119c:	01a0      	lsls	r0, r4, #6
 800119e:	1b00      	subs	r0, r0, r4
 80011a0:	eb61 0105 	sbc.w	r1, r1, r5
 80011a4:	00cb      	lsls	r3, r1, #3
 80011a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011aa:	00c4      	lsls	r4, r0, #3
 80011ac:	19a0      	adds	r0, r4, r6
 80011ae:	eb43 0107 	adc.w	r1, r3, r7
 80011b2:	028b      	lsls	r3, r1, #10
 80011b4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80011b8:	0284      	lsls	r4, r0, #10
 80011ba:	4620      	mov	r0, r4
 80011bc:	4619      	mov	r1, r3
 80011be:	2300      	movs	r3, #0
 80011c0:	f7ff f896 	bl	80002f0 <__aeabi_uldivmod>
 80011c4:	e7d2      	b.n	800116c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	00f42400 	.word	0x00f42400
 80011d4:	017d7840 	.word	0x017d7840

080011d8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80011d8:	2800      	cmp	r0, #0
 80011da:	f000 80a2 	beq.w	8001322 <HAL_RCC_ClockConfig+0x14a>
{
 80011de:	b570      	push	{r4, r5, r6, lr}
 80011e0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e2:	4b52      	ldr	r3, [pc, #328]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d20c      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	428b      	cmp	r3, r1
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
}
 8001206:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f013 0f02 	tst.w	r3, #2
 800120e:	d017      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	f013 0f04 	tst.w	r3, #4
 8001214:	d004      	beq.n	8001220 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001216:	4a46      	ldr	r2, [pc, #280]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001218:	6893      	ldr	r3, [r2, #8]
 800121a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800121e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	f013 0f08 	tst.w	r3, #8
 8001226:	d004      	beq.n	8001232 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001228:	4a41      	ldr	r2, [pc, #260]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 800122a:	6893      	ldr	r3, [r2, #8]
 800122c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001230:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001232:	4a3f      	ldr	r2, [pc, #252]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001234:	6893      	ldr	r3, [r2, #8]
 8001236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800123a:	68a0      	ldr	r0, [r4, #8]
 800123c:	4303      	orrs	r3, r0
 800123e:	6093      	str	r3, [r2, #8]
 8001240:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	f013 0f01 	tst.w	r3, #1
 8001248:	d031      	beq.n	80012ae <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	6863      	ldr	r3, [r4, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d020      	beq.n	8001292 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001250:	2b02      	cmp	r3, #2
 8001252:	d025      	beq.n	80012a0 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4a36      	ldr	r2, [pc, #216]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	f012 0f02 	tst.w	r2, #2
 800125c:	d063      	beq.n	8001326 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001260:	688a      	ldr	r2, [r1, #8]
 8001262:	f022 0203 	bic.w	r2, r2, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800126a:	f7ff fbdb 	bl	8000a24 <HAL_GetTick>
 800126e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	6862      	ldr	r2, [r4, #4]
 800127a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800127e:	d016      	beq.n	80012ae <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fbd0 	bl	8000a24 <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	f241 3388 	movw	r3, #5000	; 0x1388
 800128a:	4298      	cmp	r0, r3
 800128c:	d9f0      	bls.n	8001270 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e7b9      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800129a:	d1e0      	bne.n	800125e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
 800129e:	e7b2      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012a8:	d1d9      	bne.n	800125e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e7ab      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	42ab      	cmp	r3, r5
 80012b8:	d90c      	bls.n	80012d4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	f023 030f 	bic.w	r3, r3, #15
 80012c2:	432b      	orrs	r3, r5
 80012c4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	42ab      	cmp	r3, r5
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	e798      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f013 0f04 	tst.w	r3, #4
 80012da:	d006      	beq.n	80012ea <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 80012de:	6893      	ldr	r3, [r2, #8]
 80012e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012e4:	68e1      	ldr	r1, [r4, #12]
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	f013 0f08 	tst.w	r3, #8
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 80012f4:	6893      	ldr	r3, [r2, #8]
 80012f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012fa:	6921      	ldr	r1, [r4, #16]
 80012fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001300:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001302:	f7ff ff15 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_RCC_ClockConfig+0x15c>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	40d8      	lsrs	r0, r3
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_RCC_ClockConfig+0x160>)
 8001316:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001318:	200f      	movs	r0, #15
 800131a:	f7ff fb3d 	bl	8000998 <HAL_InitTick>
  return HAL_OK;
 800131e:	2000      	movs	r0, #0
 8001320:	e771      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
}
 8001324:	4770      	bx	lr
        return HAL_ERROR;
 8001326:	2001      	movs	r0, #1
 8001328:	e76d      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	080043d8 	.word	0x080043d8
 8001338:	20000000 	.word	0x20000000

0800133c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <HAL_RCC_GetHCLKFreq+0x8>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800134a:	f7ff fff7 	bl	800133c <HAL_RCC_GetHCLKFreq>
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001356:	4a03      	ldr	r2, [pc, #12]	; (8001364 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
}
 800135a:	40d8      	lsrs	r0, r3
 800135c:	bd08      	pop	{r3, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	080043e8 	.word	0x080043e8

08001368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001368:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800136a:	f7ff ffe7 	bl	800133c <HAL_RCC_GetHCLKFreq>
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001376:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
}
 800137a:	40d8      	lsrs	r0, r3
 800137c:	bd08      	pop	{r3, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	080043e8 	.word	0x080043e8

08001388 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001388:	4770      	bx	lr
	...

0800138c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800138c:	6802      	ldr	r2, [r0, #0]
 800138e:	68d3      	ldr	r3, [r2, #12]
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001396:	6802      	ldr	r2, [r0, #0]
 8001398:	6891      	ldr	r1, [r2, #8]
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_TIM_Base_Start_IT+0x28>)
 800139c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800139e:	2b06      	cmp	r3, #6
 80013a0:	bf18      	it	ne
 80013a2:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80013a6:	d003      	beq.n	80013b0 <HAL_TIM_Base_Start_IT+0x24>
  {
    __HAL_TIM_ENABLE(htim);
 80013a8:	6813      	ldr	r3, [r2, #0]
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80013b0:	2000      	movs	r0, #0
 80013b2:	4770      	bx	lr
 80013b4:	00010007 	.word	0x00010007

080013b8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013b8:	4770      	bx	lr

080013ba <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013ba:	4770      	bx	lr

080013bc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013bc:	4770      	bx	lr

080013be <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013be:	4770      	bx	lr

080013c0 <HAL_TIM_IRQHandler>:
{
 80013c0:	b510      	push	{r4, lr}
 80013c2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	f012 0f02 	tst.w	r2, #2
 80013cc:	d011      	beq.n	80013f2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	f012 0f02 	tst.w	r2, #2
 80013d4:	d00d      	beq.n	80013f2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013d6:	f06f 0202 	mvn.w	r2, #2
 80013da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013dc:	2301      	movs	r3, #1
 80013de:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013e0:	6803      	ldr	r3, [r0, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f013 0f03 	tst.w	r3, #3
 80013e8:	d079      	beq.n	80014de <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80013ea:	f7ff ffe6 	bl	80013ba <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ee:	2300      	movs	r3, #0
 80013f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	f012 0f04 	tst.w	r2, #4
 80013fa:	d012      	beq.n	8001422 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	f012 0f04 	tst.w	r2, #4
 8001402:	d00e      	beq.n	8001422 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001404:	f06f 0204 	mvn.w	r2, #4
 8001408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800140a:	2302      	movs	r3, #2
 800140c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001416:	d068      	beq.n	80014ea <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff ffce 	bl	80013ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141e:	2300      	movs	r3, #0
 8001420:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	f012 0f08 	tst.w	r2, #8
 800142a:	d012      	beq.n	8001452 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	f012 0f08 	tst.w	r2, #8
 8001432:	d00e      	beq.n	8001452 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001434:	f06f 0208 	mvn.w	r2, #8
 8001438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800143a:	2304      	movs	r3, #4
 800143c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f013 0f03 	tst.w	r3, #3
 8001446:	d057      	beq.n	80014f8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff ffb6 	bl	80013ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800144e:	2300      	movs	r3, #0
 8001450:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	f012 0f10 	tst.w	r2, #16
 800145a:	d012      	beq.n	8001482 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	f012 0f10 	tst.w	r2, #16
 8001462:	d00e      	beq.n	8001482 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001464:	f06f 0210 	mvn.w	r2, #16
 8001468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800146a:	2308      	movs	r3, #8
 800146c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001476:	d046      	beq.n	8001506 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff ff9e 	bl	80013ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147e:	2300      	movs	r3, #0
 8001480:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	f012 0f01 	tst.w	r2, #1
 800148a:	d003      	beq.n	8001494 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	f012 0f01 	tst.w	r2, #1
 8001492:	d13f      	bne.n	8001514 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	f012 0f80 	tst.w	r2, #128	; 0x80
 800149c:	d003      	beq.n	80014a6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014a4:	d13d      	bne.n	8001522 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80014ae:	d003      	beq.n	80014b8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014b6:	d13b      	bne.n	8001530 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80014c0:	d003      	beq.n	80014ca <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80014c8:	d139      	bne.n	800153e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	f012 0f20 	tst.w	r2, #32
 80014d2:	d003      	beq.n	80014dc <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	f012 0f20 	tst.w	r2, #32
 80014da:	d137      	bne.n	800154c <HAL_TIM_IRQHandler+0x18c>
}
 80014dc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014de:	f7ff ff6b 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff6a 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
 80014e8:	e781      	b.n	80013ee <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff ff64 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff ff63 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
 80014f6:	e792      	b.n	800141e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff ff5d 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ff5c 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
 8001504:	e7a3      	b.n	800144e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ff56 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff ff55 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
 8001512:	e7b4      	b.n	800147e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001514:	f06f 0201 	mvn.w	r2, #1
 8001518:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff f8be 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
 8001520:	e7b8      	b.n	8001494 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001522:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001526:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001528:	4620      	mov	r0, r4
 800152a:	f000 f8b7 	bl	800169c <HAL_TIMEx_BreakCallback>
 800152e:	e7ba      	b.n	80014a6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001530:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001534:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001536:	4620      	mov	r0, r4
 8001538:	f000 f8b1 	bl	800169e <HAL_TIMEx_Break2Callback>
 800153c:	e7bc      	b.n	80014b8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800153e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001542:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff ff3a 	bl	80013be <HAL_TIM_TriggerCallback>
 800154a:	e7be      	b.n	80014ca <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800154c:	f06f 0220 	mvn.w	r2, #32
 8001550:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001552:	4620      	mov	r0, r4
 8001554:	f000 f8a1 	bl	800169a <HAL_TIMEx_CommutCallback>
}
 8001558:	e7c0      	b.n	80014dc <HAL_TIM_IRQHandler+0x11c>
	...

0800155c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800155c:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800155e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001560:	4c3a      	ldr	r4, [pc, #232]	; (800164c <TIM_Base_SetConfig+0xf0>)
 8001562:	42a0      	cmp	r0, r4
 8001564:	bf14      	ite	ne
 8001566:	2400      	movne	r4, #0
 8001568:	2401      	moveq	r4, #1
 800156a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800156e:	bf14      	ite	ne
 8001570:	4622      	movne	r2, r4
 8001572:	f044 0201 	orreq.w	r2, r4, #1
 8001576:	b9aa      	cbnz	r2, 80015a4 <TIM_Base_SetConfig+0x48>
 8001578:	4d35      	ldr	r5, [pc, #212]	; (8001650 <TIM_Base_SetConfig+0xf4>)
 800157a:	42a8      	cmp	r0, r5
 800157c:	bf14      	ite	ne
 800157e:	2500      	movne	r5, #0
 8001580:	2501      	moveq	r5, #1
 8001582:	4e34      	ldr	r6, [pc, #208]	; (8001654 <TIM_Base_SetConfig+0xf8>)
 8001584:	42b0      	cmp	r0, r6
 8001586:	d00d      	beq.n	80015a4 <TIM_Base_SetConfig+0x48>
 8001588:	b965      	cbnz	r5, 80015a4 <TIM_Base_SetConfig+0x48>
 800158a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800158e:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8001592:	42a8      	cmp	r0, r5
 8001594:	bf14      	ite	ne
 8001596:	2500      	movne	r5, #0
 8001598:	2501      	moveq	r5, #1
 800159a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800159e:	42b0      	cmp	r0, r6
 80015a0:	d000      	beq.n	80015a4 <TIM_Base_SetConfig+0x48>
 80015a2:	b11d      	cbz	r5, 80015ac <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015a8:	684d      	ldr	r5, [r1, #4]
 80015aa:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015ac:	2a00      	cmp	r2, #0
 80015ae:	d133      	bne.n	8001618 <TIM_Base_SetConfig+0xbc>
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <TIM_Base_SetConfig+0xf4>)
 80015b2:	4290      	cmp	r0, r2
 80015b4:	bf14      	ite	ne
 80015b6:	2200      	movne	r2, #0
 80015b8:	2201      	moveq	r2, #1
 80015ba:	4d26      	ldr	r5, [pc, #152]	; (8001654 <TIM_Base_SetConfig+0xf8>)
 80015bc:	42a8      	cmp	r0, r5
 80015be:	d02b      	beq.n	8001618 <TIM_Base_SetConfig+0xbc>
 80015c0:	bb52      	cbnz	r2, 8001618 <TIM_Base_SetConfig+0xbc>
 80015c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015c6:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80015ca:	4290      	cmp	r0, r2
 80015cc:	bf14      	ite	ne
 80015ce:	2200      	movne	r2, #0
 80015d0:	2201      	moveq	r2, #1
 80015d2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015d6:	42a8      	cmp	r0, r5
 80015d8:	d01e      	beq.n	8001618 <TIM_Base_SetConfig+0xbc>
 80015da:	b9ea      	cbnz	r2, 8001618 <TIM_Base_SetConfig+0xbc>
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <TIM_Base_SetConfig+0xfc>)
 80015de:	4290      	cmp	r0, r2
 80015e0:	bf14      	ite	ne
 80015e2:	2200      	movne	r2, #0
 80015e4:	2201      	moveq	r2, #1
 80015e6:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80015ea:	42a8      	cmp	r0, r5
 80015ec:	d014      	beq.n	8001618 <TIM_Base_SetConfig+0xbc>
 80015ee:	b99a      	cbnz	r2, 8001618 <TIM_Base_SetConfig+0xbc>
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <TIM_Base_SetConfig+0x100>)
 80015f2:	4290      	cmp	r0, r2
 80015f4:	bf14      	ite	ne
 80015f6:	2200      	movne	r2, #0
 80015f8:	2201      	moveq	r2, #1
 80015fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015fe:	42a8      	cmp	r0, r5
 8001600:	d00a      	beq.n	8001618 <TIM_Base_SetConfig+0xbc>
 8001602:	b94a      	cbnz	r2, 8001618 <TIM_Base_SetConfig+0xbc>
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <TIM_Base_SetConfig+0x104>)
 8001606:	4290      	cmp	r0, r2
 8001608:	bf14      	ite	ne
 800160a:	2200      	movne	r2, #0
 800160c:	2201      	moveq	r2, #1
 800160e:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8001612:	42a8      	cmp	r0, r5
 8001614:	d000      	beq.n	8001618 <TIM_Base_SetConfig+0xbc>
 8001616:	b11a      	cbz	r2, 8001620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800161c:	68ca      	ldr	r2, [r1, #12]
 800161e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001624:	694a      	ldr	r2, [r1, #20]
 8001626:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001628:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800162a:	688a      	ldr	r2, [r1, #8]
 800162c:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800162e:	680a      	ldr	r2, [r1, #0]
 8001630:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <TIM_Base_SetConfig+0x108>)
 8001634:	4298      	cmp	r0, r3
 8001636:	bf14      	ite	ne
 8001638:	4623      	movne	r3, r4
 800163a:	f044 0301 	orreq.w	r3, r4, #1
 800163e:	b10b      	cbz	r3, 8001644 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001640:	690b      	ldr	r3, [r1, #16]
 8001642:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001644:	2301      	movs	r3, #1
 8001646:	6143      	str	r3, [r0, #20]
}
 8001648:	bc70      	pop	{r4, r5, r6}
 800164a:	4770      	bx	lr
 800164c:	40010000 	.word	0x40010000
 8001650:	40000800 	.word	0x40000800
 8001654:	40000400 	.word	0x40000400
 8001658:	40014400 	.word	0x40014400
 800165c:	40001800 	.word	0x40001800
 8001660:	40002000 	.word	0x40002000
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001668:	b1a8      	cbz	r0, 8001696 <HAL_TIM_Base_Init+0x2e>
{
 800166a:	b510      	push	{r4, lr}
 800166c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800166e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001672:	b15b      	cbz	r3, 800168c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001674:	2302      	movs	r3, #2
 8001676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800167a:	1d21      	adds	r1, r4, #4
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	f7ff ff6d 	bl	800155c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001682:	2301      	movs	r3, #1
 8001684:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001688:	2000      	movs	r0, #0
}
 800168a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800168c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001690:	f7ff fe7a 	bl	8001388 <HAL_TIM_Base_MspInit>
 8001694:	e7ee      	b.n	8001674 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001696:	2001      	movs	r0, #1
}
 8001698:	4770      	bx	lr

0800169a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800169a:	4770      	bx	lr

0800169c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800169c:	4770      	bx	lr

0800169e <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800169e:	4770      	bx	lr

080016a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016a4:	6883      	ldr	r3, [r0, #8]
 80016a6:	6902      	ldr	r2, [r0, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	6942      	ldr	r2, [r0, #20]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	69c2      	ldr	r2, [r0, #28]
 80016b0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016b2:	6801      	ldr	r1, [r0, #0]
 80016b4:	6808      	ldr	r0, [r1, #0]
 80016b6:	4a99      	ldr	r2, [pc, #612]	; (800191c <UART_SetConfig+0x27c>)
 80016b8:	4002      	ands	r2, r0
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016be:	6822      	ldr	r2, [r4, #0]
 80016c0:	6853      	ldr	r3, [r2, #4]
 80016c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016c6:	68e1      	ldr	r1, [r4, #12]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016cc:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80016ce:	6a23      	ldr	r3, [r4, #32]
 80016d0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016d2:	6821      	ldr	r1, [r4, #0]
 80016d4:	688b      	ldr	r3, [r1, #8]
 80016d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	4a8f      	ldr	r2, [pc, #572]	; (8001920 <UART_SetConfig+0x280>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d018      	beq.n	8001718 <UART_SetConfig+0x78>
 80016e6:	4a8f      	ldr	r2, [pc, #572]	; (8001924 <UART_SetConfig+0x284>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d028      	beq.n	800173e <UART_SetConfig+0x9e>
 80016ec:	4a8e      	ldr	r2, [pc, #568]	; (8001928 <UART_SetConfig+0x288>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d03d      	beq.n	800176e <UART_SetConfig+0xce>
 80016f2:	4a8e      	ldr	r2, [pc, #568]	; (800192c <UART_SetConfig+0x28c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d050      	beq.n	800179a <UART_SetConfig+0xfa>
 80016f8:	4a8d      	ldr	r2, [pc, #564]	; (8001930 <UART_SetConfig+0x290>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d062      	beq.n	80017c4 <UART_SetConfig+0x124>
 80016fe:	4a8d      	ldr	r2, [pc, #564]	; (8001934 <UART_SetConfig+0x294>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d077      	beq.n	80017f4 <UART_SetConfig+0x154>
 8001704:	4a8c      	ldr	r2, [pc, #560]	; (8001938 <UART_SetConfig+0x298>)
 8001706:	4293      	cmp	r3, r2
 8001708:	f000 808c 	beq.w	8001824 <UART_SetConfig+0x184>
 800170c:	4a8b      	ldr	r2, [pc, #556]	; (800193c <UART_SetConfig+0x29c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	f000 80a0 	beq.w	8001854 <UART_SetConfig+0x1b4>
 8001714:	2310      	movs	r3, #16
 8001716:	e0b6      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001718:	4b89      	ldr	r3, [pc, #548]	; (8001940 <UART_SetConfig+0x2a0>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b03      	cmp	r3, #3
 8001724:	d809      	bhi.n	800173a <UART_SetConfig+0x9a>
 8001726:	e8df f003 	tbb	[pc, r3]
 800172a:	0402      	.short	0x0402
 800172c:	06ad      	.short	0x06ad
 800172e:	2301      	movs	r3, #1
 8001730:	e0a9      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001732:	2304      	movs	r3, #4
 8001734:	e0a7      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001736:	2308      	movs	r3, #8
 8001738:	e0a5      	b.n	8001886 <UART_SetConfig+0x1e6>
 800173a:	2310      	movs	r3, #16
 800173c:	e0a3      	b.n	8001886 <UART_SetConfig+0x1e6>
 800173e:	4b80      	ldr	r3, [pc, #512]	; (8001940 <UART_SetConfig+0x2a0>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d80e      	bhi.n	800176a <UART_SetConfig+0xca>
 800174c:	e8df f003 	tbb	[pc, r3]
 8001750:	0d0d0d07 	.word	0x0d0d0d07
 8001754:	0d0d0d09 	.word	0x0d0d0d09
 8001758:	0d0d0da9 	.word	0x0d0d0da9
 800175c:	0b          	.byte	0x0b
 800175d:	00          	.byte	0x00
 800175e:	2300      	movs	r3, #0
 8001760:	e091      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001762:	2304      	movs	r3, #4
 8001764:	e08f      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001766:	2308      	movs	r3, #8
 8001768:	e08d      	b.n	8001886 <UART_SetConfig+0x1e6>
 800176a:	2310      	movs	r3, #16
 800176c:	e08b      	b.n	8001886 <UART_SetConfig+0x1e6>
 800176e:	4b74      	ldr	r3, [pc, #464]	; (8001940 <UART_SetConfig+0x2a0>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001778:	2b10      	cmp	r3, #16
 800177a:	d00a      	beq.n	8001792 <UART_SetConfig+0xf2>
 800177c:	d906      	bls.n	800178c <UART_SetConfig+0xec>
 800177e:	2b20      	cmp	r3, #32
 8001780:	f000 8091 	beq.w	80018a6 <UART_SetConfig+0x206>
 8001784:	2b30      	cmp	r3, #48	; 0x30
 8001786:	d106      	bne.n	8001796 <UART_SetConfig+0xf6>
 8001788:	2308      	movs	r3, #8
 800178a:	e07c      	b.n	8001886 <UART_SetConfig+0x1e6>
 800178c:	b91b      	cbnz	r3, 8001796 <UART_SetConfig+0xf6>
 800178e:	2300      	movs	r3, #0
 8001790:	e079      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001792:	2304      	movs	r3, #4
 8001794:	e077      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001796:	2310      	movs	r3, #16
 8001798:	e075      	b.n	8001886 <UART_SetConfig+0x1e6>
 800179a:	4b69      	ldr	r3, [pc, #420]	; (8001940 <UART_SetConfig+0x2a0>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017a4:	2b40      	cmp	r3, #64	; 0x40
 80017a6:	d009      	beq.n	80017bc <UART_SetConfig+0x11c>
 80017a8:	d905      	bls.n	80017b6 <UART_SetConfig+0x116>
 80017aa:	2b80      	cmp	r3, #128	; 0x80
 80017ac:	d07d      	beq.n	80018aa <UART_SetConfig+0x20a>
 80017ae:	2bc0      	cmp	r3, #192	; 0xc0
 80017b0:	d106      	bne.n	80017c0 <UART_SetConfig+0x120>
 80017b2:	2308      	movs	r3, #8
 80017b4:	e067      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017b6:	b91b      	cbnz	r3, 80017c0 <UART_SetConfig+0x120>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e064      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017bc:	2304      	movs	r3, #4
 80017be:	e062      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017c0:	2310      	movs	r3, #16
 80017c2:	e060      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <UART_SetConfig+0x2a0>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d2:	d00b      	beq.n	80017ec <UART_SetConfig+0x14c>
 80017d4:	d907      	bls.n	80017e6 <UART_SetConfig+0x146>
 80017d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017da:	d068      	beq.n	80018ae <UART_SetConfig+0x20e>
 80017dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017e0:	d106      	bne.n	80017f0 <UART_SetConfig+0x150>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e04f      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017e6:	b91b      	cbnz	r3, 80017f0 <UART_SetConfig+0x150>
 80017e8:	2300      	movs	r3, #0
 80017ea:	e04c      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e04a      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017f0:	2310      	movs	r3, #16
 80017f2:	e048      	b.n	8001886 <UART_SetConfig+0x1e6>
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <UART_SetConfig+0x2a0>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d00b      	beq.n	800181c <UART_SetConfig+0x17c>
 8001804:	d907      	bls.n	8001816 <UART_SetConfig+0x176>
 8001806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800180a:	d052      	beq.n	80018b2 <UART_SetConfig+0x212>
 800180c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001810:	d106      	bne.n	8001820 <UART_SetConfig+0x180>
 8001812:	2308      	movs	r3, #8
 8001814:	e037      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001816:	b91b      	cbnz	r3, 8001820 <UART_SetConfig+0x180>
 8001818:	2301      	movs	r3, #1
 800181a:	e034      	b.n	8001886 <UART_SetConfig+0x1e6>
 800181c:	2304      	movs	r3, #4
 800181e:	e032      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001820:	2310      	movs	r3, #16
 8001822:	e030      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001824:	4b46      	ldr	r3, [pc, #280]	; (8001940 <UART_SetConfig+0x2a0>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001832:	d00b      	beq.n	800184c <UART_SetConfig+0x1ac>
 8001834:	d907      	bls.n	8001846 <UART_SetConfig+0x1a6>
 8001836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183a:	d03c      	beq.n	80018b6 <UART_SetConfig+0x216>
 800183c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001840:	d106      	bne.n	8001850 <UART_SetConfig+0x1b0>
 8001842:	2308      	movs	r3, #8
 8001844:	e01f      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001846:	b91b      	cbnz	r3, 8001850 <UART_SetConfig+0x1b0>
 8001848:	2300      	movs	r3, #0
 800184a:	e01c      	b.n	8001886 <UART_SetConfig+0x1e6>
 800184c:	2304      	movs	r3, #4
 800184e:	e01a      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001850:	2310      	movs	r3, #16
 8001852:	e018      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <UART_SetConfig+0x2a0>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800185e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001862:	d00b      	beq.n	800187c <UART_SetConfig+0x1dc>
 8001864:	d907      	bls.n	8001876 <UART_SetConfig+0x1d6>
 8001866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800186a:	d026      	beq.n	80018ba <UART_SetConfig+0x21a>
 800186c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001870:	d106      	bne.n	8001880 <UART_SetConfig+0x1e0>
 8001872:	2308      	movs	r3, #8
 8001874:	e007      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001876:	b91b      	cbnz	r3, 8001880 <UART_SetConfig+0x1e0>
 8001878:	2300      	movs	r3, #0
 800187a:	e004      	b.n	8001886 <UART_SetConfig+0x1e6>
 800187c:	2304      	movs	r3, #4
 800187e:	e002      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001880:	2310      	movs	r3, #16
 8001882:	e000      	b.n	8001886 <UART_SetConfig+0x1e6>
 8001884:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001886:	69e2      	ldr	r2, [r4, #28]
 8001888:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800188c:	d017      	beq.n	80018be <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800188e:	2b08      	cmp	r3, #8
 8001890:	f200 80b3 	bhi.w	80019fa <UART_SetConfig+0x35a>
 8001894:	e8df f003 	tbb	[pc, r3]
 8001898:	b1958b76 	.word	0xb1958b76
 800189c:	b1b1b19e 	.word	0xb1b1b19e
 80018a0:	a8          	.byte	0xa8
 80018a1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a2:	2302      	movs	r3, #2
 80018a4:	e7ef      	b.n	8001886 <UART_SetConfig+0x1e6>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e7ed      	b.n	8001886 <UART_SetConfig+0x1e6>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e7eb      	b.n	8001886 <UART_SetConfig+0x1e6>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e7e9      	b.n	8001886 <UART_SetConfig+0x1e6>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e7e7      	b.n	8001886 <UART_SetConfig+0x1e6>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e7e5      	b.n	8001886 <UART_SetConfig+0x1e6>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e7e3      	b.n	8001886 <UART_SetConfig+0x1e6>
    switch (clocksource)
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d85d      	bhi.n	800197e <UART_SetConfig+0x2de>
 80018c2:	e8df f003 	tbb	[pc, r3]
 80018c6:	1f05      	.short	0x1f05
 80018c8:	5c485c3f 	.word	0x5c485c3f
 80018cc:	5c5c      	.short	0x5c5c
 80018ce:	53          	.byte	0x53
 80018cf:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018d0:	f7ff fd3a 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 80018d4:	6862      	ldr	r2, [r4, #4]
 80018d6:	0853      	lsrs	r3, r2, #1
 80018d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80018dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80018e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80018e2:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018e4:	f1a3 0110 	sub.w	r1, r3, #16
 80018e8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80018ec:	4291      	cmp	r1, r2
 80018ee:	f200 8087 	bhi.w	8001a00 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018f8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80018fc:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	60d3      	str	r3, [r2, #12]
 8001902:	e050      	b.n	80019a6 <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001904:	f7ff fd30 	bl	8001368 <HAL_RCC_GetPCLK2Freq>
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	0853      	lsrs	r3, r2, #1
 800190c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001910:	fbb3 f3f2 	udiv	r3, r3, r2
 8001914:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001916:	2000      	movs	r0, #0
        break;
 8001918:	e7e4      	b.n	80018e4 <UART_SetConfig+0x244>
 800191a:	bf00      	nop
 800191c:	efff69f3 	.word	0xefff69f3
 8001920:	40011000 	.word	0x40011000
 8001924:	40004400 	.word	0x40004400
 8001928:	40004800 	.word	0x40004800
 800192c:	40004c00 	.word	0x40004c00
 8001930:	40005000 	.word	0x40005000
 8001934:	40011400 	.word	0x40011400
 8001938:	40007800 	.word	0x40007800
 800193c:	40007c00 	.word	0x40007c00
 8001940:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001944:	6862      	ldr	r2, [r4, #4]
 8001946:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <UART_SetConfig+0x368>)
 8001948:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800194c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001950:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001952:	2000      	movs	r0, #0
        break;
 8001954:	e7c6      	b.n	80018e4 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001956:	f7ff fbeb 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 800195a:	6862      	ldr	r2, [r4, #4]
 800195c:	0853      	lsrs	r3, r2, #1
 800195e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001962:	fbb3 f3f2 	udiv	r3, r3, r2
 8001966:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001968:	2000      	movs	r0, #0
        break;
 800196a:	e7bb      	b.n	80018e4 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800196c:	6862      	ldr	r2, [r4, #4]
 800196e:	0853      	lsrs	r3, r2, #1
 8001970:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001974:	fbb3 f3f2 	udiv	r3, r3, r2
 8001978:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800197a:	2000      	movs	r0, #0
        break;
 800197c:	e7b2      	b.n	80018e4 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 800197e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001980:	2300      	movs	r3, #0
 8001982:	e7af      	b.n	80018e4 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001984:	f7ff fce0 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8001988:	6862      	ldr	r2, [r4, #4]
 800198a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800198e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001992:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001994:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001996:	f1a3 0110 	sub.w	r1, r3, #16
 800199a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800199e:	4291      	cmp	r1, r2
 80019a0:	d830      	bhi.n	8001a04 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 80019a2:	6822      	ldr	r2, [r4, #0]
 80019a4:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80019aa:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80019ac:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019ae:	f7ff fcdb 	bl	8001368 <HAL_RCC_GetPCLK2Freq>
 80019b2:	6862      	ldr	r2, [r4, #4]
 80019b4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80019b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019be:	2000      	movs	r0, #0
        break;
 80019c0:	e7e9      	b.n	8001996 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019c2:	6862      	ldr	r2, [r4, #4]
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <UART_SetConfig+0x36c>)
 80019c6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80019ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80019ce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019d0:	2000      	movs	r0, #0
        break;
 80019d2:	e7e0      	b.n	8001996 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019d4:	f7ff fbac 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80019d8:	6862      	ldr	r2, [r4, #4]
 80019da:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80019de:	fbb3 f3f2 	udiv	r3, r3, r2
 80019e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019e4:	2000      	movs	r0, #0
        break;
 80019e6:	e7d6      	b.n	8001996 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019e8:	6862      	ldr	r2, [r4, #4]
 80019ea:	0853      	lsrs	r3, r2, #1
 80019ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019f6:	2000      	movs	r0, #0
        break;
 80019f8:	e7cd      	b.n	8001996 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e7ca      	b.n	8001996 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
 8001a02:	e7d0      	b.n	80019a6 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
 8001a06:	e7ce      	b.n	80019a6 <UART_SetConfig+0x306>
 8001a08:	01e84800 	.word	0x01e84800
 8001a0c:	00f42400 	.word	0x00f42400

08001a10 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a12:	f013 0f01 	tst.w	r3, #1
 8001a16:	d006      	beq.n	8001a26 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a18:	6802      	ldr	r2, [r0, #0]
 8001a1a:	6853      	ldr	r3, [r2, #4]
 8001a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001a20:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a22:	430b      	orrs	r3, r1
 8001a24:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a26:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a28:	f013 0f02 	tst.w	r3, #2
 8001a2c:	d006      	beq.n	8001a3c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a2e:	6802      	ldr	r2, [r0, #0]
 8001a30:	6853      	ldr	r3, [r2, #4]
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a3e:	f013 0f04 	tst.w	r3, #4
 8001a42:	d006      	beq.n	8001a52 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a44:	6802      	ldr	r2, [r0, #0]
 8001a46:	6853      	ldr	r3, [r2, #4]
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a54:	f013 0f08 	tst.w	r3, #8
 8001a58:	d006      	beq.n	8001a68 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a5a:	6802      	ldr	r2, [r0, #0]
 8001a5c:	6853      	ldr	r3, [r2, #4]
 8001a5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a62:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a6a:	f013 0f10 	tst.w	r3, #16
 8001a6e:	d006      	beq.n	8001a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a70:	6802      	ldr	r2, [r0, #0]
 8001a72:	6893      	ldr	r3, [r2, #8]
 8001a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a78:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a80:	f013 0f20 	tst.w	r3, #32
 8001a84:	d006      	beq.n	8001a94 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	6893      	ldr	r3, [r2, #8]
 8001a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a8e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a9a:	d00a      	beq.n	8001ab2 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a9c:	6802      	ldr	r2, [r0, #0]
 8001a9e:	6853      	ldr	r3, [r2, #4]
 8001aa0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001aa4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001aaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab0:	d00b      	beq.n	8001aca <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ab2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ab4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ab8:	d006      	beq.n	8001ac8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001aba:	6802      	ldr	r2, [r0, #0]
 8001abc:	6853      	ldr	r3, [r2, #4]
 8001abe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ac2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6053      	str	r3, [r2, #4]
  }
}
 8001ac8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001aca:	6802      	ldr	r2, [r0, #0]
 8001acc:	6853      	ldr	r3, [r2, #4]
 8001ace:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001ad2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6053      	str	r3, [r2, #4]
 8001ad8:	e7eb      	b.n	8001ab2 <UART_AdvFeatureConfig+0xa2>

08001ada <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ade:	4605      	mov	r5, r0
 8001ae0:	460f      	mov	r7, r1
 8001ae2:	4616      	mov	r6, r2
 8001ae4:	4698      	mov	r8, r3
 8001ae6:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	ea37 0303 	bics.w	r3, r7, r3
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	42b3      	cmp	r3, r6
 8001af8:	d11c      	bne.n	8001b34 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001afe:	d0f3      	beq.n	8001ae8 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b00:	f7fe ff90 	bl	8000a24 <HAL_GetTick>
 8001b04:	eba0 0008 	sub.w	r0, r0, r8
 8001b08:	42a0      	cmp	r0, r4
 8001b0a:	d801      	bhi.n	8001b10 <UART_WaitOnFlagUntilTimeout+0x36>
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d1eb      	bne.n	8001ae8 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b10:	682a      	ldr	r2, [r5, #0]
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b18:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b1a:	682a      	ldr	r2, [r5, #0]
 8001b1c:	6893      	ldr	r3, [r2, #8]
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001b24:	2320      	movs	r3, #32
 8001b26:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001b28:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8001b30:	2003      	movs	r0, #3
 8001b32:	e000      	b.n	8001b36 <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
}
 8001b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b3a <HAL_UART_Transmit>:
{
 8001b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b42:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d159      	bne.n	8001bfc <HAL_UART_Transmit+0xc2>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001b4e:	fab2 f382 	clz	r3, r2
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2900      	cmp	r1, #0
 8001b56:	bf08      	it	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d153      	bne.n	8001c06 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8001b5e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d051      	beq.n	8001c0a <HAL_UART_Transmit+0xd0>
 8001b66:	2301      	movs	r3, #1
 8001b68:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b70:	2321      	movs	r3, #33	; 0x21
 8001b72:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001b74:	f7fe ff56 	bl	8000a24 <HAL_GetTick>
 8001b78:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001b7a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001b7e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b82:	68a3      	ldr	r3, [r4, #8]
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b88:	d002      	beq.n	8001b90 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8001b8a:	f04f 0800 	mov.w	r8, #0
 8001b8e:	e010      	b.n	8001bb2 <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	b30b      	cbz	r3, 8001bd8 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8001b94:	f04f 0800 	mov.w	r8, #0
 8001b98:	e00b      	b.n	8001bb2 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b9a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001ba6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001bb2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b18b      	cbz	r3, 8001bde <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	9600      	str	r6, [sp, #0]
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff ff89 	bl	8001ada <UART_WaitOnFlagUntilTimeout>
 8001bc8:	bb08      	cbnz	r0, 8001c0e <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 8001bca:	2d00      	cmp	r5, #0
 8001bcc:	d0e5      	beq.n	8001b9a <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bce:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bd6:	e7e6      	b.n	8001ba6 <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 8001bd8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001bda:	2500      	movs	r5, #0
 8001bdc:	e7e9      	b.n	8001bb2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bde:	9600      	str	r6, [sp, #0]
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	2140      	movs	r1, #64	; 0x40
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff ff77 	bl	8001ada <UART_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b980      	cbnz	r0, 8001c12 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8001bfa:	e000      	b.n	8001bfe <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	b002      	add	sp, #8
 8001c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e7f9      	b.n	8001bfe <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e7f7      	b.n	8001bfe <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e7f5      	b.n	8001bfe <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e7f3      	b.n	8001bfe <HAL_UART_Transmit+0xc4>

08001c16 <HAL_UART_Receive>:
{
 8001c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c1e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d17e      	bne.n	8001d22 <HAL_UART_Receive+0x10c>
 8001c24:	4604      	mov	r4, r0
 8001c26:	460d      	mov	r5, r1
 8001c28:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001c2a:	fab2 f382 	clz	r3, r2
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2900      	cmp	r1, #0
 8001c32:	bf08      	it	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d177      	bne.n	8001d2a <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001c3a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d075      	beq.n	8001d2e <HAL_UART_Receive+0x118>
 8001c42:	2301      	movs	r3, #1
 8001c44:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c4c:	2322      	movs	r3, #34	; 0x22
 8001c4e:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001c50:	f7fe fee8 	bl	8000a24 <HAL_GetTick>
 8001c54:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001c56:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001c5a:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001c5e:	68a3      	ldr	r3, [r4, #8]
 8001c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c64:	d006      	beq.n	8001c74 <HAL_UART_Receive+0x5e>
 8001c66:	b9a3      	cbnz	r3, 8001c92 <HAL_UART_Receive+0x7c>
 8001c68:	6922      	ldr	r2, [r4, #16]
 8001c6a:	b972      	cbnz	r2, 8001c8a <HAL_UART_Receive+0x74>
 8001c6c:	22ff      	movs	r2, #255	; 0xff
 8001c6e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001c72:	e014      	b.n	8001c9e <HAL_UART_Receive+0x88>
 8001c74:	6922      	ldr	r2, [r4, #16]
 8001c76:	b922      	cbnz	r2, 8001c82 <HAL_UART_Receive+0x6c>
 8001c78:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001c7c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001c80:	e00d      	b.n	8001c9e <HAL_UART_Receive+0x88>
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001c88:	e009      	b.n	8001c9e <HAL_UART_Receive+0x88>
 8001c8a:	227f      	movs	r2, #127	; 0x7f
 8001c8c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001c90:	e005      	b.n	8001c9e <HAL_UART_Receive+0x88>
 8001c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c96:	d00a      	beq.n	8001cae <HAL_UART_Receive+0x98>
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001c9e:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8001ca8:	f04f 0900 	mov.w	r9, #0
 8001cac:	e01d      	b.n	8001cea <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8001cae:	6922      	ldr	r2, [r4, #16]
 8001cb0:	b91a      	cbnz	r2, 8001cba <HAL_UART_Receive+0xa4>
 8001cb2:	227f      	movs	r2, #127	; 0x7f
 8001cb4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001cb8:	e7f1      	b.n	8001c9e <HAL_UART_Receive+0x88>
 8001cba:	223f      	movs	r2, #63	; 0x3f
 8001cbc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001cc0:	e7ed      	b.n	8001c9e <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc2:	6923      	ldr	r3, [r4, #16]
 8001cc4:	b113      	cbz	r3, 8001ccc <HAL_UART_Receive+0xb6>
      pdata16bits = NULL;
 8001cc6:	f04f 0900 	mov.w	r9, #0
 8001cca:	e00e      	b.n	8001cea <HAL_UART_Receive+0xd4>
      pdata16bits = (uint16_t *) pData;
 8001ccc:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001cce:	2500      	movs	r5, #0
 8001cd0:	e00b      	b.n	8001cea <HAL_UART_Receive+0xd4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	ea08 0303 	and.w	r3, r8, r3
 8001cda:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001cde:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001cea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	b18b      	cbz	r3, 8001d16 <HAL_UART_Receive+0x100>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf2:	9600      	str	r6, [sp, #0]
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff feed 	bl	8001ada <UART_WaitOnFlagUntilTimeout>
 8001d00:	b9b8      	cbnz	r0, 8001d32 <HAL_UART_Receive+0x11c>
      if (pdata8bits == NULL)
 8001d02:	2d00      	cmp	r5, #0
 8001d04:	d0e5      	beq.n	8001cd2 <HAL_UART_Receive+0xbc>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0a:	fa5f f388 	uxtb.w	r3, r8
 8001d0e:	4013      	ands	r3, r2
 8001d10:	f805 3b01 	strb.w	r3, [r5], #1
 8001d14:	e7e3      	b.n	8001cde <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 8001d16:	2320      	movs	r3, #32
 8001d18:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001d20:	e000      	b.n	8001d24 <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 8001d22:	2002      	movs	r0, #2
}
 8001d24:	b003      	add	sp, #12
 8001d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	e7fa      	b.n	8001d24 <HAL_UART_Receive+0x10e>
    __HAL_LOCK(huart);
 8001d2e:	2002      	movs	r0, #2
 8001d30:	e7f8      	b.n	8001d24 <HAL_UART_Receive+0x10e>
        return HAL_TIMEOUT;
 8001d32:	2003      	movs	r0, #3
 8001d34:	e7f6      	b.n	8001d24 <HAL_UART_Receive+0x10e>

08001d36 <UART_CheckIdleState>:
{
 8001d36:	b510      	push	{r4, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001d40:	f7fe fe70 	bl	8000a24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d44:	6822      	ldr	r2, [r4, #0]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	f012 0f08 	tst.w	r2, #8
 8001d4c:	d107      	bne.n	8001d5e <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001d52:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4603      	mov	r3, r0
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff feb4 	bl	8001ada <UART_WaitOnFlagUntilTimeout>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d0eb      	beq.n	8001d4e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001d76:	2003      	movs	r0, #3
 8001d78:	e7ef      	b.n	8001d5a <UART_CheckIdleState+0x24>

08001d7a <HAL_UART_Init>:
  if (huart == NULL)
 8001d7a:	b368      	cbz	r0, 8001dd8 <HAL_UART_Init+0x5e>
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d80:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d82:	b303      	cbz	r3, 8001dc6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d84:	2324      	movs	r3, #36	; 0x24
 8001d86:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff fc84 	bl	80016a0 <UART_SetConfig>
 8001d98:	2801      	cmp	r0, #1
 8001d9a:	d013      	beq.n	8001dc4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d9e:	b9bb      	cbnz	r3, 8001dd0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	6853      	ldr	r3, [r2, #4]
 8001da4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001da8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	6893      	ldr	r3, [r2, #8]
 8001dae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001db2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff ffb9 	bl	8001d36 <UART_CheckIdleState>
}
 8001dc4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001dc6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001dca:	f7fe fcff 	bl	80007cc <HAL_UART_MspInit>
 8001dce:	e7d9      	b.n	8001d84 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fe1d 	bl	8001a10 <UART_AdvFeatureConfig>
 8001dd6:	e7e3      	b.n	8001da0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
}
 8001dda:	4770      	bx	lr

08001ddc <__libc_init_array>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	4e0d      	ldr	r6, [pc, #52]	; (8001e14 <__libc_init_array+0x38>)
 8001de0:	4c0d      	ldr	r4, [pc, #52]	; (8001e18 <__libc_init_array+0x3c>)
 8001de2:	1ba4      	subs	r4, r4, r6
 8001de4:	10a4      	asrs	r4, r4, #2
 8001de6:	2500      	movs	r5, #0
 8001de8:	42a5      	cmp	r5, r4
 8001dea:	d109      	bne.n	8001e00 <__libc_init_array+0x24>
 8001dec:	4e0b      	ldr	r6, [pc, #44]	; (8001e1c <__libc_init_array+0x40>)
 8001dee:	4c0c      	ldr	r4, [pc, #48]	; (8001e20 <__libc_init_array+0x44>)
 8001df0:	f002 fae6 	bl	80043c0 <_init>
 8001df4:	1ba4      	subs	r4, r4, r6
 8001df6:	10a4      	asrs	r4, r4, #2
 8001df8:	2500      	movs	r5, #0
 8001dfa:	42a5      	cmp	r5, r4
 8001dfc:	d105      	bne.n	8001e0a <__libc_init_array+0x2e>
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
 8001e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e04:	4798      	blx	r3
 8001e06:	3501      	adds	r5, #1
 8001e08:	e7ee      	b.n	8001de8 <__libc_init_array+0xc>
 8001e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e0e:	4798      	blx	r3
 8001e10:	3501      	adds	r5, #1
 8001e12:	e7f2      	b.n	8001dfa <__libc_init_array+0x1e>
 8001e14:	080046c0 	.word	0x080046c0
 8001e18:	080046c0 	.word	0x080046c0
 8001e1c:	080046c0 	.word	0x080046c0
 8001e20:	080046c4 	.word	0x080046c4

08001e24 <memset>:
 8001e24:	4402      	add	r2, r0
 8001e26:	4603      	mov	r3, r0
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d100      	bne.n	8001e2e <memset+0xa>
 8001e2c:	4770      	bx	lr
 8001e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e32:	e7f9      	b.n	8001e28 <memset+0x4>

08001e34 <__cvt>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	ed2d 8b02 	vpush	{d8}
 8001e3a:	eeb0 8b40 	vmov.f64	d8, d0
 8001e3e:	b085      	sub	sp, #20
 8001e40:	4617      	mov	r7, r2
 8001e42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001e44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001e46:	ee18 2a90 	vmov	r2, s17
 8001e4a:	f025 0520 	bic.w	r5, r5, #32
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	bfb6      	itet	lt
 8001e52:	222d      	movlt	r2, #45	; 0x2d
 8001e54:	2200      	movge	r2, #0
 8001e56:	eeb1 8b40 	vneglt.f64	d8, d0
 8001e5a:	2d46      	cmp	r5, #70	; 0x46
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	d004      	beq.n	8001e6c <__cvt+0x38>
 8001e62:	2d45      	cmp	r5, #69	; 0x45
 8001e64:	d100      	bne.n	8001e68 <__cvt+0x34>
 8001e66:	3401      	adds	r4, #1
 8001e68:	2102      	movs	r1, #2
 8001e6a:	e000      	b.n	8001e6e <__cvt+0x3a>
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	ab03      	add	r3, sp, #12
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	ab02      	add	r3, sp, #8
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4622      	mov	r2, r4
 8001e78:	4633      	mov	r3, r6
 8001e7a:	eeb0 0b48 	vmov.f64	d0, d8
 8001e7e:	f000 fcb7 	bl	80027f0 <_dtoa_r>
 8001e82:	2d47      	cmp	r5, #71	; 0x47
 8001e84:	d101      	bne.n	8001e8a <__cvt+0x56>
 8001e86:	07fb      	lsls	r3, r7, #31
 8001e88:	d51e      	bpl.n	8001ec8 <__cvt+0x94>
 8001e8a:	2d46      	cmp	r5, #70	; 0x46
 8001e8c:	eb00 0304 	add.w	r3, r0, r4
 8001e90:	d10c      	bne.n	8001eac <__cvt+0x78>
 8001e92:	7802      	ldrb	r2, [r0, #0]
 8001e94:	2a30      	cmp	r2, #48	; 0x30
 8001e96:	d107      	bne.n	8001ea8 <__cvt+0x74>
 8001e98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	bf1c      	itt	ne
 8001ea2:	f1c4 0401 	rsbne	r4, r4, #1
 8001ea6:	6034      	strne	r4, [r6, #0]
 8001ea8:	6832      	ldr	r2, [r6, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d007      	beq.n	8001ec6 <__cvt+0x92>
 8001eb6:	2130      	movs	r1, #48	; 0x30
 8001eb8:	9a03      	ldr	r2, [sp, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d204      	bcs.n	8001ec8 <__cvt+0x94>
 8001ebe:	1c54      	adds	r4, r2, #1
 8001ec0:	9403      	str	r4, [sp, #12]
 8001ec2:	7011      	strb	r1, [r2, #0]
 8001ec4:	e7f8      	b.n	8001eb8 <__cvt+0x84>
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	9b03      	ldr	r3, [sp, #12]
 8001eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ecc:	1a1b      	subs	r3, r3, r0
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	b005      	add	sp, #20
 8001ed2:	ecbd 8b02 	vpop	{d8}
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed8 <__exponent>:
 8001ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001eda:	2900      	cmp	r1, #0
 8001edc:	4604      	mov	r4, r0
 8001ede:	bfba      	itte	lt
 8001ee0:	4249      	neglt	r1, r1
 8001ee2:	232d      	movlt	r3, #45	; 0x2d
 8001ee4:	232b      	movge	r3, #43	; 0x2b
 8001ee6:	2909      	cmp	r1, #9
 8001ee8:	f804 2b02 	strb.w	r2, [r4], #2
 8001eec:	7043      	strb	r3, [r0, #1]
 8001eee:	dd20      	ble.n	8001f32 <__exponent+0x5a>
 8001ef0:	f10d 0307 	add.w	r3, sp, #7
 8001ef4:	461f      	mov	r7, r3
 8001ef6:	260a      	movs	r6, #10
 8001ef8:	fb91 f5f6 	sdiv	r5, r1, r6
 8001efc:	fb06 1115 	mls	r1, r6, r5, r1
 8001f00:	3130      	adds	r1, #48	; 0x30
 8001f02:	2d09      	cmp	r5, #9
 8001f04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001f08:	f103 32ff 	add.w	r2, r3, #4294967295
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	dc09      	bgt.n	8001f24 <__exponent+0x4c>
 8001f10:	3130      	adds	r1, #48	; 0x30
 8001f12:	3b02      	subs	r3, #2
 8001f14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001f18:	42bb      	cmp	r3, r7
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	d304      	bcc.n	8001f28 <__exponent+0x50>
 8001f1e:	1a10      	subs	r0, r2, r0
 8001f20:	b003      	add	sp, #12
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f24:	4613      	mov	r3, r2
 8001f26:	e7e7      	b.n	8001ef8 <__exponent+0x20>
 8001f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f2c:	f804 2b01 	strb.w	r2, [r4], #1
 8001f30:	e7f2      	b.n	8001f18 <__exponent+0x40>
 8001f32:	2330      	movs	r3, #48	; 0x30
 8001f34:	4419      	add	r1, r3
 8001f36:	7083      	strb	r3, [r0, #2]
 8001f38:	1d02      	adds	r2, r0, #4
 8001f3a:	70c1      	strb	r1, [r0, #3]
 8001f3c:	e7ef      	b.n	8001f1e <__exponent+0x46>
	...

08001f40 <_printf_float>:
 8001f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f44:	b08d      	sub	sp, #52	; 0x34
 8001f46:	460c      	mov	r4, r1
 8001f48:	4616      	mov	r6, r2
 8001f4a:	461f      	mov	r7, r3
 8001f4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001f50:	4605      	mov	r5, r0
 8001f52:	f001 fa63 	bl	800341c <_localeconv_r>
 8001f56:	f8d0 b000 	ldr.w	fp, [r0]
 8001f5a:	4658      	mov	r0, fp
 8001f5c:	f7fe f970 	bl	8000240 <strlen>
 8001f60:	2300      	movs	r3, #0
 8001f62:	930a      	str	r3, [sp, #40]	; 0x28
 8001f64:	f8d8 3000 	ldr.w	r3, [r8]
 8001f68:	9005      	str	r0, [sp, #20]
 8001f6a:	3307      	adds	r3, #7
 8001f6c:	f023 0307 	bic.w	r3, r3, #7
 8001f70:	f103 0108 	add.w	r1, r3, #8
 8001f74:	f894 9018 	ldrb.w	r9, [r4, #24]
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	f8c8 1000 	str.w	r1, [r8]
 8001f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f82:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8001f86:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8002210 <_printf_float+0x2d0>
 8001f8a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8001f8e:	eeb0 6bc0 	vabs.f64	d6, d0
 8001f92:	eeb4 6b47 	vcmp.f64	d6, d7
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	dd24      	ble.n	8001fe6 <_printf_float+0xa6>
 8001f9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	d502      	bpl.n	8001fac <_printf_float+0x6c>
 8001fa6:	232d      	movs	r3, #45	; 0x2d
 8001fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fac:	499a      	ldr	r1, [pc, #616]	; (8002218 <_printf_float+0x2d8>)
 8001fae:	4b9b      	ldr	r3, [pc, #620]	; (800221c <_printf_float+0x2dc>)
 8001fb0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001fb4:	bf8c      	ite	hi
 8001fb6:	4688      	movhi	r8, r1
 8001fb8:	4698      	movls	r8, r3
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	6123      	str	r3, [r4, #16]
 8001fc2:	6022      	str	r2, [r4, #0]
 8001fc4:	f04f 0a00 	mov.w	sl, #0
 8001fc8:	9700      	str	r7, [sp, #0]
 8001fca:	4633      	mov	r3, r6
 8001fcc:	aa0b      	add	r2, sp, #44	; 0x2c
 8001fce:	4621      	mov	r1, r4
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f000 f9e1 	bl	8002398 <_printf_common>
 8001fd6:	3001      	adds	r0, #1
 8001fd8:	f040 8089 	bne.w	80020ee <_printf_float+0x1ae>
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	b00d      	add	sp, #52	; 0x34
 8001fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe6:	eeb4 0b40 	vcmp.f64	d0, d0
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d702      	bvc.n	8001ff6 <_printf_float+0xb6>
 8001ff0:	498b      	ldr	r1, [pc, #556]	; (8002220 <_printf_float+0x2e0>)
 8001ff2:	4b8c      	ldr	r3, [pc, #560]	; (8002224 <_printf_float+0x2e4>)
 8001ff4:	e7dc      	b.n	8001fb0 <_printf_float+0x70>
 8001ff6:	6861      	ldr	r1, [r4, #4]
 8001ff8:	1c4b      	adds	r3, r1, #1
 8001ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ffe:	ab0a      	add	r3, sp, #40	; 0x28
 8002000:	a809      	add	r0, sp, #36	; 0x24
 8002002:	d13b      	bne.n	800207c <_printf_float+0x13c>
 8002004:	2106      	movs	r1, #6
 8002006:	6061      	str	r1, [r4, #4]
 8002008:	f04f 0c00 	mov.w	ip, #0
 800200c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8002010:	e9cd 0900 	strd	r0, r9, [sp]
 8002014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002018:	6022      	str	r2, [r4, #0]
 800201a:	6861      	ldr	r1, [r4, #4]
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff ff09 	bl	8001e34 <__cvt>
 8002022:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8002026:	2b47      	cmp	r3, #71	; 0x47
 8002028:	4680      	mov	r8, r0
 800202a:	d109      	bne.n	8002040 <_printf_float+0x100>
 800202c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800202e:	1cd8      	adds	r0, r3, #3
 8002030:	db02      	blt.n	8002038 <_printf_float+0xf8>
 8002032:	6862      	ldr	r2, [r4, #4]
 8002034:	4293      	cmp	r3, r2
 8002036:	dd47      	ble.n	80020c8 <_printf_float+0x188>
 8002038:	f1a9 0902 	sub.w	r9, r9, #2
 800203c:	fa5f f989 	uxtb.w	r9, r9
 8002040:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002046:	d824      	bhi.n	8002092 <_printf_float+0x152>
 8002048:	3901      	subs	r1, #1
 800204a:	464a      	mov	r2, r9
 800204c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002050:	9109      	str	r1, [sp, #36]	; 0x24
 8002052:	f7ff ff41 	bl	8001ed8 <__exponent>
 8002056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002058:	1813      	adds	r3, r2, r0
 800205a:	2a01      	cmp	r2, #1
 800205c:	4682      	mov	sl, r0
 800205e:	6123      	str	r3, [r4, #16]
 8002060:	dc02      	bgt.n	8002068 <_printf_float+0x128>
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	07d1      	lsls	r1, r2, #31
 8002066:	d501      	bpl.n	800206c <_printf_float+0x12c>
 8002068:	3301      	adds	r3, #1
 800206a:	6123      	str	r3, [r4, #16]
 800206c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0a9      	beq.n	8001fc8 <_printf_float+0x88>
 8002074:	232d      	movs	r3, #45	; 0x2d
 8002076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800207a:	e7a5      	b.n	8001fc8 <_printf_float+0x88>
 800207c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8002080:	f000 8178 	beq.w	8002374 <_printf_float+0x434>
 8002084:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002088:	d1be      	bne.n	8002008 <_printf_float+0xc8>
 800208a:	2900      	cmp	r1, #0
 800208c:	d1bc      	bne.n	8002008 <_printf_float+0xc8>
 800208e:	2101      	movs	r1, #1
 8002090:	e7b9      	b.n	8002006 <_printf_float+0xc6>
 8002092:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002096:	d119      	bne.n	80020cc <_printf_float+0x18c>
 8002098:	2900      	cmp	r1, #0
 800209a:	6863      	ldr	r3, [r4, #4]
 800209c:	dd0c      	ble.n	80020b8 <_printf_float+0x178>
 800209e:	6121      	str	r1, [r4, #16]
 80020a0:	b913      	cbnz	r3, 80020a8 <_printf_float+0x168>
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	07d2      	lsls	r2, r2, #31
 80020a6:	d502      	bpl.n	80020ae <_printf_float+0x16e>
 80020a8:	3301      	adds	r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	6123      	str	r3, [r4, #16]
 80020ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80020b2:	f04f 0a00 	mov.w	sl, #0
 80020b6:	e7d9      	b.n	800206c <_printf_float+0x12c>
 80020b8:	b913      	cbnz	r3, 80020c0 <_printf_float+0x180>
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	07d0      	lsls	r0, r2, #31
 80020be:	d501      	bpl.n	80020c4 <_printf_float+0x184>
 80020c0:	3302      	adds	r3, #2
 80020c2:	e7f3      	b.n	80020ac <_printf_float+0x16c>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e7f1      	b.n	80020ac <_printf_float+0x16c>
 80020c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80020cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80020d0:	4293      	cmp	r3, r2
 80020d2:	db05      	blt.n	80020e0 <_printf_float+0x1a0>
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	6123      	str	r3, [r4, #16]
 80020d8:	07d1      	lsls	r1, r2, #31
 80020da:	d5e8      	bpl.n	80020ae <_printf_float+0x16e>
 80020dc:	3301      	adds	r3, #1
 80020de:	e7e5      	b.n	80020ac <_printf_float+0x16c>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bfd4      	ite	le
 80020e4:	f1c3 0302 	rsble	r3, r3, #2
 80020e8:	2301      	movgt	r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	e7de      	b.n	80020ac <_printf_float+0x16c>
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	055a      	lsls	r2, r3, #21
 80020f2:	d407      	bmi.n	8002104 <_printf_float+0x1c4>
 80020f4:	6923      	ldr	r3, [r4, #16]
 80020f6:	4642      	mov	r2, r8
 80020f8:	4631      	mov	r1, r6
 80020fa:	4628      	mov	r0, r5
 80020fc:	47b8      	blx	r7
 80020fe:	3001      	adds	r0, #1
 8002100:	d12a      	bne.n	8002158 <_printf_float+0x218>
 8002102:	e76b      	b.n	8001fdc <_printf_float+0x9c>
 8002104:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002108:	f240 80de 	bls.w	80022c8 <_printf_float+0x388>
 800210c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002110:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d133      	bne.n	8002182 <_printf_float+0x242>
 800211a:	2301      	movs	r3, #1
 800211c:	4a42      	ldr	r2, [pc, #264]	; (8002228 <_printf_float+0x2e8>)
 800211e:	4631      	mov	r1, r6
 8002120:	4628      	mov	r0, r5
 8002122:	47b8      	blx	r7
 8002124:	3001      	adds	r0, #1
 8002126:	f43f af59 	beq.w	8001fdc <_printf_float+0x9c>
 800212a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800212e:	429a      	cmp	r2, r3
 8002130:	db02      	blt.n	8002138 <_printf_float+0x1f8>
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	07d8      	lsls	r0, r3, #31
 8002136:	d50f      	bpl.n	8002158 <_printf_float+0x218>
 8002138:	9b05      	ldr	r3, [sp, #20]
 800213a:	465a      	mov	r2, fp
 800213c:	4631      	mov	r1, r6
 800213e:	4628      	mov	r0, r5
 8002140:	47b8      	blx	r7
 8002142:	3001      	adds	r0, #1
 8002144:	f43f af4a 	beq.w	8001fdc <_printf_float+0x9c>
 8002148:	f04f 0800 	mov.w	r8, #0
 800214c:	f104 091a 	add.w	r9, r4, #26
 8002150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	4543      	cmp	r3, r8
 8002156:	dc09      	bgt.n	800216c <_printf_float+0x22c>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	079b      	lsls	r3, r3, #30
 800215c:	f100 8105 	bmi.w	800236a <_printf_float+0x42a>
 8002160:	68e0      	ldr	r0, [r4, #12]
 8002162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002164:	4298      	cmp	r0, r3
 8002166:	bfb8      	it	lt
 8002168:	4618      	movlt	r0, r3
 800216a:	e739      	b.n	8001fe0 <_printf_float+0xa0>
 800216c:	2301      	movs	r3, #1
 800216e:	464a      	mov	r2, r9
 8002170:	4631      	mov	r1, r6
 8002172:	4628      	mov	r0, r5
 8002174:	47b8      	blx	r7
 8002176:	3001      	adds	r0, #1
 8002178:	f43f af30 	beq.w	8001fdc <_printf_float+0x9c>
 800217c:	f108 0801 	add.w	r8, r8, #1
 8002180:	e7e6      	b.n	8002150 <_printf_float+0x210>
 8002182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	dc2b      	bgt.n	80021e0 <_printf_float+0x2a0>
 8002188:	2301      	movs	r3, #1
 800218a:	4a27      	ldr	r2, [pc, #156]	; (8002228 <_printf_float+0x2e8>)
 800218c:	4631      	mov	r1, r6
 800218e:	4628      	mov	r0, r5
 8002190:	47b8      	blx	r7
 8002192:	3001      	adds	r0, #1
 8002194:	f43f af22 	beq.w	8001fdc <_printf_float+0x9c>
 8002198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219a:	b923      	cbnz	r3, 80021a6 <_printf_float+0x266>
 800219c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800219e:	b913      	cbnz	r3, 80021a6 <_printf_float+0x266>
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	07d9      	lsls	r1, r3, #31
 80021a4:	d5d8      	bpl.n	8002158 <_printf_float+0x218>
 80021a6:	9b05      	ldr	r3, [sp, #20]
 80021a8:	465a      	mov	r2, fp
 80021aa:	4631      	mov	r1, r6
 80021ac:	4628      	mov	r0, r5
 80021ae:	47b8      	blx	r7
 80021b0:	3001      	adds	r0, #1
 80021b2:	f43f af13 	beq.w	8001fdc <_printf_float+0x9c>
 80021b6:	f04f 0900 	mov.w	r9, #0
 80021ba:	f104 0a1a 	add.w	sl, r4, #26
 80021be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021c0:	425b      	negs	r3, r3
 80021c2:	454b      	cmp	r3, r9
 80021c4:	dc01      	bgt.n	80021ca <_printf_float+0x28a>
 80021c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021c8:	e795      	b.n	80020f6 <_printf_float+0x1b6>
 80021ca:	2301      	movs	r3, #1
 80021cc:	4652      	mov	r2, sl
 80021ce:	4631      	mov	r1, r6
 80021d0:	4628      	mov	r0, r5
 80021d2:	47b8      	blx	r7
 80021d4:	3001      	adds	r0, #1
 80021d6:	f43f af01 	beq.w	8001fdc <_printf_float+0x9c>
 80021da:	f109 0901 	add.w	r9, r9, #1
 80021de:	e7ee      	b.n	80021be <_printf_float+0x27e>
 80021e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021e4:	429a      	cmp	r2, r3
 80021e6:	bfa8      	it	ge
 80021e8:	461a      	movge	r2, r3
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	4691      	mov	r9, r2
 80021ee:	dd07      	ble.n	8002200 <_printf_float+0x2c0>
 80021f0:	4613      	mov	r3, r2
 80021f2:	4631      	mov	r1, r6
 80021f4:	4642      	mov	r2, r8
 80021f6:	4628      	mov	r0, r5
 80021f8:	47b8      	blx	r7
 80021fa:	3001      	adds	r0, #1
 80021fc:	f43f aeee 	beq.w	8001fdc <_printf_float+0x9c>
 8002200:	f104 031a 	add.w	r3, r4, #26
 8002204:	f04f 0a00 	mov.w	sl, #0
 8002208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800220c:	9307      	str	r3, [sp, #28]
 800220e:	e017      	b.n	8002240 <_printf_float+0x300>
 8002210:	ffffffff 	.word	0xffffffff
 8002214:	7fefffff 	.word	0x7fefffff
 8002218:	08004400 	.word	0x08004400
 800221c:	080043fc 	.word	0x080043fc
 8002220:	08004408 	.word	0x08004408
 8002224:	08004404 	.word	0x08004404
 8002228:	0800440c 	.word	0x0800440c
 800222c:	2301      	movs	r3, #1
 800222e:	9a07      	ldr	r2, [sp, #28]
 8002230:	4631      	mov	r1, r6
 8002232:	4628      	mov	r0, r5
 8002234:	47b8      	blx	r7
 8002236:	3001      	adds	r0, #1
 8002238:	f43f aed0 	beq.w	8001fdc <_printf_float+0x9c>
 800223c:	f10a 0a01 	add.w	sl, sl, #1
 8002240:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002242:	9306      	str	r3, [sp, #24]
 8002244:	eba3 0309 	sub.w	r3, r3, r9
 8002248:	4553      	cmp	r3, sl
 800224a:	dcef      	bgt.n	800222c <_printf_float+0x2ec>
 800224c:	9b06      	ldr	r3, [sp, #24]
 800224e:	4498      	add	r8, r3
 8002250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002254:	429a      	cmp	r2, r3
 8002256:	db15      	blt.n	8002284 <_printf_float+0x344>
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	07da      	lsls	r2, r3, #31
 800225c:	d412      	bmi.n	8002284 <_printf_float+0x344>
 800225e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002260:	9a06      	ldr	r2, [sp, #24]
 8002262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002264:	1a9a      	subs	r2, r3, r2
 8002266:	eba3 0a01 	sub.w	sl, r3, r1
 800226a:	4592      	cmp	sl, r2
 800226c:	bfa8      	it	ge
 800226e:	4692      	movge	sl, r2
 8002270:	f1ba 0f00 	cmp.w	sl, #0
 8002274:	dc0e      	bgt.n	8002294 <_printf_float+0x354>
 8002276:	f04f 0800 	mov.w	r8, #0
 800227a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800227e:	f104 091a 	add.w	r9, r4, #26
 8002282:	e019      	b.n	80022b8 <_printf_float+0x378>
 8002284:	9b05      	ldr	r3, [sp, #20]
 8002286:	465a      	mov	r2, fp
 8002288:	4631      	mov	r1, r6
 800228a:	4628      	mov	r0, r5
 800228c:	47b8      	blx	r7
 800228e:	3001      	adds	r0, #1
 8002290:	d1e5      	bne.n	800225e <_printf_float+0x31e>
 8002292:	e6a3      	b.n	8001fdc <_printf_float+0x9c>
 8002294:	4653      	mov	r3, sl
 8002296:	4642      	mov	r2, r8
 8002298:	4631      	mov	r1, r6
 800229a:	4628      	mov	r0, r5
 800229c:	47b8      	blx	r7
 800229e:	3001      	adds	r0, #1
 80022a0:	d1e9      	bne.n	8002276 <_printf_float+0x336>
 80022a2:	e69b      	b.n	8001fdc <_printf_float+0x9c>
 80022a4:	2301      	movs	r3, #1
 80022a6:	464a      	mov	r2, r9
 80022a8:	4631      	mov	r1, r6
 80022aa:	4628      	mov	r0, r5
 80022ac:	47b8      	blx	r7
 80022ae:	3001      	adds	r0, #1
 80022b0:	f43f ae94 	beq.w	8001fdc <_printf_float+0x9c>
 80022b4:	f108 0801 	add.w	r8, r8, #1
 80022b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	eba3 030a 	sub.w	r3, r3, sl
 80022c2:	4543      	cmp	r3, r8
 80022c4:	dcee      	bgt.n	80022a4 <_printf_float+0x364>
 80022c6:	e747      	b.n	8002158 <_printf_float+0x218>
 80022c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022ca:	2a01      	cmp	r2, #1
 80022cc:	dc01      	bgt.n	80022d2 <_printf_float+0x392>
 80022ce:	07db      	lsls	r3, r3, #31
 80022d0:	d539      	bpl.n	8002346 <_printf_float+0x406>
 80022d2:	2301      	movs	r3, #1
 80022d4:	4642      	mov	r2, r8
 80022d6:	4631      	mov	r1, r6
 80022d8:	4628      	mov	r0, r5
 80022da:	47b8      	blx	r7
 80022dc:	3001      	adds	r0, #1
 80022de:	f43f ae7d 	beq.w	8001fdc <_printf_float+0x9c>
 80022e2:	9b05      	ldr	r3, [sp, #20]
 80022e4:	465a      	mov	r2, fp
 80022e6:	4631      	mov	r1, r6
 80022e8:	4628      	mov	r0, r5
 80022ea:	47b8      	blx	r7
 80022ec:	3001      	adds	r0, #1
 80022ee:	f108 0801 	add.w	r8, r8, #1
 80022f2:	f43f ae73 	beq.w	8001fdc <_printf_float+0x9c>
 80022f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80022fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	f103 33ff 	add.w	r3, r3, #4294967295
 8002308:	d018      	beq.n	800233c <_printf_float+0x3fc>
 800230a:	4642      	mov	r2, r8
 800230c:	4631      	mov	r1, r6
 800230e:	4628      	mov	r0, r5
 8002310:	47b8      	blx	r7
 8002312:	3001      	adds	r0, #1
 8002314:	d10e      	bne.n	8002334 <_printf_float+0x3f4>
 8002316:	e661      	b.n	8001fdc <_printf_float+0x9c>
 8002318:	2301      	movs	r3, #1
 800231a:	464a      	mov	r2, r9
 800231c:	4631      	mov	r1, r6
 800231e:	4628      	mov	r0, r5
 8002320:	47b8      	blx	r7
 8002322:	3001      	adds	r0, #1
 8002324:	f43f ae5a 	beq.w	8001fdc <_printf_float+0x9c>
 8002328:	f108 0801 	add.w	r8, r8, #1
 800232c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	4543      	cmp	r3, r8
 8002332:	dcf1      	bgt.n	8002318 <_printf_float+0x3d8>
 8002334:	4653      	mov	r3, sl
 8002336:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800233a:	e6dd      	b.n	80020f8 <_printf_float+0x1b8>
 800233c:	f04f 0800 	mov.w	r8, #0
 8002340:	f104 091a 	add.w	r9, r4, #26
 8002344:	e7f2      	b.n	800232c <_printf_float+0x3ec>
 8002346:	2301      	movs	r3, #1
 8002348:	e7df      	b.n	800230a <_printf_float+0x3ca>
 800234a:	2301      	movs	r3, #1
 800234c:	464a      	mov	r2, r9
 800234e:	4631      	mov	r1, r6
 8002350:	4628      	mov	r0, r5
 8002352:	47b8      	blx	r7
 8002354:	3001      	adds	r0, #1
 8002356:	f43f ae41 	beq.w	8001fdc <_printf_float+0x9c>
 800235a:	f108 0801 	add.w	r8, r8, #1
 800235e:	68e3      	ldr	r3, [r4, #12]
 8002360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	4543      	cmp	r3, r8
 8002366:	dcf0      	bgt.n	800234a <_printf_float+0x40a>
 8002368:	e6fa      	b.n	8002160 <_printf_float+0x220>
 800236a:	f04f 0800 	mov.w	r8, #0
 800236e:	f104 0919 	add.w	r9, r4, #25
 8002372:	e7f4      	b.n	800235e <_printf_float+0x41e>
 8002374:	2900      	cmp	r1, #0
 8002376:	f43f ae8a 	beq.w	800208e <_printf_float+0x14e>
 800237a:	f04f 0c00 	mov.w	ip, #0
 800237e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8002382:	e9cd 0900 	strd	r0, r9, [sp]
 8002386:	6022      	str	r2, [r4, #0]
 8002388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800238c:	4628      	mov	r0, r5
 800238e:	f7ff fd51 	bl	8001e34 <__cvt>
 8002392:	4680      	mov	r8, r0
 8002394:	e64a      	b.n	800202c <_printf_float+0xec>
 8002396:	bf00      	nop

08002398 <_printf_common>:
 8002398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800239c:	4691      	mov	r9, r2
 800239e:	461f      	mov	r7, r3
 80023a0:	688a      	ldr	r2, [r1, #8]
 80023a2:	690b      	ldr	r3, [r1, #16]
 80023a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bfb8      	it	lt
 80023ac:	4613      	movlt	r3, r2
 80023ae:	f8c9 3000 	str.w	r3, [r9]
 80023b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023b6:	4606      	mov	r6, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	b112      	cbz	r2, 80023c2 <_printf_common+0x2a>
 80023bc:	3301      	adds	r3, #1
 80023be:	f8c9 3000 	str.w	r3, [r9]
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	0699      	lsls	r1, r3, #26
 80023c6:	bf42      	ittt	mi
 80023c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023cc:	3302      	addmi	r3, #2
 80023ce:	f8c9 3000 	strmi.w	r3, [r9]
 80023d2:	6825      	ldr	r5, [r4, #0]
 80023d4:	f015 0506 	ands.w	r5, r5, #6
 80023d8:	d107      	bne.n	80023ea <_printf_common+0x52>
 80023da:	f104 0a19 	add.w	sl, r4, #25
 80023de:	68e3      	ldr	r3, [r4, #12]
 80023e0:	f8d9 2000 	ldr.w	r2, [r9]
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	42ab      	cmp	r3, r5
 80023e8:	dc28      	bgt.n	800243c <_printf_common+0xa4>
 80023ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	3300      	adds	r3, #0
 80023f2:	bf18      	it	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	0692      	lsls	r2, r2, #26
 80023f8:	d42d      	bmi.n	8002456 <_printf_common+0xbe>
 80023fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023fe:	4639      	mov	r1, r7
 8002400:	4630      	mov	r0, r6
 8002402:	47c0      	blx	r8
 8002404:	3001      	adds	r0, #1
 8002406:	d020      	beq.n	800244a <_printf_common+0xb2>
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	68e5      	ldr	r5, [r4, #12]
 800240c:	f8d9 2000 	ldr.w	r2, [r9]
 8002410:	f003 0306 	and.w	r3, r3, #6
 8002414:	2b04      	cmp	r3, #4
 8002416:	bf08      	it	eq
 8002418:	1aad      	subeq	r5, r5, r2
 800241a:	68a3      	ldr	r3, [r4, #8]
 800241c:	6922      	ldr	r2, [r4, #16]
 800241e:	bf0c      	ite	eq
 8002420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002424:	2500      	movne	r5, #0
 8002426:	4293      	cmp	r3, r2
 8002428:	bfc4      	itt	gt
 800242a:	1a9b      	subgt	r3, r3, r2
 800242c:	18ed      	addgt	r5, r5, r3
 800242e:	f04f 0900 	mov.w	r9, #0
 8002432:	341a      	adds	r4, #26
 8002434:	454d      	cmp	r5, r9
 8002436:	d11a      	bne.n	800246e <_printf_common+0xd6>
 8002438:	2000      	movs	r0, #0
 800243a:	e008      	b.n	800244e <_printf_common+0xb6>
 800243c:	2301      	movs	r3, #1
 800243e:	4652      	mov	r2, sl
 8002440:	4639      	mov	r1, r7
 8002442:	4630      	mov	r0, r6
 8002444:	47c0      	blx	r8
 8002446:	3001      	adds	r0, #1
 8002448:	d103      	bne.n	8002452 <_printf_common+0xba>
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002452:	3501      	adds	r5, #1
 8002454:	e7c3      	b.n	80023de <_printf_common+0x46>
 8002456:	18e1      	adds	r1, r4, r3
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	2030      	movs	r0, #48	; 0x30
 800245c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002460:	4422      	add	r2, r4
 8002462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800246a:	3302      	adds	r3, #2
 800246c:	e7c5      	b.n	80023fa <_printf_common+0x62>
 800246e:	2301      	movs	r3, #1
 8002470:	4622      	mov	r2, r4
 8002472:	4639      	mov	r1, r7
 8002474:	4630      	mov	r0, r6
 8002476:	47c0      	blx	r8
 8002478:	3001      	adds	r0, #1
 800247a:	d0e6      	beq.n	800244a <_printf_common+0xb2>
 800247c:	f109 0901 	add.w	r9, r9, #1
 8002480:	e7d8      	b.n	8002434 <_printf_common+0x9c>
	...

08002484 <_printf_i>:
 8002484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002488:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800248c:	460c      	mov	r4, r1
 800248e:	7e09      	ldrb	r1, [r1, #24]
 8002490:	b085      	sub	sp, #20
 8002492:	296e      	cmp	r1, #110	; 0x6e
 8002494:	4617      	mov	r7, r2
 8002496:	4606      	mov	r6, r0
 8002498:	4698      	mov	r8, r3
 800249a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800249c:	f000 80b3 	beq.w	8002606 <_printf_i+0x182>
 80024a0:	d822      	bhi.n	80024e8 <_printf_i+0x64>
 80024a2:	2963      	cmp	r1, #99	; 0x63
 80024a4:	d036      	beq.n	8002514 <_printf_i+0x90>
 80024a6:	d80a      	bhi.n	80024be <_printf_i+0x3a>
 80024a8:	2900      	cmp	r1, #0
 80024aa:	f000 80b9 	beq.w	8002620 <_printf_i+0x19c>
 80024ae:	2958      	cmp	r1, #88	; 0x58
 80024b0:	f000 8083 	beq.w	80025ba <_printf_i+0x136>
 80024b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80024bc:	e032      	b.n	8002524 <_printf_i+0xa0>
 80024be:	2964      	cmp	r1, #100	; 0x64
 80024c0:	d001      	beq.n	80024c6 <_printf_i+0x42>
 80024c2:	2969      	cmp	r1, #105	; 0x69
 80024c4:	d1f6      	bne.n	80024b4 <_printf_i+0x30>
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	0605      	lsls	r5, r0, #24
 80024cc:	f103 0104 	add.w	r1, r3, #4
 80024d0:	d52a      	bpl.n	8002528 <_printf_i+0xa4>
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6011      	str	r1, [r2, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da03      	bge.n	80024e2 <_printf_i+0x5e>
 80024da:	222d      	movs	r2, #45	; 0x2d
 80024dc:	425b      	negs	r3, r3
 80024de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024e2:	486f      	ldr	r0, [pc, #444]	; (80026a0 <_printf_i+0x21c>)
 80024e4:	220a      	movs	r2, #10
 80024e6:	e039      	b.n	800255c <_printf_i+0xd8>
 80024e8:	2973      	cmp	r1, #115	; 0x73
 80024ea:	f000 809d 	beq.w	8002628 <_printf_i+0x1a4>
 80024ee:	d808      	bhi.n	8002502 <_printf_i+0x7e>
 80024f0:	296f      	cmp	r1, #111	; 0x6f
 80024f2:	d020      	beq.n	8002536 <_printf_i+0xb2>
 80024f4:	2970      	cmp	r1, #112	; 0x70
 80024f6:	d1dd      	bne.n	80024b4 <_printf_i+0x30>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f043 0320 	orr.w	r3, r3, #32
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	e003      	b.n	800250a <_printf_i+0x86>
 8002502:	2975      	cmp	r1, #117	; 0x75
 8002504:	d017      	beq.n	8002536 <_printf_i+0xb2>
 8002506:	2978      	cmp	r1, #120	; 0x78
 8002508:	d1d4      	bne.n	80024b4 <_printf_i+0x30>
 800250a:	2378      	movs	r3, #120	; 0x78
 800250c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002510:	4864      	ldr	r0, [pc, #400]	; (80026a4 <_printf_i+0x220>)
 8002512:	e055      	b.n	80025c0 <_printf_i+0x13c>
 8002514:	6813      	ldr	r3, [r2, #0]
 8002516:	1d19      	adds	r1, r3, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6011      	str	r1, [r2, #0]
 800251c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002524:	2301      	movs	r3, #1
 8002526:	e08c      	b.n	8002642 <_printf_i+0x1be>
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002530:	bf18      	it	ne
 8002532:	b21b      	sxthne	r3, r3
 8002534:	e7cf      	b.n	80024d6 <_printf_i+0x52>
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	6825      	ldr	r5, [r4, #0]
 800253a:	1d18      	adds	r0, r3, #4
 800253c:	6010      	str	r0, [r2, #0]
 800253e:	0628      	lsls	r0, r5, #24
 8002540:	d501      	bpl.n	8002546 <_printf_i+0xc2>
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	e002      	b.n	800254c <_printf_i+0xc8>
 8002546:	0668      	lsls	r0, r5, #25
 8002548:	d5fb      	bpl.n	8002542 <_printf_i+0xbe>
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	4854      	ldr	r0, [pc, #336]	; (80026a0 <_printf_i+0x21c>)
 800254e:	296f      	cmp	r1, #111	; 0x6f
 8002550:	bf14      	ite	ne
 8002552:	220a      	movne	r2, #10
 8002554:	2208      	moveq	r2, #8
 8002556:	2100      	movs	r1, #0
 8002558:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800255c:	6865      	ldr	r5, [r4, #4]
 800255e:	60a5      	str	r5, [r4, #8]
 8002560:	2d00      	cmp	r5, #0
 8002562:	f2c0 8095 	blt.w	8002690 <_printf_i+0x20c>
 8002566:	6821      	ldr	r1, [r4, #0]
 8002568:	f021 0104 	bic.w	r1, r1, #4
 800256c:	6021      	str	r1, [r4, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d13d      	bne.n	80025ee <_printf_i+0x16a>
 8002572:	2d00      	cmp	r5, #0
 8002574:	f040 808e 	bne.w	8002694 <_printf_i+0x210>
 8002578:	4665      	mov	r5, ip
 800257a:	2a08      	cmp	r2, #8
 800257c:	d10b      	bne.n	8002596 <_printf_i+0x112>
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	07db      	lsls	r3, r3, #31
 8002582:	d508      	bpl.n	8002596 <_printf_i+0x112>
 8002584:	6923      	ldr	r3, [r4, #16]
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	bfde      	ittt	le
 800258c:	2330      	movle	r3, #48	; 0x30
 800258e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002592:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002596:	ebac 0305 	sub.w	r3, ip, r5
 800259a:	6123      	str	r3, [r4, #16]
 800259c:	f8cd 8000 	str.w	r8, [sp]
 80025a0:	463b      	mov	r3, r7
 80025a2:	aa03      	add	r2, sp, #12
 80025a4:	4621      	mov	r1, r4
 80025a6:	4630      	mov	r0, r6
 80025a8:	f7ff fef6 	bl	8002398 <_printf_common>
 80025ac:	3001      	adds	r0, #1
 80025ae:	d14d      	bne.n	800264c <_printf_i+0x1c8>
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	b005      	add	sp, #20
 80025b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025ba:	4839      	ldr	r0, [pc, #228]	; (80026a0 <_printf_i+0x21c>)
 80025bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	6821      	ldr	r1, [r4, #0]
 80025c4:	1d1d      	adds	r5, r3, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6015      	str	r5, [r2, #0]
 80025ca:	060a      	lsls	r2, r1, #24
 80025cc:	d50b      	bpl.n	80025e6 <_printf_i+0x162>
 80025ce:	07ca      	lsls	r2, r1, #31
 80025d0:	bf44      	itt	mi
 80025d2:	f041 0120 	orrmi.w	r1, r1, #32
 80025d6:	6021      	strmi	r1, [r4, #0]
 80025d8:	b91b      	cbnz	r3, 80025e2 <_printf_i+0x15e>
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	f022 0220 	bic.w	r2, r2, #32
 80025e0:	6022      	str	r2, [r4, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	e7b7      	b.n	8002556 <_printf_i+0xd2>
 80025e6:	064d      	lsls	r5, r1, #25
 80025e8:	bf48      	it	mi
 80025ea:	b29b      	uxthmi	r3, r3
 80025ec:	e7ef      	b.n	80025ce <_printf_i+0x14a>
 80025ee:	4665      	mov	r5, ip
 80025f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80025f4:	fb02 3311 	mls	r3, r2, r1, r3
 80025f8:	5cc3      	ldrb	r3, [r0, r3]
 80025fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025fe:	460b      	mov	r3, r1
 8002600:	2900      	cmp	r1, #0
 8002602:	d1f5      	bne.n	80025f0 <_printf_i+0x16c>
 8002604:	e7b9      	b.n	800257a <_printf_i+0xf6>
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	6825      	ldr	r5, [r4, #0]
 800260a:	6961      	ldr	r1, [r4, #20]
 800260c:	1d18      	adds	r0, r3, #4
 800260e:	6010      	str	r0, [r2, #0]
 8002610:	0628      	lsls	r0, r5, #24
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	d501      	bpl.n	800261a <_printf_i+0x196>
 8002616:	6019      	str	r1, [r3, #0]
 8002618:	e002      	b.n	8002620 <_printf_i+0x19c>
 800261a:	066a      	lsls	r2, r5, #25
 800261c:	d5fb      	bpl.n	8002616 <_printf_i+0x192>
 800261e:	8019      	strh	r1, [r3, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	6123      	str	r3, [r4, #16]
 8002624:	4665      	mov	r5, ip
 8002626:	e7b9      	b.n	800259c <_printf_i+0x118>
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	1d19      	adds	r1, r3, #4
 800262c:	6011      	str	r1, [r2, #0]
 800262e:	681d      	ldr	r5, [r3, #0]
 8002630:	6862      	ldr	r2, [r4, #4]
 8002632:	2100      	movs	r1, #0
 8002634:	4628      	mov	r0, r5
 8002636:	f7fd fe0b 	bl	8000250 <memchr>
 800263a:	b108      	cbz	r0, 8002640 <_printf_i+0x1bc>
 800263c:	1b40      	subs	r0, r0, r5
 800263e:	6060      	str	r0, [r4, #4]
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	6123      	str	r3, [r4, #16]
 8002644:	2300      	movs	r3, #0
 8002646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800264a:	e7a7      	b.n	800259c <_printf_i+0x118>
 800264c:	6923      	ldr	r3, [r4, #16]
 800264e:	462a      	mov	r2, r5
 8002650:	4639      	mov	r1, r7
 8002652:	4630      	mov	r0, r6
 8002654:	47c0      	blx	r8
 8002656:	3001      	adds	r0, #1
 8002658:	d0aa      	beq.n	80025b0 <_printf_i+0x12c>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	079b      	lsls	r3, r3, #30
 800265e:	d413      	bmi.n	8002688 <_printf_i+0x204>
 8002660:	68e0      	ldr	r0, [r4, #12]
 8002662:	9b03      	ldr	r3, [sp, #12]
 8002664:	4298      	cmp	r0, r3
 8002666:	bfb8      	it	lt
 8002668:	4618      	movlt	r0, r3
 800266a:	e7a3      	b.n	80025b4 <_printf_i+0x130>
 800266c:	2301      	movs	r3, #1
 800266e:	464a      	mov	r2, r9
 8002670:	4639      	mov	r1, r7
 8002672:	4630      	mov	r0, r6
 8002674:	47c0      	blx	r8
 8002676:	3001      	adds	r0, #1
 8002678:	d09a      	beq.n	80025b0 <_printf_i+0x12c>
 800267a:	3501      	adds	r5, #1
 800267c:	68e3      	ldr	r3, [r4, #12]
 800267e:	9a03      	ldr	r2, [sp, #12]
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	42ab      	cmp	r3, r5
 8002684:	dcf2      	bgt.n	800266c <_printf_i+0x1e8>
 8002686:	e7eb      	b.n	8002660 <_printf_i+0x1dc>
 8002688:	2500      	movs	r5, #0
 800268a:	f104 0919 	add.w	r9, r4, #25
 800268e:	e7f5      	b.n	800267c <_printf_i+0x1f8>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ac      	bne.n	80025ee <_printf_i+0x16a>
 8002694:	7803      	ldrb	r3, [r0, #0]
 8002696:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800269a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800269e:	e76c      	b.n	800257a <_printf_i+0xf6>
 80026a0:	0800440e 	.word	0x0800440e
 80026a4:	0800441f 	.word	0x0800441f

080026a8 <iprintf>:
 80026a8:	b40f      	push	{r0, r1, r2, r3}
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <iprintf+0x2c>)
 80026ac:	b513      	push	{r0, r1, r4, lr}
 80026ae:	681c      	ldr	r4, [r3, #0]
 80026b0:	b124      	cbz	r4, 80026bc <iprintf+0x14>
 80026b2:	69a3      	ldr	r3, [r4, #24]
 80026b4:	b913      	cbnz	r3, 80026bc <iprintf+0x14>
 80026b6:	4620      	mov	r0, r4
 80026b8:	f000 fe26 	bl	8003308 <__sinit>
 80026bc:	ab05      	add	r3, sp, #20
 80026be:	9a04      	ldr	r2, [sp, #16]
 80026c0:	68a1      	ldr	r1, [r4, #8]
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	4620      	mov	r0, r4
 80026c6:	f001 fa85 	bl	8003bd4 <_vfiprintf_r>
 80026ca:	b002      	add	sp, #8
 80026cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d0:	b004      	add	sp, #16
 80026d2:	4770      	bx	lr
 80026d4:	2000000c 	.word	0x2000000c

080026d8 <quorem>:
 80026d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	6903      	ldr	r3, [r0, #16]
 80026de:	690c      	ldr	r4, [r1, #16]
 80026e0:	42a3      	cmp	r3, r4
 80026e2:	4680      	mov	r8, r0
 80026e4:	f2c0 8082 	blt.w	80027ec <quorem+0x114>
 80026e8:	3c01      	subs	r4, #1
 80026ea:	f101 0714 	add.w	r7, r1, #20
 80026ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80026f2:	f100 0614 	add.w	r6, r0, #20
 80026f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80026fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80026fe:	eb06 030c 	add.w	r3, r6, ip
 8002702:	3501      	adds	r5, #1
 8002704:	eb07 090c 	add.w	r9, r7, ip
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	fbb0 f5f5 	udiv	r5, r0, r5
 800270e:	b395      	cbz	r5, 8002776 <quorem+0x9e>
 8002710:	f04f 0a00 	mov.w	sl, #0
 8002714:	4638      	mov	r0, r7
 8002716:	46b6      	mov	lr, r6
 8002718:	46d3      	mov	fp, sl
 800271a:	f850 2b04 	ldr.w	r2, [r0], #4
 800271e:	b293      	uxth	r3, r2
 8002720:	fb05 a303 	mla	r3, r5, r3, sl
 8002724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002728:	b29b      	uxth	r3, r3
 800272a:	ebab 0303 	sub.w	r3, fp, r3
 800272e:	0c12      	lsrs	r2, r2, #16
 8002730:	f8de b000 	ldr.w	fp, [lr]
 8002734:	fb05 a202 	mla	r2, r5, r2, sl
 8002738:	fa13 f38b 	uxtah	r3, r3, fp
 800273c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002740:	fa1f fb82 	uxth.w	fp, r2
 8002744:	f8de 2000 	ldr.w	r2, [lr]
 8002748:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800274c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002750:	b29b      	uxth	r3, r3
 8002752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002756:	4581      	cmp	r9, r0
 8002758:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800275c:	f84e 3b04 	str.w	r3, [lr], #4
 8002760:	d2db      	bcs.n	800271a <quorem+0x42>
 8002762:	f856 300c 	ldr.w	r3, [r6, ip]
 8002766:	b933      	cbnz	r3, 8002776 <quorem+0x9e>
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	3b04      	subs	r3, #4
 800276c:	429e      	cmp	r6, r3
 800276e:	461a      	mov	r2, r3
 8002770:	d330      	bcc.n	80027d4 <quorem+0xfc>
 8002772:	f8c8 4010 	str.w	r4, [r8, #16]
 8002776:	4640      	mov	r0, r8
 8002778:	f001 f886 	bl	8003888 <__mcmp>
 800277c:	2800      	cmp	r0, #0
 800277e:	db25      	blt.n	80027cc <quorem+0xf4>
 8002780:	3501      	adds	r5, #1
 8002782:	4630      	mov	r0, r6
 8002784:	f04f 0c00 	mov.w	ip, #0
 8002788:	f857 2b04 	ldr.w	r2, [r7], #4
 800278c:	f8d0 e000 	ldr.w	lr, [r0]
 8002790:	b293      	uxth	r3, r2
 8002792:	ebac 0303 	sub.w	r3, ip, r3
 8002796:	0c12      	lsrs	r2, r2, #16
 8002798:	fa13 f38e 	uxtah	r3, r3, lr
 800279c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80027a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027aa:	45b9      	cmp	r9, r7
 80027ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80027b0:	f840 3b04 	str.w	r3, [r0], #4
 80027b4:	d2e8      	bcs.n	8002788 <quorem+0xb0>
 80027b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80027ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80027be:	b92a      	cbnz	r2, 80027cc <quorem+0xf4>
 80027c0:	3b04      	subs	r3, #4
 80027c2:	429e      	cmp	r6, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	d30b      	bcc.n	80027e0 <quorem+0x108>
 80027c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80027cc:	4628      	mov	r0, r5
 80027ce:	b003      	add	sp, #12
 80027d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	3b04      	subs	r3, #4
 80027d8:	2a00      	cmp	r2, #0
 80027da:	d1ca      	bne.n	8002772 <quorem+0x9a>
 80027dc:	3c01      	subs	r4, #1
 80027de:	e7c5      	b.n	800276c <quorem+0x94>
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	3b04      	subs	r3, #4
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d1ef      	bne.n	80027c8 <quorem+0xf0>
 80027e8:	3c01      	subs	r4, #1
 80027ea:	e7ea      	b.n	80027c2 <quorem+0xea>
 80027ec:	2000      	movs	r0, #0
 80027ee:	e7ee      	b.n	80027ce <quorem+0xf6>

080027f0 <_dtoa_r>:
 80027f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f4:	ec57 6b10 	vmov	r6, r7, d0
 80027f8:	b095      	sub	sp, #84	; 0x54
 80027fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80027fc:	9108      	str	r1, [sp, #32]
 80027fe:	4604      	mov	r4, r0
 8002800:	920a      	str	r2, [sp, #40]	; 0x28
 8002802:	9311      	str	r3, [sp, #68]	; 0x44
 8002804:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8002808:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800280c:	b93d      	cbnz	r5, 800281e <_dtoa_r+0x2e>
 800280e:	2010      	movs	r0, #16
 8002810:	f000 fe12 	bl	8003438 <malloc>
 8002814:	6260      	str	r0, [r4, #36]	; 0x24
 8002816:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800281a:	6005      	str	r5, [r0, #0]
 800281c:	60c5      	str	r5, [r0, #12]
 800281e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	b151      	cbz	r1, 800283a <_dtoa_r+0x4a>
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	604a      	str	r2, [r1, #4]
 8002828:	2301      	movs	r3, #1
 800282a:	4093      	lsls	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
 800282e:	4620      	mov	r0, r4
 8002830:	f000 fe49 	bl	80034c6 <_Bfree>
 8002834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	1e3b      	subs	r3, r7, #0
 800283c:	bfb9      	ittee	lt
 800283e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002842:	9303      	strlt	r3, [sp, #12]
 8002844:	2300      	movge	r3, #0
 8002846:	f8c8 3000 	strge.w	r3, [r8]
 800284a:	9d03      	ldr	r5, [sp, #12]
 800284c:	4bac      	ldr	r3, [pc, #688]	; (8002b00 <_dtoa_r+0x310>)
 800284e:	bfbc      	itt	lt
 8002850:	2201      	movlt	r2, #1
 8002852:	f8c8 2000 	strlt.w	r2, [r8]
 8002856:	43ab      	bics	r3, r5
 8002858:	d11b      	bne.n	8002892 <_dtoa_r+0xa2>
 800285a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800285c:	f242 730f 	movw	r3, #9999	; 0x270f
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	9b02      	ldr	r3, [sp, #8]
 8002864:	b923      	cbnz	r3, 8002870 <_dtoa_r+0x80>
 8002866:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800286a:	2d00      	cmp	r5, #0
 800286c:	f000 84dd 	beq.w	800322a <_dtoa_r+0xa3a>
 8002870:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002872:	b953      	cbnz	r3, 800288a <_dtoa_r+0x9a>
 8002874:	4ba3      	ldr	r3, [pc, #652]	; (8002b04 <_dtoa_r+0x314>)
 8002876:	e020      	b.n	80028ba <_dtoa_r+0xca>
 8002878:	4ba3      	ldr	r3, [pc, #652]	; (8002b08 <_dtoa_r+0x318>)
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	3308      	adds	r3, #8
 800287e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	9804      	ldr	r0, [sp, #16]
 8002884:	b015      	add	sp, #84	; 0x54
 8002886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288a:	4b9e      	ldr	r3, [pc, #632]	; (8002b04 <_dtoa_r+0x314>)
 800288c:	9304      	str	r3, [sp, #16]
 800288e:	3303      	adds	r3, #3
 8002890:	e7f5      	b.n	800287e <_dtoa_r+0x8e>
 8002892:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002896:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028a2:	d10c      	bne.n	80028be <_dtoa_r+0xce>
 80028a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80028a6:	2301      	movs	r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 84b9 	beq.w	8003224 <_dtoa_r+0xa34>
 80028b2:	4b96      	ldr	r3, [pc, #600]	; (8002b0c <_dtoa_r+0x31c>)
 80028b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	9304      	str	r3, [sp, #16]
 80028bc:	e7e1      	b.n	8002882 <_dtoa_r+0x92>
 80028be:	a913      	add	r1, sp, #76	; 0x4c
 80028c0:	aa12      	add	r2, sp, #72	; 0x48
 80028c2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80028c6:	4620      	mov	r0, r4
 80028c8:	f001 f855 	bl	8003976 <__d2b>
 80028cc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80028d0:	9001      	str	r0, [sp, #4]
 80028d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80028d4:	2e00      	cmp	r6, #0
 80028d6:	d046      	beq.n	8002966 <_dtoa_r+0x176>
 80028d8:	9805      	ldr	r0, [sp, #20]
 80028da:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80028de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028e2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80028e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80028ea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80028ee:	2700      	movs	r7, #0
 80028f0:	ee07 aa90 	vmov	s15, sl
 80028f4:	ec43 2b16 	vmov	d6, r2, r3
 80028f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80028fc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8002ae8 <_dtoa_r+0x2f8>
 8002900:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002904:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002908:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8002af0 <_dtoa_r+0x300>
 800290c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8002910:	eeb0 7b46 	vmov.f64	d7, d6
 8002914:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002af8 <_dtoa_r+0x308>
 8002918:	eea5 7b06 	vfma.f64	d7, d5, d6
 800291c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002920:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	ee16 ba90 	vmov	fp, s13
 800292c:	d508      	bpl.n	8002940 <_dtoa_r+0x150>
 800292e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002932:	eeb4 6b47 	vcmp.f64	d6, d7
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	bf18      	it	ne
 800293c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002940:	f1bb 0f16 	cmp.w	fp, #22
 8002944:	d834      	bhi.n	80029b0 <_dtoa_r+0x1c0>
 8002946:	4b72      	ldr	r3, [pc, #456]	; (8002b10 <_dtoa_r+0x320>)
 8002948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800294c:	ed93 7b00 	vldr	d7, [r3]
 8002950:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002954:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	dd01      	ble.n	8002962 <_dtoa_r+0x172>
 800295e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002962:	2300      	movs	r3, #0
 8002964:	e025      	b.n	80029b2 <_dtoa_r+0x1c2>
 8002966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002968:	eb01 0a03 	add.w	sl, r1, r3
 800296c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8002970:	2b20      	cmp	r3, #32
 8002972:	dd17      	ble.n	80029a4 <_dtoa_r+0x1b4>
 8002974:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002978:	9a02      	ldr	r2, [sp, #8]
 800297a:	409d      	lsls	r5, r3
 800297c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	432b      	orrs	r3, r5
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800298e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002992:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002996:	9805      	ldr	r0, [sp, #20]
 8002998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800299c:	2701      	movs	r7, #1
 800299e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80029a2:	e7a5      	b.n	80028f0 <_dtoa_r+0x100>
 80029a4:	9a02      	ldr	r2, [sp, #8]
 80029a6:	f1c3 0320 	rsb	r3, r3, #32
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	e7ea      	b.n	8002986 <_dtoa_r+0x196>
 80029b0:	2301      	movs	r3, #1
 80029b2:	eba1 0a0a 	sub.w	sl, r1, sl
 80029b6:	9310      	str	r3, [sp, #64]	; 0x40
 80029b8:	f1ba 0301 	subs.w	r3, sl, #1
 80029bc:	9307      	str	r3, [sp, #28]
 80029be:	bf43      	ittte	mi
 80029c0:	2300      	movmi	r3, #0
 80029c2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80029c6:	9307      	strmi	r3, [sp, #28]
 80029c8:	f04f 0a00 	movpl.w	sl, #0
 80029cc:	f1bb 0f00 	cmp.w	fp, #0
 80029d0:	db19      	blt.n	8002a06 <_dtoa_r+0x216>
 80029d2:	9b07      	ldr	r3, [sp, #28]
 80029d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80029d8:	445b      	add	r3, fp
 80029da:	9307      	str	r3, [sp, #28]
 80029dc:	f04f 0800 	mov.w	r8, #0
 80029e0:	9b08      	ldr	r3, [sp, #32]
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	d866      	bhi.n	8002ab4 <_dtoa_r+0x2c4>
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	bfc4      	itt	gt
 80029ea:	3b04      	subgt	r3, #4
 80029ec:	9308      	strgt	r3, [sp, #32]
 80029ee:	9b08      	ldr	r3, [sp, #32]
 80029f0:	f1a3 0302 	sub.w	r3, r3, #2
 80029f4:	bfcc      	ite	gt
 80029f6:	2500      	movgt	r5, #0
 80029f8:	2501      	movle	r5, #1
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d866      	bhi.n	8002acc <_dtoa_r+0x2dc>
 80029fe:	e8df f003 	tbb	[pc, r3]
 8002a02:	5755      	.short	0x5755
 8002a04:	4909      	.short	0x4909
 8002a06:	2300      	movs	r3, #0
 8002a08:	ebaa 0a0b 	sub.w	sl, sl, fp
 8002a0c:	f1cb 0800 	rsb	r8, fp, #0
 8002a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a12:	e7e5      	b.n	80029e0 <_dtoa_r+0x1f0>
 8002a14:	2301      	movs	r3, #1
 8002a16:	9309      	str	r3, [sp, #36]	; 0x24
 8002a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	dd59      	ble.n	8002ad2 <_dtoa_r+0x2e2>
 8002a1e:	9306      	str	r3, [sp, #24]
 8002a20:	4699      	mov	r9, r3
 8002a22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002a24:	2200      	movs	r2, #0
 8002a26:	6072      	str	r2, [r6, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	f102 0014 	add.w	r0, r2, #20
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	6871      	ldr	r1, [r6, #4]
 8002a32:	d953      	bls.n	8002adc <_dtoa_r+0x2ec>
 8002a34:	4620      	mov	r0, r4
 8002a36:	f000 fd12 	bl	800345e <_Balloc>
 8002a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a3c:	6030      	str	r0, [r6, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	9304      	str	r3, [sp, #16]
 8002a42:	f1b9 0f0e 	cmp.w	r9, #14
 8002a46:	f200 80c2 	bhi.w	8002bce <_dtoa_r+0x3de>
 8002a4a:	2d00      	cmp	r5, #0
 8002a4c:	f000 80bf 	beq.w	8002bce <_dtoa_r+0x3de>
 8002a50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002a54:	f1bb 0f00 	cmp.w	fp, #0
 8002a58:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002a5c:	f340 80e6 	ble.w	8002c2c <_dtoa_r+0x43c>
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <_dtoa_r+0x320>)
 8002a62:	f00b 030f 	and.w	r3, fp, #15
 8002a66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002a6a:	ed93 7b00 	vldr	d7, [r3]
 8002a6e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8002a72:	06da      	lsls	r2, r3, #27
 8002a74:	f140 80d8 	bpl.w	8002c28 <_dtoa_r+0x438>
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <_dtoa_r+0x324>)
 8002a7a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8002a7e:	ed92 6b08 	vldr	d6, [r2, #32]
 8002a82:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8002a86:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4920      	ldr	r1, [pc, #128]	; (8002b14 <_dtoa_r+0x324>)
 8002a92:	e04a      	b.n	8002b2a <_dtoa_r+0x33a>
 8002a94:	2301      	movs	r3, #1
 8002a96:	9309      	str	r3, [sp, #36]	; 0x24
 8002a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a9a:	445b      	add	r3, fp
 8002a9c:	f103 0901 	add.w	r9, r3, #1
 8002aa0:	9306      	str	r3, [sp, #24]
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	bfb8      	it	lt
 8002aa8:	2301      	movlt	r3, #1
 8002aaa:	e7ba      	b.n	8002a22 <_dtoa_r+0x232>
 8002aac:	2300      	movs	r3, #0
 8002aae:	e7b2      	b.n	8002a16 <_dtoa_r+0x226>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e7f0      	b.n	8002a96 <_dtoa_r+0x2a6>
 8002ab4:	2501      	movs	r5, #1
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	9306      	str	r3, [sp, #24]
 8002ac2:	4699      	mov	r9, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2312      	movs	r3, #18
 8002ac8:	920a      	str	r2, [sp, #40]	; 0x28
 8002aca:	e7aa      	b.n	8002a22 <_dtoa_r+0x232>
 8002acc:	2301      	movs	r3, #1
 8002ace:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad0:	e7f4      	b.n	8002abc <_dtoa_r+0x2cc>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	9306      	str	r3, [sp, #24]
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	e7f5      	b.n	8002ac8 <_dtoa_r+0x2d8>
 8002adc:	3101      	adds	r1, #1
 8002ade:	6071      	str	r1, [r6, #4]
 8002ae0:	0052      	lsls	r2, r2, #1
 8002ae2:	e7a2      	b.n	8002a2a <_dtoa_r+0x23a>
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	636f4361 	.word	0x636f4361
 8002aec:	3fd287a7 	.word	0x3fd287a7
 8002af0:	8b60c8b3 	.word	0x8b60c8b3
 8002af4:	3fc68a28 	.word	0x3fc68a28
 8002af8:	509f79fb 	.word	0x509f79fb
 8002afc:	3fd34413 	.word	0x3fd34413
 8002b00:	7ff00000 	.word	0x7ff00000
 8002b04:	08004439 	.word	0x08004439
 8002b08:	08004430 	.word	0x08004430
 8002b0c:	0800440d 	.word	0x0800440d
 8002b10:	080044c8 	.word	0x080044c8
 8002b14:	080044a0 	.word	0x080044a0
 8002b18:	07de      	lsls	r6, r3, #31
 8002b1a:	d504      	bpl.n	8002b26 <_dtoa_r+0x336>
 8002b1c:	ed91 6b00 	vldr	d6, [r1]
 8002b20:	3201      	adds	r2, #1
 8002b22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b26:	105b      	asrs	r3, r3, #1
 8002b28:	3108      	adds	r1, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f4      	bne.n	8002b18 <_dtoa_r+0x328>
 8002b2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002b32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8002b36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a7 	beq.w	8002c90 <_dtoa_r+0x4a0>
 8002b42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002b4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	f140 809d 	bpl.w	8002c90 <_dtoa_r+0x4a0>
 8002b56:	f1b9 0f00 	cmp.w	r9, #0
 8002b5a:	f000 8099 	beq.w	8002c90 <_dtoa_r+0x4a0>
 8002b5e:	9b06      	ldr	r3, [sp, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dd30      	ble.n	8002bc6 <_dtoa_r+0x3d6>
 8002b64:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b70:	9d06      	ldr	r5, [sp, #24]
 8002b72:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002b76:	3201      	adds	r2, #1
 8002b78:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002b7c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002b80:	ee07 2a90 	vmov	s15, r2
 8002b84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b88:	eea7 5b06 	vfma.f64	d5, d7, d6
 8002b8c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8002b90:	9a03      	ldr	r2, [sp, #12]
 8002b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b96:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8002b9a:	2d00      	cmp	r5, #0
 8002b9c:	d17b      	bne.n	8002c96 <_dtoa_r+0x4a6>
 8002b9e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002ba2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002ba6:	ec41 0b17 	vmov	d7, r0, r1
 8002baa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	f300 8253 	bgt.w	800305c <_dtoa_r+0x86c>
 8002bb6:	eeb1 7b47 	vneg.f64	d7, d7
 8002bba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc2:	f100 8249 	bmi.w	8003058 <_dtoa_r+0x868>
 8002bc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f2c0 8119 	blt.w	8002e08 <_dtoa_r+0x618>
 8002bd6:	f1bb 0f0e 	cmp.w	fp, #14
 8002bda:	f300 8115 	bgt.w	8002e08 <_dtoa_r+0x618>
 8002bde:	4bc3      	ldr	r3, [pc, #780]	; (8002eec <_dtoa_r+0x6fc>)
 8002be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002be4:	ed93 6b00 	vldr	d6, [r3]
 8002be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f280 80ba 	bge.w	8002d64 <_dtoa_r+0x574>
 8002bf0:	f1b9 0f00 	cmp.w	r9, #0
 8002bf4:	f300 80b6 	bgt.w	8002d64 <_dtoa_r+0x574>
 8002bf8:	f040 822d 	bne.w	8003056 <_dtoa_r+0x866>
 8002bfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002c00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002c04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002c08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	464d      	mov	r5, r9
 8002c12:	464f      	mov	r7, r9
 8002c14:	f280 8204 	bge.w	8003020 <_dtoa_r+0x830>
 8002c18:	9b04      	ldr	r3, [sp, #16]
 8002c1a:	9a04      	ldr	r2, [sp, #16]
 8002c1c:	1c5e      	adds	r6, r3, #1
 8002c1e:	2331      	movs	r3, #49	; 0x31
 8002c20:	7013      	strb	r3, [r2, #0]
 8002c22:	f10b 0b01 	add.w	fp, fp, #1
 8002c26:	e1ff      	b.n	8003028 <_dtoa_r+0x838>
 8002c28:	2202      	movs	r2, #2
 8002c2a:	e731      	b.n	8002a90 <_dtoa_r+0x2a0>
 8002c2c:	d02e      	beq.n	8002c8c <_dtoa_r+0x49c>
 8002c2e:	f1cb 0300 	rsb	r3, fp, #0
 8002c32:	4aae      	ldr	r2, [pc, #696]	; (8002eec <_dtoa_r+0x6fc>)
 8002c34:	f003 010f 	and.w	r1, r3, #15
 8002c38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002c3c:	ed92 7b00 	vldr	d7, [r2]
 8002c40:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8002c44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002c4c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8002c50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002c54:	49a6      	ldr	r1, [pc, #664]	; (8002ef0 <_dtoa_r+0x700>)
 8002c56:	111b      	asrs	r3, r3, #4
 8002c58:	2000      	movs	r0, #0
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	b93b      	cbnz	r3, 8002c6e <_dtoa_r+0x47e>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	f43f af6b 	beq.w	8002b3a <_dtoa_r+0x34a>
 8002c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c6c:	e765      	b.n	8002b3a <_dtoa_r+0x34a>
 8002c6e:	07dd      	lsls	r5, r3, #31
 8002c70:	d509      	bpl.n	8002c86 <_dtoa_r+0x496>
 8002c72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8002c76:	ed91 7b00 	vldr	d7, [r1]
 8002c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002c82:	3201      	adds	r2, #1
 8002c84:	2001      	movs	r0, #1
 8002c86:	105b      	asrs	r3, r3, #1
 8002c88:	3108      	adds	r1, #8
 8002c8a:	e7e7      	b.n	8002c5c <_dtoa_r+0x46c>
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	e754      	b.n	8002b3a <_dtoa_r+0x34a>
 8002c90:	465b      	mov	r3, fp
 8002c92:	464d      	mov	r5, r9
 8002c94:	e770      	b.n	8002b78 <_dtoa_r+0x388>
 8002c96:	4a95      	ldr	r2, [pc, #596]	; (8002eec <_dtoa_r+0x6fc>)
 8002c98:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002c9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8002ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ca2:	ec41 0b17 	vmov	d7, r0, r1
 8002ca6:	b35a      	cbz	r2, 8002d00 <_dtoa_r+0x510>
 8002ca8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8002cac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8002cb0:	9e04      	ldr	r6, [sp, #16]
 8002cb2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8002cb6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002cba:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002cbe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002cc2:	ee14 2a90 	vmov	r2, s9
 8002cc6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002cca:	3230      	adds	r2, #48	; 0x30
 8002ccc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002cd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	f806 2b01 	strb.w	r2, [r6], #1
 8002cdc:	d43b      	bmi.n	8002d56 <_dtoa_r+0x566>
 8002cde:	ee32 5b46 	vsub.f64	d5, d2, d6
 8002ce2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	d472      	bmi.n	8002dd2 <_dtoa_r+0x5e2>
 8002cec:	9a04      	ldr	r2, [sp, #16]
 8002cee:	1ab2      	subs	r2, r6, r2
 8002cf0:	4295      	cmp	r5, r2
 8002cf2:	f77f af68 	ble.w	8002bc6 <_dtoa_r+0x3d6>
 8002cf6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8002cfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002cfe:	e7de      	b.n	8002cbe <_dtoa_r+0x4ce>
 8002d00:	9a04      	ldr	r2, [sp, #16]
 8002d02:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002d06:	1956      	adds	r6, r2, r5
 8002d08:	4611      	mov	r1, r2
 8002d0a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002d0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002d12:	ee14 2a90 	vmov	r2, s9
 8002d16:	3230      	adds	r2, #48	; 0x30
 8002d18:	f801 2b01 	strb.w	r2, [r1], #1
 8002d1c:	42b1      	cmp	r1, r6
 8002d1e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002d22:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002d26:	d11a      	bne.n	8002d5e <_dtoa_r+0x56e>
 8002d28:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002d2c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8002d30:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	dc4b      	bgt.n	8002dd2 <_dtoa_r+0x5e2>
 8002d3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	f57f af3e 	bpl.w	8002bc6 <_dtoa_r+0x3d6>
 8002d4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002d4e:	2a30      	cmp	r2, #48	; 0x30
 8002d50:	f106 31ff 	add.w	r1, r6, #4294967295
 8002d54:	d001      	beq.n	8002d5a <_dtoa_r+0x56a>
 8002d56:	469b      	mov	fp, r3
 8002d58:	e02a      	b.n	8002db0 <_dtoa_r+0x5c0>
 8002d5a:	460e      	mov	r6, r1
 8002d5c:	e7f5      	b.n	8002d4a <_dtoa_r+0x55a>
 8002d5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002d62:	e7d4      	b.n	8002d0e <_dtoa_r+0x51e>
 8002d64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002d68:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8002d6c:	9e04      	ldr	r6, [sp, #16]
 8002d6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002d72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8002d76:	ee15 3a10 	vmov	r3, s10
 8002d7a:	3330      	adds	r3, #48	; 0x30
 8002d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8002d80:	9b04      	ldr	r3, [sp, #16]
 8002d82:	1af3      	subs	r3, r6, r3
 8002d84:	4599      	cmp	r9, r3
 8002d86:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8002d8a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8002d8e:	d133      	bne.n	8002df8 <_dtoa_r+0x608>
 8002d90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	dc18      	bgt.n	8002dd0 <_dtoa_r+0x5e0>
 8002d9e:	eeb4 7b46 	vcmp.f64	d7, d6
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d103      	bne.n	8002db0 <_dtoa_r+0x5c0>
 8002da8:	ee15 3a10 	vmov	r3, s10
 8002dac:	07db      	lsls	r3, r3, #31
 8002dae:	d40f      	bmi.n	8002dd0 <_dtoa_r+0x5e0>
 8002db0:	9901      	ldr	r1, [sp, #4]
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 fb87 	bl	80034c6 <_Bfree>
 8002db8:	2300      	movs	r3, #0
 8002dba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002dbc:	7033      	strb	r3, [r6, #0]
 8002dbe:	f10b 0301 	add.w	r3, fp, #1
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f43f ad5b 	beq.w	8002882 <_dtoa_r+0x92>
 8002dcc:	601e      	str	r6, [r3, #0]
 8002dce:	e558      	b.n	8002882 <_dtoa_r+0x92>
 8002dd0:	465b      	mov	r3, fp
 8002dd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002dd6:	2939      	cmp	r1, #57	; 0x39
 8002dd8:	f106 32ff 	add.w	r2, r6, #4294967295
 8002ddc:	d106      	bne.n	8002dec <_dtoa_r+0x5fc>
 8002dde:	9904      	ldr	r1, [sp, #16]
 8002de0:	4291      	cmp	r1, r2
 8002de2:	d107      	bne.n	8002df4 <_dtoa_r+0x604>
 8002de4:	2230      	movs	r2, #48	; 0x30
 8002de6:	700a      	strb	r2, [r1, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	460a      	mov	r2, r1
 8002dec:	7811      	ldrb	r1, [r2, #0]
 8002dee:	3101      	adds	r1, #1
 8002df0:	7011      	strb	r1, [r2, #0]
 8002df2:	e7b0      	b.n	8002d56 <_dtoa_r+0x566>
 8002df4:	4616      	mov	r6, r2
 8002df6:	e7ec      	b.n	8002dd2 <_dtoa_r+0x5e2>
 8002df8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002dfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	d1b3      	bne.n	8002d6e <_dtoa_r+0x57e>
 8002e06:	e7d3      	b.n	8002db0 <_dtoa_r+0x5c0>
 8002e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e0a:	2a00      	cmp	r2, #0
 8002e0c:	f000 808d 	beq.w	8002f2a <_dtoa_r+0x73a>
 8002e10:	9a08      	ldr	r2, [sp, #32]
 8002e12:	2a01      	cmp	r2, #1
 8002e14:	dc72      	bgt.n	8002efc <_dtoa_r+0x70c>
 8002e16:	2f00      	cmp	r7, #0
 8002e18:	d06c      	beq.n	8002ef4 <_dtoa_r+0x704>
 8002e1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002e1e:	4645      	mov	r5, r8
 8002e20:	4656      	mov	r6, sl
 8002e22:	9a07      	ldr	r2, [sp, #28]
 8002e24:	2101      	movs	r1, #1
 8002e26:	441a      	add	r2, r3
 8002e28:	4620      	mov	r0, r4
 8002e2a:	449a      	add	sl, r3
 8002e2c:	9207      	str	r2, [sp, #28]
 8002e2e:	f000 fbea 	bl	8003606 <__i2b>
 8002e32:	4607      	mov	r7, r0
 8002e34:	2e00      	cmp	r6, #0
 8002e36:	dd0b      	ble.n	8002e50 <_dtoa_r+0x660>
 8002e38:	9b07      	ldr	r3, [sp, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	dd08      	ble.n	8002e50 <_dtoa_r+0x660>
 8002e3e:	42b3      	cmp	r3, r6
 8002e40:	9a07      	ldr	r2, [sp, #28]
 8002e42:	bfa8      	it	ge
 8002e44:	4633      	movge	r3, r6
 8002e46:	ebaa 0a03 	sub.w	sl, sl, r3
 8002e4a:	1af6      	subs	r6, r6, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	9307      	str	r3, [sp, #28]
 8002e50:	f1b8 0f00 	cmp.w	r8, #0
 8002e54:	d01d      	beq.n	8002e92 <_dtoa_r+0x6a2>
 8002e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d06a      	beq.n	8002f32 <_dtoa_r+0x742>
 8002e5c:	b18d      	cbz	r5, 8002e82 <_dtoa_r+0x692>
 8002e5e:	4639      	mov	r1, r7
 8002e60:	462a      	mov	r2, r5
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 fc6e 	bl	8003744 <__pow5mult>
 8002e68:	9a01      	ldr	r2, [sp, #4]
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f000 fbd2 	bl	8003618 <__multiply>
 8002e74:	9901      	ldr	r1, [sp, #4]
 8002e76:	900c      	str	r0, [sp, #48]	; 0x30
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 fb24 	bl	80034c6 <_Bfree>
 8002e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	ebb8 0205 	subs.w	r2, r8, r5
 8002e86:	d004      	beq.n	8002e92 <_dtoa_r+0x6a2>
 8002e88:	9901      	ldr	r1, [sp, #4]
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 fc5a 	bl	8003744 <__pow5mult>
 8002e90:	9001      	str	r0, [sp, #4]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4620      	mov	r0, r4
 8002e96:	f000 fbb6 	bl	8003606 <__i2b>
 8002e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e9c:	4605      	mov	r5, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 81ca 	beq.w	8003238 <_dtoa_r+0xa48>
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f000 fc4b 	bl	8003744 <__pow5mult>
 8002eae:	9b08      	ldr	r3, [sp, #32]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	4605      	mov	r5, r0
 8002eb4:	dc44      	bgt.n	8002f40 <_dtoa_r+0x750>
 8002eb6:	9b02      	ldr	r3, [sp, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d13c      	bne.n	8002f36 <_dtoa_r+0x746>
 8002ebc:	9b03      	ldr	r3, [sp, #12]
 8002ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d137      	bne.n	8002f36 <_dtoa_r+0x746>
 8002ec6:	9b03      	ldr	r3, [sp, #12]
 8002ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ecc:	0d1b      	lsrs	r3, r3, #20
 8002ece:	051b      	lsls	r3, r3, #20
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d033      	beq.n	8002f3c <_dtoa_r+0x74c>
 8002ed4:	9b07      	ldr	r3, [sp, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f10a 0a01 	add.w	sl, sl, #1
 8002edc:	9307      	str	r3, [sp, #28]
 8002ede:	f04f 0801 	mov.w	r8, #1
 8002ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ee4:	bb73      	cbnz	r3, 8002f44 <_dtoa_r+0x754>
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	e034      	b.n	8002f54 <_dtoa_r+0x764>
 8002eea:	bf00      	nop
 8002eec:	080044c8 	.word	0x080044c8
 8002ef0:	080044a0 	.word	0x080044a0
 8002ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002efa:	e790      	b.n	8002e1e <_dtoa_r+0x62e>
 8002efc:	f109 35ff 	add.w	r5, r9, #4294967295
 8002f00:	45a8      	cmp	r8, r5
 8002f02:	bfbf      	itttt	lt
 8002f04:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8002f06:	eba5 0808 	sublt.w	r8, r5, r8
 8002f0a:	4443      	addlt	r3, r8
 8002f0c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002f0e:	bfb6      	itet	lt
 8002f10:	46a8      	movlt	r8, r5
 8002f12:	eba8 0505 	subge.w	r5, r8, r5
 8002f16:	2500      	movlt	r5, #0
 8002f18:	f1b9 0f00 	cmp.w	r9, #0
 8002f1c:	bfb9      	ittee	lt
 8002f1e:	ebaa 0609 	sublt.w	r6, sl, r9
 8002f22:	2300      	movlt	r3, #0
 8002f24:	4656      	movge	r6, sl
 8002f26:	464b      	movge	r3, r9
 8002f28:	e77b      	b.n	8002e22 <_dtoa_r+0x632>
 8002f2a:	4645      	mov	r5, r8
 8002f2c:	4656      	mov	r6, sl
 8002f2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002f30:	e780      	b.n	8002e34 <_dtoa_r+0x644>
 8002f32:	4642      	mov	r2, r8
 8002f34:	e7a8      	b.n	8002e88 <_dtoa_r+0x698>
 8002f36:	f04f 0800 	mov.w	r8, #0
 8002f3a:	e7d2      	b.n	8002ee2 <_dtoa_r+0x6f2>
 8002f3c:	4698      	mov	r8, r3
 8002f3e:	e7d0      	b.n	8002ee2 <_dtoa_r+0x6f2>
 8002f40:	f04f 0800 	mov.w	r8, #0
 8002f44:	692b      	ldr	r3, [r5, #16]
 8002f46:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002f4a:	6918      	ldr	r0, [r3, #16]
 8002f4c:	f000 fb0d 	bl	800356a <__hi0bits>
 8002f50:	f1c0 0020 	rsb	r0, r0, #32
 8002f54:	9b07      	ldr	r3, [sp, #28]
 8002f56:	4418      	add	r0, r3
 8002f58:	f010 001f 	ands.w	r0, r0, #31
 8002f5c:	d047      	beq.n	8002fee <_dtoa_r+0x7fe>
 8002f5e:	f1c0 0320 	rsb	r3, r0, #32
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	dd3b      	ble.n	8002fde <_dtoa_r+0x7ee>
 8002f66:	9b07      	ldr	r3, [sp, #28]
 8002f68:	f1c0 001c 	rsb	r0, r0, #28
 8002f6c:	4482      	add	sl, r0
 8002f6e:	4406      	add	r6, r0
 8002f70:	4403      	add	r3, r0
 8002f72:	9307      	str	r3, [sp, #28]
 8002f74:	f1ba 0f00 	cmp.w	sl, #0
 8002f78:	dd05      	ble.n	8002f86 <_dtoa_r+0x796>
 8002f7a:	4652      	mov	r2, sl
 8002f7c:	9901      	ldr	r1, [sp, #4]
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f000 fc2e 	bl	80037e0 <__lshift>
 8002f84:	9001      	str	r0, [sp, #4]
 8002f86:	9b07      	ldr	r3, [sp, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dd05      	ble.n	8002f98 <_dtoa_r+0x7a8>
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 fc25 	bl	80037e0 <__lshift>
 8002f96:	4605      	mov	r5, r0
 8002f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f9a:	b353      	cbz	r3, 8002ff2 <_dtoa_r+0x802>
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	9801      	ldr	r0, [sp, #4]
 8002fa0:	f000 fc72 	bl	8003888 <__mcmp>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	da24      	bge.n	8002ff2 <_dtoa_r+0x802>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	220a      	movs	r2, #10
 8002fac:	9901      	ldr	r1, [sp, #4]
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f000 faa0 	bl	80034f4 <__multadd>
 8002fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb6:	9001      	str	r0, [sp, #4]
 8002fb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8142 	beq.w	8003246 <_dtoa_r+0xa56>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4639      	mov	r1, r7
 8002fc6:	220a      	movs	r2, #10
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f000 fa93 	bl	80034f4 <__multadd>
 8002fce:	9b06      	ldr	r3, [sp, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	4607      	mov	r7, r0
 8002fd4:	dc4b      	bgt.n	800306e <_dtoa_r+0x87e>
 8002fd6:	9b08      	ldr	r3, [sp, #32]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	dd48      	ble.n	800306e <_dtoa_r+0x87e>
 8002fdc:	e011      	b.n	8003002 <_dtoa_r+0x812>
 8002fde:	d0c9      	beq.n	8002f74 <_dtoa_r+0x784>
 8002fe0:	9a07      	ldr	r2, [sp, #28]
 8002fe2:	331c      	adds	r3, #28
 8002fe4:	441a      	add	r2, r3
 8002fe6:	449a      	add	sl, r3
 8002fe8:	441e      	add	r6, r3
 8002fea:	4613      	mov	r3, r2
 8002fec:	e7c1      	b.n	8002f72 <_dtoa_r+0x782>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	e7f6      	b.n	8002fe0 <_dtoa_r+0x7f0>
 8002ff2:	f1b9 0f00 	cmp.w	r9, #0
 8002ff6:	dc34      	bgt.n	8003062 <_dtoa_r+0x872>
 8002ff8:	9b08      	ldr	r3, [sp, #32]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	dd31      	ble.n	8003062 <_dtoa_r+0x872>
 8002ffe:	f8cd 9018 	str.w	r9, [sp, #24]
 8003002:	9b06      	ldr	r3, [sp, #24]
 8003004:	b963      	cbnz	r3, 8003020 <_dtoa_r+0x830>
 8003006:	4629      	mov	r1, r5
 8003008:	2205      	movs	r2, #5
 800300a:	4620      	mov	r0, r4
 800300c:	f000 fa72 	bl	80034f4 <__multadd>
 8003010:	4601      	mov	r1, r0
 8003012:	4605      	mov	r5, r0
 8003014:	9801      	ldr	r0, [sp, #4]
 8003016:	f000 fc37 	bl	8003888 <__mcmp>
 800301a:	2800      	cmp	r0, #0
 800301c:	f73f adfc 	bgt.w	8002c18 <_dtoa_r+0x428>
 8003020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003022:	9e04      	ldr	r6, [sp, #16]
 8003024:	ea6f 0b03 	mvn.w	fp, r3
 8003028:	f04f 0900 	mov.w	r9, #0
 800302c:	4629      	mov	r1, r5
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fa49 	bl	80034c6 <_Bfree>
 8003034:	2f00      	cmp	r7, #0
 8003036:	f43f aebb 	beq.w	8002db0 <_dtoa_r+0x5c0>
 800303a:	f1b9 0f00 	cmp.w	r9, #0
 800303e:	d005      	beq.n	800304c <_dtoa_r+0x85c>
 8003040:	45b9      	cmp	r9, r7
 8003042:	d003      	beq.n	800304c <_dtoa_r+0x85c>
 8003044:	4649      	mov	r1, r9
 8003046:	4620      	mov	r0, r4
 8003048:	f000 fa3d 	bl	80034c6 <_Bfree>
 800304c:	4639      	mov	r1, r7
 800304e:	4620      	mov	r0, r4
 8003050:	f000 fa39 	bl	80034c6 <_Bfree>
 8003054:	e6ac      	b.n	8002db0 <_dtoa_r+0x5c0>
 8003056:	2500      	movs	r5, #0
 8003058:	462f      	mov	r7, r5
 800305a:	e7e1      	b.n	8003020 <_dtoa_r+0x830>
 800305c:	469b      	mov	fp, r3
 800305e:	462f      	mov	r7, r5
 8003060:	e5da      	b.n	8002c18 <_dtoa_r+0x428>
 8003062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003064:	f8cd 9018 	str.w	r9, [sp, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80f3 	beq.w	8003254 <_dtoa_r+0xa64>
 800306e:	2e00      	cmp	r6, #0
 8003070:	dd05      	ble.n	800307e <_dtoa_r+0x88e>
 8003072:	4639      	mov	r1, r7
 8003074:	4632      	mov	r2, r6
 8003076:	4620      	mov	r0, r4
 8003078:	f000 fbb2 	bl	80037e0 <__lshift>
 800307c:	4607      	mov	r7, r0
 800307e:	f1b8 0f00 	cmp.w	r8, #0
 8003082:	d04c      	beq.n	800311e <_dtoa_r+0x92e>
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4620      	mov	r0, r4
 8003088:	f000 f9e9 	bl	800345e <_Balloc>
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	3202      	adds	r2, #2
 8003090:	4606      	mov	r6, r0
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	f107 010c 	add.w	r1, r7, #12
 8003098:	300c      	adds	r0, #12
 800309a:	f000 f9d5 	bl	8003448 <memcpy>
 800309e:	2201      	movs	r2, #1
 80030a0:	4631      	mov	r1, r6
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 fb9c 	bl	80037e0 <__lshift>
 80030a8:	9b02      	ldr	r3, [sp, #8]
 80030aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	46b9      	mov	r9, r7
 80030b4:	9307      	str	r3, [sp, #28]
 80030b6:	4607      	mov	r7, r0
 80030b8:	4629      	mov	r1, r5
 80030ba:	9801      	ldr	r0, [sp, #4]
 80030bc:	f7ff fb0c 	bl	80026d8 <quorem>
 80030c0:	4649      	mov	r1, r9
 80030c2:	4606      	mov	r6, r0
 80030c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80030c8:	9801      	ldr	r0, [sp, #4]
 80030ca:	f000 fbdd 	bl	8003888 <__mcmp>
 80030ce:	463a      	mov	r2, r7
 80030d0:	9002      	str	r0, [sp, #8]
 80030d2:	4629      	mov	r1, r5
 80030d4:	4620      	mov	r0, r4
 80030d6:	f000 fbf1 	bl	80038bc <__mdiff>
 80030da:	68c3      	ldr	r3, [r0, #12]
 80030dc:	4602      	mov	r2, r0
 80030de:	bb03      	cbnz	r3, 8003122 <_dtoa_r+0x932>
 80030e0:	4601      	mov	r1, r0
 80030e2:	9009      	str	r0, [sp, #36]	; 0x24
 80030e4:	9801      	ldr	r0, [sp, #4]
 80030e6:	f000 fbcf 	bl	8003888 <__mcmp>
 80030ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030ec:	4603      	mov	r3, r0
 80030ee:	4611      	mov	r1, r2
 80030f0:	4620      	mov	r0, r4
 80030f2:	9309      	str	r3, [sp, #36]	; 0x24
 80030f4:	f000 f9e7 	bl	80034c6 <_Bfree>
 80030f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fa:	b9a3      	cbnz	r3, 8003126 <_dtoa_r+0x936>
 80030fc:	9a08      	ldr	r2, [sp, #32]
 80030fe:	b992      	cbnz	r2, 8003126 <_dtoa_r+0x936>
 8003100:	9a07      	ldr	r2, [sp, #28]
 8003102:	b982      	cbnz	r2, 8003126 <_dtoa_r+0x936>
 8003104:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003108:	d029      	beq.n	800315e <_dtoa_r+0x96e>
 800310a:	9b02      	ldr	r3, [sp, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	dd01      	ble.n	8003114 <_dtoa_r+0x924>
 8003110:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8003114:	f10a 0601 	add.w	r6, sl, #1
 8003118:	f88a 8000 	strb.w	r8, [sl]
 800311c:	e786      	b.n	800302c <_dtoa_r+0x83c>
 800311e:	4638      	mov	r0, r7
 8003120:	e7c2      	b.n	80030a8 <_dtoa_r+0x8b8>
 8003122:	2301      	movs	r3, #1
 8003124:	e7e3      	b.n	80030ee <_dtoa_r+0x8fe>
 8003126:	9a02      	ldr	r2, [sp, #8]
 8003128:	2a00      	cmp	r2, #0
 800312a:	db04      	blt.n	8003136 <_dtoa_r+0x946>
 800312c:	d124      	bne.n	8003178 <_dtoa_r+0x988>
 800312e:	9a08      	ldr	r2, [sp, #32]
 8003130:	bb12      	cbnz	r2, 8003178 <_dtoa_r+0x988>
 8003132:	9a07      	ldr	r2, [sp, #28]
 8003134:	bb02      	cbnz	r2, 8003178 <_dtoa_r+0x988>
 8003136:	2b00      	cmp	r3, #0
 8003138:	ddec      	ble.n	8003114 <_dtoa_r+0x924>
 800313a:	2201      	movs	r2, #1
 800313c:	9901      	ldr	r1, [sp, #4]
 800313e:	4620      	mov	r0, r4
 8003140:	f000 fb4e 	bl	80037e0 <__lshift>
 8003144:	4629      	mov	r1, r5
 8003146:	9001      	str	r0, [sp, #4]
 8003148:	f000 fb9e 	bl	8003888 <__mcmp>
 800314c:	2800      	cmp	r0, #0
 800314e:	dc03      	bgt.n	8003158 <_dtoa_r+0x968>
 8003150:	d1e0      	bne.n	8003114 <_dtoa_r+0x924>
 8003152:	f018 0f01 	tst.w	r8, #1
 8003156:	d0dd      	beq.n	8003114 <_dtoa_r+0x924>
 8003158:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800315c:	d1d8      	bne.n	8003110 <_dtoa_r+0x920>
 800315e:	2339      	movs	r3, #57	; 0x39
 8003160:	f10a 0601 	add.w	r6, sl, #1
 8003164:	f88a 3000 	strb.w	r3, [sl]
 8003168:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800316c:	2b39      	cmp	r3, #57	; 0x39
 800316e:	f106 32ff 	add.w	r2, r6, #4294967295
 8003172:	d04c      	beq.n	800320e <_dtoa_r+0xa1e>
 8003174:	3301      	adds	r3, #1
 8003176:	e051      	b.n	800321c <_dtoa_r+0xa2c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	f10a 0601 	add.w	r6, sl, #1
 800317e:	dd05      	ble.n	800318c <_dtoa_r+0x99c>
 8003180:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003184:	d0eb      	beq.n	800315e <_dtoa_r+0x96e>
 8003186:	f108 0801 	add.w	r8, r8, #1
 800318a:	e7c5      	b.n	8003118 <_dtoa_r+0x928>
 800318c:	9b04      	ldr	r3, [sp, #16]
 800318e:	9a06      	ldr	r2, [sp, #24]
 8003190:	f806 8c01 	strb.w	r8, [r6, #-1]
 8003194:	1af3      	subs	r3, r6, r3
 8003196:	4293      	cmp	r3, r2
 8003198:	d021      	beq.n	80031de <_dtoa_r+0x9ee>
 800319a:	2300      	movs	r3, #0
 800319c:	220a      	movs	r2, #10
 800319e:	9901      	ldr	r1, [sp, #4]
 80031a0:	4620      	mov	r0, r4
 80031a2:	f000 f9a7 	bl	80034f4 <__multadd>
 80031a6:	45b9      	cmp	r9, r7
 80031a8:	9001      	str	r0, [sp, #4]
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	f04f 020a 	mov.w	r2, #10
 80031b2:	4649      	mov	r1, r9
 80031b4:	4620      	mov	r0, r4
 80031b6:	d105      	bne.n	80031c4 <_dtoa_r+0x9d4>
 80031b8:	f000 f99c 	bl	80034f4 <__multadd>
 80031bc:	4681      	mov	r9, r0
 80031be:	4607      	mov	r7, r0
 80031c0:	46b2      	mov	sl, r6
 80031c2:	e779      	b.n	80030b8 <_dtoa_r+0x8c8>
 80031c4:	f000 f996 	bl	80034f4 <__multadd>
 80031c8:	4639      	mov	r1, r7
 80031ca:	4681      	mov	r9, r0
 80031cc:	2300      	movs	r3, #0
 80031ce:	220a      	movs	r2, #10
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 f98f 	bl	80034f4 <__multadd>
 80031d6:	4607      	mov	r7, r0
 80031d8:	e7f2      	b.n	80031c0 <_dtoa_r+0x9d0>
 80031da:	f04f 0900 	mov.w	r9, #0
 80031de:	2201      	movs	r2, #1
 80031e0:	9901      	ldr	r1, [sp, #4]
 80031e2:	4620      	mov	r0, r4
 80031e4:	f000 fafc 	bl	80037e0 <__lshift>
 80031e8:	4629      	mov	r1, r5
 80031ea:	9001      	str	r0, [sp, #4]
 80031ec:	f000 fb4c 	bl	8003888 <__mcmp>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	dcb9      	bgt.n	8003168 <_dtoa_r+0x978>
 80031f4:	d102      	bne.n	80031fc <_dtoa_r+0xa0c>
 80031f6:	f018 0f01 	tst.w	r8, #1
 80031fa:	d1b5      	bne.n	8003168 <_dtoa_r+0x978>
 80031fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	f106 32ff 	add.w	r2, r6, #4294967295
 8003206:	f47f af11 	bne.w	800302c <_dtoa_r+0x83c>
 800320a:	4616      	mov	r6, r2
 800320c:	e7f6      	b.n	80031fc <_dtoa_r+0xa0c>
 800320e:	9b04      	ldr	r3, [sp, #16]
 8003210:	4293      	cmp	r3, r2
 8003212:	d105      	bne.n	8003220 <_dtoa_r+0xa30>
 8003214:	9a04      	ldr	r2, [sp, #16]
 8003216:	f10b 0b01 	add.w	fp, fp, #1
 800321a:	2331      	movs	r3, #49	; 0x31
 800321c:	7013      	strb	r3, [r2, #0]
 800321e:	e705      	b.n	800302c <_dtoa_r+0x83c>
 8003220:	4616      	mov	r6, r2
 8003222:	e7a1      	b.n	8003168 <_dtoa_r+0x978>
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <_dtoa_r+0xa90>)
 8003226:	f7ff bb48 	b.w	80028ba <_dtoa_r+0xca>
 800322a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f ab23 	bne.w	8002878 <_dtoa_r+0x88>
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <_dtoa_r+0xa94>)
 8003234:	f7ff bb41 	b.w	80028ba <_dtoa_r+0xca>
 8003238:	9b08      	ldr	r3, [sp, #32]
 800323a:	2b01      	cmp	r3, #1
 800323c:	f77f ae3b 	ble.w	8002eb6 <_dtoa_r+0x6c6>
 8003240:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003244:	e64f      	b.n	8002ee6 <_dtoa_r+0x6f6>
 8003246:	9b06      	ldr	r3, [sp, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	dc03      	bgt.n	8003254 <_dtoa_r+0xa64>
 800324c:	9b08      	ldr	r3, [sp, #32]
 800324e:	2b02      	cmp	r3, #2
 8003250:	f73f aed7 	bgt.w	8003002 <_dtoa_r+0x812>
 8003254:	9e04      	ldr	r6, [sp, #16]
 8003256:	9801      	ldr	r0, [sp, #4]
 8003258:	4629      	mov	r1, r5
 800325a:	f7ff fa3d 	bl	80026d8 <quorem>
 800325e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003262:	f806 8b01 	strb.w	r8, [r6], #1
 8003266:	9b04      	ldr	r3, [sp, #16]
 8003268:	9a06      	ldr	r2, [sp, #24]
 800326a:	1af3      	subs	r3, r6, r3
 800326c:	429a      	cmp	r2, r3
 800326e:	ddb4      	ble.n	80031da <_dtoa_r+0x9ea>
 8003270:	2300      	movs	r3, #0
 8003272:	220a      	movs	r2, #10
 8003274:	9901      	ldr	r1, [sp, #4]
 8003276:	4620      	mov	r0, r4
 8003278:	f000 f93c 	bl	80034f4 <__multadd>
 800327c:	9001      	str	r0, [sp, #4]
 800327e:	e7ea      	b.n	8003256 <_dtoa_r+0xa66>
 8003280:	0800440c 	.word	0x0800440c
 8003284:	08004430 	.word	0x08004430

08003288 <std>:
 8003288:	2300      	movs	r3, #0
 800328a:	b510      	push	{r4, lr}
 800328c:	4604      	mov	r4, r0
 800328e:	e9c0 3300 	strd	r3, r3, [r0]
 8003292:	6083      	str	r3, [r0, #8]
 8003294:	8181      	strh	r1, [r0, #12]
 8003296:	6643      	str	r3, [r0, #100]	; 0x64
 8003298:	81c2      	strh	r2, [r0, #14]
 800329a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800329e:	6183      	str	r3, [r0, #24]
 80032a0:	4619      	mov	r1, r3
 80032a2:	2208      	movs	r2, #8
 80032a4:	305c      	adds	r0, #92	; 0x5c
 80032a6:	f7fe fdbd 	bl	8001e24 <memset>
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <std+0x38>)
 80032ac:	6263      	str	r3, [r4, #36]	; 0x24
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <std+0x3c>)
 80032b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <std+0x40>)
 80032b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <std+0x44>)
 80032b8:	6224      	str	r4, [r4, #32]
 80032ba:	6323      	str	r3, [r4, #48]	; 0x30
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	bf00      	nop
 80032c0:	08003e21 	.word	0x08003e21
 80032c4:	08003e43 	.word	0x08003e43
 80032c8:	08003e7b 	.word	0x08003e7b
 80032cc:	08003e9f 	.word	0x08003e9f

080032d0 <_cleanup_r>:
 80032d0:	4901      	ldr	r1, [pc, #4]	; (80032d8 <_cleanup_r+0x8>)
 80032d2:	f000 b885 	b.w	80033e0 <_fwalk_reent>
 80032d6:	bf00      	nop
 80032d8:	08004179 	.word	0x08004179

080032dc <__sfmoreglue>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	1e4a      	subs	r2, r1, #1
 80032e0:	2568      	movs	r5, #104	; 0x68
 80032e2:	4355      	muls	r5, r2
 80032e4:	460e      	mov	r6, r1
 80032e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ea:	f000 fbef 	bl	8003acc <_malloc_r>
 80032ee:	4604      	mov	r4, r0
 80032f0:	b140      	cbz	r0, 8003304 <__sfmoreglue+0x28>
 80032f2:	2100      	movs	r1, #0
 80032f4:	e9c0 1600 	strd	r1, r6, [r0]
 80032f8:	300c      	adds	r0, #12
 80032fa:	60a0      	str	r0, [r4, #8]
 80032fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003300:	f7fe fd90 	bl	8001e24 <memset>
 8003304:	4620      	mov	r0, r4
 8003306:	bd70      	pop	{r4, r5, r6, pc}

08003308 <__sinit>:
 8003308:	6983      	ldr	r3, [r0, #24]
 800330a:	b510      	push	{r4, lr}
 800330c:	4604      	mov	r4, r0
 800330e:	bb33      	cbnz	r3, 800335e <__sinit+0x56>
 8003310:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003314:	6503      	str	r3, [r0, #80]	; 0x50
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <__sinit+0x58>)
 8003318:	4a12      	ldr	r2, [pc, #72]	; (8003364 <__sinit+0x5c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6282      	str	r2, [r0, #40]	; 0x28
 800331e:	4298      	cmp	r0, r3
 8003320:	bf04      	itt	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	6183      	streq	r3, [r0, #24]
 8003326:	f000 f81f 	bl	8003368 <__sfp>
 800332a:	6060      	str	r0, [r4, #4]
 800332c:	4620      	mov	r0, r4
 800332e:	f000 f81b 	bl	8003368 <__sfp>
 8003332:	60a0      	str	r0, [r4, #8]
 8003334:	4620      	mov	r0, r4
 8003336:	f000 f817 	bl	8003368 <__sfp>
 800333a:	2200      	movs	r2, #0
 800333c:	60e0      	str	r0, [r4, #12]
 800333e:	2104      	movs	r1, #4
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	f7ff ffa1 	bl	8003288 <std>
 8003346:	2201      	movs	r2, #1
 8003348:	2109      	movs	r1, #9
 800334a:	68a0      	ldr	r0, [r4, #8]
 800334c:	f7ff ff9c 	bl	8003288 <std>
 8003350:	2202      	movs	r2, #2
 8003352:	2112      	movs	r1, #18
 8003354:	68e0      	ldr	r0, [r4, #12]
 8003356:	f7ff ff97 	bl	8003288 <std>
 800335a:	2301      	movs	r3, #1
 800335c:	61a3      	str	r3, [r4, #24]
 800335e:	bd10      	pop	{r4, pc}
 8003360:	080043f8 	.word	0x080043f8
 8003364:	080032d1 	.word	0x080032d1

08003368 <__sfp>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <__sfp+0x70>)
 800336c:	681e      	ldr	r6, [r3, #0]
 800336e:	69b3      	ldr	r3, [r6, #24]
 8003370:	4607      	mov	r7, r0
 8003372:	b913      	cbnz	r3, 800337a <__sfp+0x12>
 8003374:	4630      	mov	r0, r6
 8003376:	f7ff ffc7 	bl	8003308 <__sinit>
 800337a:	3648      	adds	r6, #72	; 0x48
 800337c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003380:	3b01      	subs	r3, #1
 8003382:	d503      	bpl.n	800338c <__sfp+0x24>
 8003384:	6833      	ldr	r3, [r6, #0]
 8003386:	b133      	cbz	r3, 8003396 <__sfp+0x2e>
 8003388:	6836      	ldr	r6, [r6, #0]
 800338a:	e7f7      	b.n	800337c <__sfp+0x14>
 800338c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003390:	b16d      	cbz	r5, 80033ae <__sfp+0x46>
 8003392:	3468      	adds	r4, #104	; 0x68
 8003394:	e7f4      	b.n	8003380 <__sfp+0x18>
 8003396:	2104      	movs	r1, #4
 8003398:	4638      	mov	r0, r7
 800339a:	f7ff ff9f 	bl	80032dc <__sfmoreglue>
 800339e:	6030      	str	r0, [r6, #0]
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1f1      	bne.n	8003388 <__sfp+0x20>
 80033a4:	230c      	movs	r3, #12
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4604      	mov	r4, r0
 80033aa:	4620      	mov	r0, r4
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <__sfp+0x74>)
 80033b0:	6665      	str	r5, [r4, #100]	; 0x64
 80033b2:	e9c4 5500 	strd	r5, r5, [r4]
 80033b6:	60a5      	str	r5, [r4, #8]
 80033b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80033bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80033c0:	2208      	movs	r2, #8
 80033c2:	4629      	mov	r1, r5
 80033c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033c8:	f7fe fd2c 	bl	8001e24 <memset>
 80033cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033d4:	e7e9      	b.n	80033aa <__sfp+0x42>
 80033d6:	bf00      	nop
 80033d8:	080043f8 	.word	0x080043f8
 80033dc:	ffff0001 	.word	0xffff0001

080033e0 <_fwalk_reent>:
 80033e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e4:	4680      	mov	r8, r0
 80033e6:	4689      	mov	r9, r1
 80033e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033ec:	2600      	movs	r6, #0
 80033ee:	b914      	cbnz	r4, 80033f6 <_fwalk_reent+0x16>
 80033f0:	4630      	mov	r0, r6
 80033f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033fa:	3f01      	subs	r7, #1
 80033fc:	d501      	bpl.n	8003402 <_fwalk_reent+0x22>
 80033fe:	6824      	ldr	r4, [r4, #0]
 8003400:	e7f5      	b.n	80033ee <_fwalk_reent+0xe>
 8003402:	89ab      	ldrh	r3, [r5, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d907      	bls.n	8003418 <_fwalk_reent+0x38>
 8003408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800340c:	3301      	adds	r3, #1
 800340e:	d003      	beq.n	8003418 <_fwalk_reent+0x38>
 8003410:	4629      	mov	r1, r5
 8003412:	4640      	mov	r0, r8
 8003414:	47c8      	blx	r9
 8003416:	4306      	orrs	r6, r0
 8003418:	3568      	adds	r5, #104	; 0x68
 800341a:	e7ee      	b.n	80033fa <_fwalk_reent+0x1a>

0800341c <_localeconv_r>:
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <_localeconv_r+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6a18      	ldr	r0, [r3, #32]
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <_localeconv_r+0x18>)
 8003424:	2800      	cmp	r0, #0
 8003426:	bf08      	it	eq
 8003428:	4618      	moveq	r0, r3
 800342a:	30f0      	adds	r0, #240	; 0xf0
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	2000000c 	.word	0x2000000c
 8003434:	20000070 	.word	0x20000070

08003438 <malloc>:
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <malloc+0xc>)
 800343a:	4601      	mov	r1, r0
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	f000 bb45 	b.w	8003acc <_malloc_r>
 8003442:	bf00      	nop
 8003444:	2000000c 	.word	0x2000000c

08003448 <memcpy>:
 8003448:	b510      	push	{r4, lr}
 800344a:	1e43      	subs	r3, r0, #1
 800344c:	440a      	add	r2, r1
 800344e:	4291      	cmp	r1, r2
 8003450:	d100      	bne.n	8003454 <memcpy+0xc>
 8003452:	bd10      	pop	{r4, pc}
 8003454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800345c:	e7f7      	b.n	800344e <memcpy+0x6>

0800345e <_Balloc>:
 800345e:	b570      	push	{r4, r5, r6, lr}
 8003460:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003462:	4604      	mov	r4, r0
 8003464:	460e      	mov	r6, r1
 8003466:	b93d      	cbnz	r5, 8003478 <_Balloc+0x1a>
 8003468:	2010      	movs	r0, #16
 800346a:	f7ff ffe5 	bl	8003438 <malloc>
 800346e:	6260      	str	r0, [r4, #36]	; 0x24
 8003470:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003474:	6005      	str	r5, [r0, #0]
 8003476:	60c5      	str	r5, [r0, #12]
 8003478:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800347a:	68eb      	ldr	r3, [r5, #12]
 800347c:	b183      	cbz	r3, 80034a0 <_Balloc+0x42>
 800347e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003486:	b9b8      	cbnz	r0, 80034b8 <_Balloc+0x5a>
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f506 	lsl.w	r5, r1, r6
 800348e:	1d6a      	adds	r2, r5, #5
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	4620      	mov	r0, r4
 8003494:	f000 fabe 	bl	8003a14 <_calloc_r>
 8003498:	b160      	cbz	r0, 80034b4 <_Balloc+0x56>
 800349a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800349e:	e00e      	b.n	80034be <_Balloc+0x60>
 80034a0:	2221      	movs	r2, #33	; 0x21
 80034a2:	2104      	movs	r1, #4
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 fab5 	bl	8003a14 <_calloc_r>
 80034aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ac:	60e8      	str	r0, [r5, #12]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e4      	bne.n	800347e <_Balloc+0x20>
 80034b4:	2000      	movs	r0, #0
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	6802      	ldr	r2, [r0, #0]
 80034ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80034be:	2300      	movs	r3, #0
 80034c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80034c4:	e7f7      	b.n	80034b6 <_Balloc+0x58>

080034c6 <_Bfree>:
 80034c6:	b570      	push	{r4, r5, r6, lr}
 80034c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80034ca:	4606      	mov	r6, r0
 80034cc:	460d      	mov	r5, r1
 80034ce:	b93c      	cbnz	r4, 80034e0 <_Bfree+0x1a>
 80034d0:	2010      	movs	r0, #16
 80034d2:	f7ff ffb1 	bl	8003438 <malloc>
 80034d6:	6270      	str	r0, [r6, #36]	; 0x24
 80034d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80034dc:	6004      	str	r4, [r0, #0]
 80034de:	60c4      	str	r4, [r0, #12]
 80034e0:	b13d      	cbz	r5, 80034f2 <_Bfree+0x2c>
 80034e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80034e4:	686a      	ldr	r2, [r5, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034ec:	6029      	str	r1, [r5, #0]
 80034ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80034f2:	bd70      	pop	{r4, r5, r6, pc}

080034f4 <__multadd>:
 80034f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f8:	690d      	ldr	r5, [r1, #16]
 80034fa:	461f      	mov	r7, r3
 80034fc:	4606      	mov	r6, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	f101 0c14 	add.w	ip, r1, #20
 8003504:	2300      	movs	r3, #0
 8003506:	f8dc 0000 	ldr.w	r0, [ip]
 800350a:	b281      	uxth	r1, r0
 800350c:	fb02 7101 	mla	r1, r2, r1, r7
 8003510:	0c0f      	lsrs	r7, r1, #16
 8003512:	0c00      	lsrs	r0, r0, #16
 8003514:	fb02 7000 	mla	r0, r2, r0, r7
 8003518:	b289      	uxth	r1, r1
 800351a:	3301      	adds	r3, #1
 800351c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003520:	429d      	cmp	r5, r3
 8003522:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003526:	f84c 1b04 	str.w	r1, [ip], #4
 800352a:	dcec      	bgt.n	8003506 <__multadd+0x12>
 800352c:	b1d7      	cbz	r7, 8003564 <__multadd+0x70>
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	42ab      	cmp	r3, r5
 8003532:	dc12      	bgt.n	800355a <__multadd+0x66>
 8003534:	6861      	ldr	r1, [r4, #4]
 8003536:	4630      	mov	r0, r6
 8003538:	3101      	adds	r1, #1
 800353a:	f7ff ff90 	bl	800345e <_Balloc>
 800353e:	6922      	ldr	r2, [r4, #16]
 8003540:	3202      	adds	r2, #2
 8003542:	f104 010c 	add.w	r1, r4, #12
 8003546:	4680      	mov	r8, r0
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	300c      	adds	r0, #12
 800354c:	f7ff ff7c 	bl	8003448 <memcpy>
 8003550:	4621      	mov	r1, r4
 8003552:	4630      	mov	r0, r6
 8003554:	f7ff ffb7 	bl	80034c6 <_Bfree>
 8003558:	4644      	mov	r4, r8
 800355a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800355e:	3501      	adds	r5, #1
 8003560:	615f      	str	r7, [r3, #20]
 8003562:	6125      	str	r5, [r4, #16]
 8003564:	4620      	mov	r0, r4
 8003566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800356a <__hi0bits>:
 800356a:	0c02      	lsrs	r2, r0, #16
 800356c:	0412      	lsls	r2, r2, #16
 800356e:	4603      	mov	r3, r0
 8003570:	b9b2      	cbnz	r2, 80035a0 <__hi0bits+0x36>
 8003572:	0403      	lsls	r3, r0, #16
 8003574:	2010      	movs	r0, #16
 8003576:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800357a:	bf04      	itt	eq
 800357c:	021b      	lsleq	r3, r3, #8
 800357e:	3008      	addeq	r0, #8
 8003580:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003584:	bf04      	itt	eq
 8003586:	011b      	lsleq	r3, r3, #4
 8003588:	3004      	addeq	r0, #4
 800358a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800358e:	bf04      	itt	eq
 8003590:	009b      	lsleq	r3, r3, #2
 8003592:	3002      	addeq	r0, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	db06      	blt.n	80035a6 <__hi0bits+0x3c>
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	d503      	bpl.n	80035a4 <__hi0bits+0x3a>
 800359c:	3001      	adds	r0, #1
 800359e:	4770      	bx	lr
 80035a0:	2000      	movs	r0, #0
 80035a2:	e7e8      	b.n	8003576 <__hi0bits+0xc>
 80035a4:	2020      	movs	r0, #32
 80035a6:	4770      	bx	lr

080035a8 <__lo0bits>:
 80035a8:	6803      	ldr	r3, [r0, #0]
 80035aa:	f013 0207 	ands.w	r2, r3, #7
 80035ae:	4601      	mov	r1, r0
 80035b0:	d00b      	beq.n	80035ca <__lo0bits+0x22>
 80035b2:	07da      	lsls	r2, r3, #31
 80035b4:	d423      	bmi.n	80035fe <__lo0bits+0x56>
 80035b6:	0798      	lsls	r0, r3, #30
 80035b8:	bf49      	itett	mi
 80035ba:	085b      	lsrmi	r3, r3, #1
 80035bc:	089b      	lsrpl	r3, r3, #2
 80035be:	2001      	movmi	r0, #1
 80035c0:	600b      	strmi	r3, [r1, #0]
 80035c2:	bf5c      	itt	pl
 80035c4:	600b      	strpl	r3, [r1, #0]
 80035c6:	2002      	movpl	r0, #2
 80035c8:	4770      	bx	lr
 80035ca:	b298      	uxth	r0, r3
 80035cc:	b9a8      	cbnz	r0, 80035fa <__lo0bits+0x52>
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	2010      	movs	r0, #16
 80035d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80035d6:	bf04      	itt	eq
 80035d8:	0a1b      	lsreq	r3, r3, #8
 80035da:	3008      	addeq	r0, #8
 80035dc:	071a      	lsls	r2, r3, #28
 80035de:	bf04      	itt	eq
 80035e0:	091b      	lsreq	r3, r3, #4
 80035e2:	3004      	addeq	r0, #4
 80035e4:	079a      	lsls	r2, r3, #30
 80035e6:	bf04      	itt	eq
 80035e8:	089b      	lsreq	r3, r3, #2
 80035ea:	3002      	addeq	r0, #2
 80035ec:	07da      	lsls	r2, r3, #31
 80035ee:	d402      	bmi.n	80035f6 <__lo0bits+0x4e>
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	d006      	beq.n	8003602 <__lo0bits+0x5a>
 80035f4:	3001      	adds	r0, #1
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	4770      	bx	lr
 80035fa:	4610      	mov	r0, r2
 80035fc:	e7e9      	b.n	80035d2 <__lo0bits+0x2a>
 80035fe:	2000      	movs	r0, #0
 8003600:	4770      	bx	lr
 8003602:	2020      	movs	r0, #32
 8003604:	4770      	bx	lr

08003606 <__i2b>:
 8003606:	b510      	push	{r4, lr}
 8003608:	460c      	mov	r4, r1
 800360a:	2101      	movs	r1, #1
 800360c:	f7ff ff27 	bl	800345e <_Balloc>
 8003610:	2201      	movs	r2, #1
 8003612:	6144      	str	r4, [r0, #20]
 8003614:	6102      	str	r2, [r0, #16]
 8003616:	bd10      	pop	{r4, pc}

08003618 <__multiply>:
 8003618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	4614      	mov	r4, r2
 800361e:	690a      	ldr	r2, [r1, #16]
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	bfb8      	it	lt
 8003626:	460b      	movlt	r3, r1
 8003628:	4688      	mov	r8, r1
 800362a:	bfbc      	itt	lt
 800362c:	46a0      	movlt	r8, r4
 800362e:	461c      	movlt	r4, r3
 8003630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003638:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800363c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003640:	eb07 0609 	add.w	r6, r7, r9
 8003644:	42b3      	cmp	r3, r6
 8003646:	bfb8      	it	lt
 8003648:	3101      	addlt	r1, #1
 800364a:	f7ff ff08 	bl	800345e <_Balloc>
 800364e:	f100 0514 	add.w	r5, r0, #20
 8003652:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003656:	462b      	mov	r3, r5
 8003658:	2200      	movs	r2, #0
 800365a:	4573      	cmp	r3, lr
 800365c:	d316      	bcc.n	800368c <__multiply+0x74>
 800365e:	f104 0214 	add.w	r2, r4, #20
 8003662:	f108 0114 	add.w	r1, r8, #20
 8003666:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800366a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	9b00      	ldr	r3, [sp, #0]
 8003672:	9201      	str	r2, [sp, #4]
 8003674:	4293      	cmp	r3, r2
 8003676:	d80c      	bhi.n	8003692 <__multiply+0x7a>
 8003678:	2e00      	cmp	r6, #0
 800367a:	dd03      	ble.n	8003684 <__multiply+0x6c>
 800367c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003680:	2b00      	cmp	r3, #0
 8003682:	d05d      	beq.n	8003740 <__multiply+0x128>
 8003684:	6106      	str	r6, [r0, #16]
 8003686:	b003      	add	sp, #12
 8003688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368c:	f843 2b04 	str.w	r2, [r3], #4
 8003690:	e7e3      	b.n	800365a <__multiply+0x42>
 8003692:	f8b2 b000 	ldrh.w	fp, [r2]
 8003696:	f1bb 0f00 	cmp.w	fp, #0
 800369a:	d023      	beq.n	80036e4 <__multiply+0xcc>
 800369c:	4689      	mov	r9, r1
 800369e:	46ac      	mov	ip, r5
 80036a0:	f04f 0800 	mov.w	r8, #0
 80036a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80036a8:	f8dc a000 	ldr.w	sl, [ip]
 80036ac:	b2a3      	uxth	r3, r4
 80036ae:	fa1f fa8a 	uxth.w	sl, sl
 80036b2:	fb0b a303 	mla	r3, fp, r3, sl
 80036b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80036ba:	f8dc 4000 	ldr.w	r4, [ip]
 80036be:	4443      	add	r3, r8
 80036c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80036c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80036c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80036cc:	46e2      	mov	sl, ip
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80036d4:	454f      	cmp	r7, r9
 80036d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80036da:	f84a 3b04 	str.w	r3, [sl], #4
 80036de:	d82b      	bhi.n	8003738 <__multiply+0x120>
 80036e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80036e4:	9b01      	ldr	r3, [sp, #4]
 80036e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80036ea:	3204      	adds	r2, #4
 80036ec:	f1ba 0f00 	cmp.w	sl, #0
 80036f0:	d020      	beq.n	8003734 <__multiply+0x11c>
 80036f2:	682b      	ldr	r3, [r5, #0]
 80036f4:	4689      	mov	r9, r1
 80036f6:	46a8      	mov	r8, r5
 80036f8:	f04f 0b00 	mov.w	fp, #0
 80036fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8003700:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003704:	fb0a 440c 	mla	r4, sl, ip, r4
 8003708:	445c      	add	r4, fp
 800370a:	46c4      	mov	ip, r8
 800370c:	b29b      	uxth	r3, r3
 800370e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003712:	f84c 3b04 	str.w	r3, [ip], #4
 8003716:	f859 3b04 	ldr.w	r3, [r9], #4
 800371a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	fb0a b303 	mla	r3, sl, r3, fp
 8003724:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003728:	454f      	cmp	r7, r9
 800372a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800372e:	d805      	bhi.n	800373c <__multiply+0x124>
 8003730:	f8c8 3004 	str.w	r3, [r8, #4]
 8003734:	3504      	adds	r5, #4
 8003736:	e79b      	b.n	8003670 <__multiply+0x58>
 8003738:	46d4      	mov	ip, sl
 800373a:	e7b3      	b.n	80036a4 <__multiply+0x8c>
 800373c:	46e0      	mov	r8, ip
 800373e:	e7dd      	b.n	80036fc <__multiply+0xe4>
 8003740:	3e01      	subs	r6, #1
 8003742:	e799      	b.n	8003678 <__multiply+0x60>

08003744 <__pow5mult>:
 8003744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003748:	4615      	mov	r5, r2
 800374a:	f012 0203 	ands.w	r2, r2, #3
 800374e:	4606      	mov	r6, r0
 8003750:	460f      	mov	r7, r1
 8003752:	d007      	beq.n	8003764 <__pow5mult+0x20>
 8003754:	3a01      	subs	r2, #1
 8003756:	4c21      	ldr	r4, [pc, #132]	; (80037dc <__pow5mult+0x98>)
 8003758:	2300      	movs	r3, #0
 800375a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800375e:	f7ff fec9 	bl	80034f4 <__multadd>
 8003762:	4607      	mov	r7, r0
 8003764:	10ad      	asrs	r5, r5, #2
 8003766:	d035      	beq.n	80037d4 <__pow5mult+0x90>
 8003768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800376a:	b93c      	cbnz	r4, 800377c <__pow5mult+0x38>
 800376c:	2010      	movs	r0, #16
 800376e:	f7ff fe63 	bl	8003438 <malloc>
 8003772:	6270      	str	r0, [r6, #36]	; 0x24
 8003774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003778:	6004      	str	r4, [r0, #0]
 800377a:	60c4      	str	r4, [r0, #12]
 800377c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003784:	b94c      	cbnz	r4, 800379a <__pow5mult+0x56>
 8003786:	f240 2171 	movw	r1, #625	; 0x271
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff ff3b 	bl	8003606 <__i2b>
 8003790:	2300      	movs	r3, #0
 8003792:	f8c8 0008 	str.w	r0, [r8, #8]
 8003796:	4604      	mov	r4, r0
 8003798:	6003      	str	r3, [r0, #0]
 800379a:	f04f 0800 	mov.w	r8, #0
 800379e:	07eb      	lsls	r3, r5, #31
 80037a0:	d50a      	bpl.n	80037b8 <__pow5mult+0x74>
 80037a2:	4639      	mov	r1, r7
 80037a4:	4622      	mov	r2, r4
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7ff ff36 	bl	8003618 <__multiply>
 80037ac:	4639      	mov	r1, r7
 80037ae:	4681      	mov	r9, r0
 80037b0:	4630      	mov	r0, r6
 80037b2:	f7ff fe88 	bl	80034c6 <_Bfree>
 80037b6:	464f      	mov	r7, r9
 80037b8:	106d      	asrs	r5, r5, #1
 80037ba:	d00b      	beq.n	80037d4 <__pow5mult+0x90>
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	b938      	cbnz	r0, 80037d0 <__pow5mult+0x8c>
 80037c0:	4622      	mov	r2, r4
 80037c2:	4621      	mov	r1, r4
 80037c4:	4630      	mov	r0, r6
 80037c6:	f7ff ff27 	bl	8003618 <__multiply>
 80037ca:	6020      	str	r0, [r4, #0]
 80037cc:	f8c0 8000 	str.w	r8, [r0]
 80037d0:	4604      	mov	r4, r0
 80037d2:	e7e4      	b.n	800379e <__pow5mult+0x5a>
 80037d4:	4638      	mov	r0, r7
 80037d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037da:	bf00      	nop
 80037dc:	08004590 	.word	0x08004590

080037e0 <__lshift>:
 80037e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e4:	460c      	mov	r4, r1
 80037e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80037ea:	6923      	ldr	r3, [r4, #16]
 80037ec:	6849      	ldr	r1, [r1, #4]
 80037ee:	eb0a 0903 	add.w	r9, sl, r3
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	4607      	mov	r7, r0
 80037f6:	4616      	mov	r6, r2
 80037f8:	f109 0501 	add.w	r5, r9, #1
 80037fc:	42ab      	cmp	r3, r5
 80037fe:	db32      	blt.n	8003866 <__lshift+0x86>
 8003800:	4638      	mov	r0, r7
 8003802:	f7ff fe2c 	bl	800345e <_Balloc>
 8003806:	2300      	movs	r3, #0
 8003808:	4680      	mov	r8, r0
 800380a:	f100 0114 	add.w	r1, r0, #20
 800380e:	461a      	mov	r2, r3
 8003810:	4553      	cmp	r3, sl
 8003812:	db2b      	blt.n	800386c <__lshift+0x8c>
 8003814:	6920      	ldr	r0, [r4, #16]
 8003816:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800381a:	f104 0314 	add.w	r3, r4, #20
 800381e:	f016 021f 	ands.w	r2, r6, #31
 8003822:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003826:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800382a:	d025      	beq.n	8003878 <__lshift+0x98>
 800382c:	f1c2 0e20 	rsb	lr, r2, #32
 8003830:	2000      	movs	r0, #0
 8003832:	681e      	ldr	r6, [r3, #0]
 8003834:	468a      	mov	sl, r1
 8003836:	4096      	lsls	r6, r2
 8003838:	4330      	orrs	r0, r6
 800383a:	f84a 0b04 	str.w	r0, [sl], #4
 800383e:	f853 0b04 	ldr.w	r0, [r3], #4
 8003842:	459c      	cmp	ip, r3
 8003844:	fa20 f00e 	lsr.w	r0, r0, lr
 8003848:	d814      	bhi.n	8003874 <__lshift+0x94>
 800384a:	6048      	str	r0, [r1, #4]
 800384c:	b108      	cbz	r0, 8003852 <__lshift+0x72>
 800384e:	f109 0502 	add.w	r5, r9, #2
 8003852:	3d01      	subs	r5, #1
 8003854:	4638      	mov	r0, r7
 8003856:	f8c8 5010 	str.w	r5, [r8, #16]
 800385a:	4621      	mov	r1, r4
 800385c:	f7ff fe33 	bl	80034c6 <_Bfree>
 8003860:	4640      	mov	r0, r8
 8003862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003866:	3101      	adds	r1, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	e7c7      	b.n	80037fc <__lshift+0x1c>
 800386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003870:	3301      	adds	r3, #1
 8003872:	e7cd      	b.n	8003810 <__lshift+0x30>
 8003874:	4651      	mov	r1, sl
 8003876:	e7dc      	b.n	8003832 <__lshift+0x52>
 8003878:	3904      	subs	r1, #4
 800387a:	f853 2b04 	ldr.w	r2, [r3], #4
 800387e:	f841 2f04 	str.w	r2, [r1, #4]!
 8003882:	459c      	cmp	ip, r3
 8003884:	d8f9      	bhi.n	800387a <__lshift+0x9a>
 8003886:	e7e4      	b.n	8003852 <__lshift+0x72>

08003888 <__mcmp>:
 8003888:	6903      	ldr	r3, [r0, #16]
 800388a:	690a      	ldr	r2, [r1, #16]
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	b530      	push	{r4, r5, lr}
 8003890:	d10c      	bne.n	80038ac <__mcmp+0x24>
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	3014      	adds	r0, #20
 8003896:	3114      	adds	r1, #20
 8003898:	1884      	adds	r4, r0, r2
 800389a:	4411      	add	r1, r2
 800389c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80038a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80038a4:	4295      	cmp	r5, r2
 80038a6:	d003      	beq.n	80038b0 <__mcmp+0x28>
 80038a8:	d305      	bcc.n	80038b6 <__mcmp+0x2e>
 80038aa:	2301      	movs	r3, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd30      	pop	{r4, r5, pc}
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d3f3      	bcc.n	800389c <__mcmp+0x14>
 80038b4:	e7fa      	b.n	80038ac <__mcmp+0x24>
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	e7f7      	b.n	80038ac <__mcmp+0x24>

080038bc <__mdiff>:
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	460d      	mov	r5, r1
 80038c2:	4607      	mov	r7, r0
 80038c4:	4611      	mov	r1, r2
 80038c6:	4628      	mov	r0, r5
 80038c8:	4614      	mov	r4, r2
 80038ca:	f7ff ffdd 	bl	8003888 <__mcmp>
 80038ce:	1e06      	subs	r6, r0, #0
 80038d0:	d108      	bne.n	80038e4 <__mdiff+0x28>
 80038d2:	4631      	mov	r1, r6
 80038d4:	4638      	mov	r0, r7
 80038d6:	f7ff fdc2 	bl	800345e <_Balloc>
 80038da:	2301      	movs	r3, #1
 80038dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e4:	bfa4      	itt	ge
 80038e6:	4623      	movge	r3, r4
 80038e8:	462c      	movge	r4, r5
 80038ea:	4638      	mov	r0, r7
 80038ec:	6861      	ldr	r1, [r4, #4]
 80038ee:	bfa6      	itte	ge
 80038f0:	461d      	movge	r5, r3
 80038f2:	2600      	movge	r6, #0
 80038f4:	2601      	movlt	r6, #1
 80038f6:	f7ff fdb2 	bl	800345e <_Balloc>
 80038fa:	692b      	ldr	r3, [r5, #16]
 80038fc:	60c6      	str	r6, [r0, #12]
 80038fe:	6926      	ldr	r6, [r4, #16]
 8003900:	f105 0914 	add.w	r9, r5, #20
 8003904:	f104 0214 	add.w	r2, r4, #20
 8003908:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800390c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003910:	f100 0514 	add.w	r5, r0, #20
 8003914:	f04f 0e00 	mov.w	lr, #0
 8003918:	f852 ab04 	ldr.w	sl, [r2], #4
 800391c:	f859 4b04 	ldr.w	r4, [r9], #4
 8003920:	fa1e f18a 	uxtah	r1, lr, sl
 8003924:	b2a3      	uxth	r3, r4
 8003926:	1ac9      	subs	r1, r1, r3
 8003928:	0c23      	lsrs	r3, r4, #16
 800392a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800392e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003932:	b289      	uxth	r1, r1
 8003934:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003938:	45c8      	cmp	r8, r9
 800393a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800393e:	4694      	mov	ip, r2
 8003940:	f845 3b04 	str.w	r3, [r5], #4
 8003944:	d8e8      	bhi.n	8003918 <__mdiff+0x5c>
 8003946:	45bc      	cmp	ip, r7
 8003948:	d304      	bcc.n	8003954 <__mdiff+0x98>
 800394a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800394e:	b183      	cbz	r3, 8003972 <__mdiff+0xb6>
 8003950:	6106      	str	r6, [r0, #16]
 8003952:	e7c5      	b.n	80038e0 <__mdiff+0x24>
 8003954:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003958:	fa1e f381 	uxtah	r3, lr, r1
 800395c:	141a      	asrs	r2, r3, #16
 800395e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003962:	b29b      	uxth	r3, r3
 8003964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003968:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800396c:	f845 3b04 	str.w	r3, [r5], #4
 8003970:	e7e9      	b.n	8003946 <__mdiff+0x8a>
 8003972:	3e01      	subs	r6, #1
 8003974:	e7e9      	b.n	800394a <__mdiff+0x8e>

08003976 <__d2b>:
 8003976:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800397a:	460e      	mov	r6, r1
 800397c:	2101      	movs	r1, #1
 800397e:	ec59 8b10 	vmov	r8, r9, d0
 8003982:	4615      	mov	r5, r2
 8003984:	f7ff fd6b 	bl	800345e <_Balloc>
 8003988:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800398c:	4607      	mov	r7, r0
 800398e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003992:	bb34      	cbnz	r4, 80039e2 <__d2b+0x6c>
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	f1b8 0300 	subs.w	r3, r8, #0
 800399a:	d027      	beq.n	80039ec <__d2b+0x76>
 800399c:	a802      	add	r0, sp, #8
 800399e:	f840 3d08 	str.w	r3, [r0, #-8]!
 80039a2:	f7ff fe01 	bl	80035a8 <__lo0bits>
 80039a6:	9900      	ldr	r1, [sp, #0]
 80039a8:	b1f0      	cbz	r0, 80039e8 <__d2b+0x72>
 80039aa:	9a01      	ldr	r2, [sp, #4]
 80039ac:	f1c0 0320 	rsb	r3, r0, #32
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	430b      	orrs	r3, r1
 80039b6:	40c2      	lsrs	r2, r0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	9201      	str	r2, [sp, #4]
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2102      	movne	r1, #2
 80039c6:	2101      	moveq	r1, #1
 80039c8:	6139      	str	r1, [r7, #16]
 80039ca:	b1c4      	cbz	r4, 80039fe <__d2b+0x88>
 80039cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80039d0:	4404      	add	r4, r0
 80039d2:	6034      	str	r4, [r6, #0]
 80039d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80039d8:	6028      	str	r0, [r5, #0]
 80039da:	4638      	mov	r0, r7
 80039dc:	b003      	add	sp, #12
 80039de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039e6:	e7d5      	b.n	8003994 <__d2b+0x1e>
 80039e8:	6179      	str	r1, [r7, #20]
 80039ea:	e7e7      	b.n	80039bc <__d2b+0x46>
 80039ec:	a801      	add	r0, sp, #4
 80039ee:	f7ff fddb 	bl	80035a8 <__lo0bits>
 80039f2:	9b01      	ldr	r3, [sp, #4]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	2101      	movs	r1, #1
 80039f8:	6139      	str	r1, [r7, #16]
 80039fa:	3020      	adds	r0, #32
 80039fc:	e7e5      	b.n	80039ca <__d2b+0x54>
 80039fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003a02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003a06:	6030      	str	r0, [r6, #0]
 8003a08:	6918      	ldr	r0, [r3, #16]
 8003a0a:	f7ff fdae 	bl	800356a <__hi0bits>
 8003a0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003a12:	e7e1      	b.n	80039d8 <__d2b+0x62>

08003a14 <_calloc_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	fb02 f401 	mul.w	r4, r2, r1
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	f000 f856 	bl	8003acc <_malloc_r>
 8003a20:	4605      	mov	r5, r0
 8003a22:	b118      	cbz	r0, 8003a2c <_calloc_r+0x18>
 8003a24:	4622      	mov	r2, r4
 8003a26:	2100      	movs	r1, #0
 8003a28:	f7fe f9fc 	bl	8001e24 <memset>
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}

08003a30 <_free_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4605      	mov	r5, r0
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d045      	beq.n	8003ac4 <_free_r+0x94>
 8003a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3c:	1f0c      	subs	r4, r1, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfb8      	it	lt
 8003a42:	18e4      	addlt	r4, r4, r3
 8003a44:	f000 fc4a 	bl	80042dc <__malloc_lock>
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <_free_r+0x98>)
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	b933      	cbnz	r3, 8003a5e <_free_r+0x2e>
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	6014      	str	r4, [r2, #0]
 8003a54:	4628      	mov	r0, r5
 8003a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5a:	f000 bc40 	b.w	80042de <__malloc_unlock>
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	d90c      	bls.n	8003a7c <_free_r+0x4c>
 8003a62:	6821      	ldr	r1, [r4, #0]
 8003a64:	1862      	adds	r2, r4, r1
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bf04      	itt	eq
 8003a6a:	681a      	ldreq	r2, [r3, #0]
 8003a6c:	685b      	ldreq	r3, [r3, #4]
 8003a6e:	6063      	str	r3, [r4, #4]
 8003a70:	bf04      	itt	eq
 8003a72:	1852      	addeq	r2, r2, r1
 8003a74:	6022      	streq	r2, [r4, #0]
 8003a76:	6004      	str	r4, [r0, #0]
 8003a78:	e7ec      	b.n	8003a54 <_free_r+0x24>
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	b10a      	cbz	r2, 8003a84 <_free_r+0x54>
 8003a80:	42a2      	cmp	r2, r4
 8003a82:	d9fa      	bls.n	8003a7a <_free_r+0x4a>
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	1858      	adds	r0, r3, r1
 8003a88:	42a0      	cmp	r0, r4
 8003a8a:	d10b      	bne.n	8003aa4 <_free_r+0x74>
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	4401      	add	r1, r0
 8003a90:	1858      	adds	r0, r3, r1
 8003a92:	4282      	cmp	r2, r0
 8003a94:	6019      	str	r1, [r3, #0]
 8003a96:	d1dd      	bne.n	8003a54 <_free_r+0x24>
 8003a98:	6810      	ldr	r0, [r2, #0]
 8003a9a:	6852      	ldr	r2, [r2, #4]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	6019      	str	r1, [r3, #0]
 8003aa2:	e7d7      	b.n	8003a54 <_free_r+0x24>
 8003aa4:	d902      	bls.n	8003aac <_free_r+0x7c>
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	e7d3      	b.n	8003a54 <_free_r+0x24>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	1821      	adds	r1, r4, r0
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	bf04      	itt	eq
 8003ab4:	6811      	ldreq	r1, [r2, #0]
 8003ab6:	6852      	ldreq	r2, [r2, #4]
 8003ab8:	6062      	str	r2, [r4, #4]
 8003aba:	bf04      	itt	eq
 8003abc:	1809      	addeq	r1, r1, r0
 8003abe:	6021      	streq	r1, [r4, #0]
 8003ac0:	605c      	str	r4, [r3, #4]
 8003ac2:	e7c7      	b.n	8003a54 <_free_r+0x24>
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000200 	.word	0x20000200

08003acc <_malloc_r>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	1ccd      	adds	r5, r1, #3
 8003ad0:	f025 0503 	bic.w	r5, r5, #3
 8003ad4:	3508      	adds	r5, #8
 8003ad6:	2d0c      	cmp	r5, #12
 8003ad8:	bf38      	it	cc
 8003ada:	250c      	movcc	r5, #12
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	4606      	mov	r6, r0
 8003ae0:	db01      	blt.n	8003ae6 <_malloc_r+0x1a>
 8003ae2:	42a9      	cmp	r1, r5
 8003ae4:	d903      	bls.n	8003aee <_malloc_r+0x22>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	2000      	movs	r0, #0
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
 8003aee:	f000 fbf5 	bl	80042dc <__malloc_lock>
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <_malloc_r+0xac>)
 8003af4:	6814      	ldr	r4, [r2, #0]
 8003af6:	4621      	mov	r1, r4
 8003af8:	b991      	cbnz	r1, 8003b20 <_malloc_r+0x54>
 8003afa:	4c20      	ldr	r4, [pc, #128]	; (8003b7c <_malloc_r+0xb0>)
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	b91b      	cbnz	r3, 8003b08 <_malloc_r+0x3c>
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f97d 	bl	8003e00 <_sbrk_r>
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 f978 	bl	8003e00 <_sbrk_r>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d124      	bne.n	8003b5e <_malloc_r+0x92>
 8003b14:	230c      	movs	r3, #12
 8003b16:	6033      	str	r3, [r6, #0]
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 fbe0 	bl	80042de <__malloc_unlock>
 8003b1e:	e7e4      	b.n	8003aea <_malloc_r+0x1e>
 8003b20:	680b      	ldr	r3, [r1, #0]
 8003b22:	1b5b      	subs	r3, r3, r5
 8003b24:	d418      	bmi.n	8003b58 <_malloc_r+0x8c>
 8003b26:	2b0b      	cmp	r3, #11
 8003b28:	d90f      	bls.n	8003b4a <_malloc_r+0x7e>
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	50cd      	str	r5, [r1, r3]
 8003b2e:	18cc      	adds	r4, r1, r3
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 fbd4 	bl	80042de <__malloc_unlock>
 8003b36:	f104 000b 	add.w	r0, r4, #11
 8003b3a:	1d23      	adds	r3, r4, #4
 8003b3c:	f020 0007 	bic.w	r0, r0, #7
 8003b40:	1ac3      	subs	r3, r0, r3
 8003b42:	d0d3      	beq.n	8003aec <_malloc_r+0x20>
 8003b44:	425a      	negs	r2, r3
 8003b46:	50e2      	str	r2, [r4, r3]
 8003b48:	e7d0      	b.n	8003aec <_malloc_r+0x20>
 8003b4a:	428c      	cmp	r4, r1
 8003b4c:	684b      	ldr	r3, [r1, #4]
 8003b4e:	bf16      	itet	ne
 8003b50:	6063      	strne	r3, [r4, #4]
 8003b52:	6013      	streq	r3, [r2, #0]
 8003b54:	460c      	movne	r4, r1
 8003b56:	e7eb      	b.n	8003b30 <_malloc_r+0x64>
 8003b58:	460c      	mov	r4, r1
 8003b5a:	6849      	ldr	r1, [r1, #4]
 8003b5c:	e7cc      	b.n	8003af8 <_malloc_r+0x2c>
 8003b5e:	1cc4      	adds	r4, r0, #3
 8003b60:	f024 0403 	bic.w	r4, r4, #3
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d005      	beq.n	8003b74 <_malloc_r+0xa8>
 8003b68:	1a21      	subs	r1, r4, r0
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f948 	bl	8003e00 <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d0cf      	beq.n	8003b14 <_malloc_r+0x48>
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	e7db      	b.n	8003b30 <_malloc_r+0x64>
 8003b78:	20000200 	.word	0x20000200
 8003b7c:	20000204 	.word	0x20000204

08003b80 <__sfputc_r>:
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	b410      	push	{r4}
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	da08      	bge.n	8003b9e <__sfputc_r+0x1e>
 8003b8c:	6994      	ldr	r4, [r2, #24]
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	db01      	blt.n	8003b96 <__sfputc_r+0x16>
 8003b92:	290a      	cmp	r1, #10
 8003b94:	d103      	bne.n	8003b9e <__sfputc_r+0x1e>
 8003b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b9a:	f000 b985 	b.w	8003ea8 <__swbuf_r>
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	1c58      	adds	r0, r3, #1
 8003ba2:	6010      	str	r0, [r2, #0]
 8003ba4:	7019      	strb	r1, [r3, #0]
 8003ba6:	4608      	mov	r0, r1
 8003ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <__sfputs_r>:
 8003bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	460f      	mov	r7, r1
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	18d5      	adds	r5, r2, r3
 8003bb8:	42ac      	cmp	r4, r5
 8003bba:	d101      	bne.n	8003bc0 <__sfputs_r+0x12>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	e007      	b.n	8003bd0 <__sfputs_r+0x22>
 8003bc0:	463a      	mov	r2, r7
 8003bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f7ff ffda 	bl	8003b80 <__sfputc_r>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d1f3      	bne.n	8003bb8 <__sfputs_r+0xa>
 8003bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bd4 <_vfiprintf_r>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	460c      	mov	r4, r1
 8003bda:	b09d      	sub	sp, #116	; 0x74
 8003bdc:	4617      	mov	r7, r2
 8003bde:	461d      	mov	r5, r3
 8003be0:	4606      	mov	r6, r0
 8003be2:	b118      	cbz	r0, 8003bec <_vfiprintf_r+0x18>
 8003be4:	6983      	ldr	r3, [r0, #24]
 8003be6:	b90b      	cbnz	r3, 8003bec <_vfiprintf_r+0x18>
 8003be8:	f7ff fb8e 	bl	8003308 <__sinit>
 8003bec:	4b7c      	ldr	r3, [pc, #496]	; (8003de0 <_vfiprintf_r+0x20c>)
 8003bee:	429c      	cmp	r4, r3
 8003bf0:	d158      	bne.n	8003ca4 <_vfiprintf_r+0xd0>
 8003bf2:	6874      	ldr	r4, [r6, #4]
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	0718      	lsls	r0, r3, #28
 8003bf8:	d55e      	bpl.n	8003cb8 <_vfiprintf_r+0xe4>
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <_vfiprintf_r+0xe4>
 8003c00:	2300      	movs	r3, #0
 8003c02:	9309      	str	r3, [sp, #36]	; 0x24
 8003c04:	2320      	movs	r3, #32
 8003c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c0a:	2330      	movs	r3, #48	; 0x30
 8003c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c10:	9503      	str	r5, [sp, #12]
 8003c12:	f04f 0b01 	mov.w	fp, #1
 8003c16:	46b8      	mov	r8, r7
 8003c18:	4645      	mov	r5, r8
 8003c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c1e:	b10b      	cbz	r3, 8003c24 <_vfiprintf_r+0x50>
 8003c20:	2b25      	cmp	r3, #37	; 0x25
 8003c22:	d154      	bne.n	8003cce <_vfiprintf_r+0xfa>
 8003c24:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c28:	d00b      	beq.n	8003c42 <_vfiprintf_r+0x6e>
 8003c2a:	4653      	mov	r3, sl
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4630      	mov	r0, r6
 8003c32:	f7ff ffbc 	bl	8003bae <__sfputs_r>
 8003c36:	3001      	adds	r0, #1
 8003c38:	f000 80c2 	beq.w	8003dc0 <_vfiprintf_r+0x1ec>
 8003c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c3e:	4453      	add	r3, sl
 8003c40:	9309      	str	r3, [sp, #36]	; 0x24
 8003c42:	f898 3000 	ldrb.w	r3, [r8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80ba 	beq.w	8003dc0 <_vfiprintf_r+0x1ec>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c56:	9304      	str	r3, [sp, #16]
 8003c58:	9307      	str	r3, [sp, #28]
 8003c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c60:	46a8      	mov	r8, r5
 8003c62:	2205      	movs	r2, #5
 8003c64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c68:	485e      	ldr	r0, [pc, #376]	; (8003de4 <_vfiprintf_r+0x210>)
 8003c6a:	f7fc faf1 	bl	8000250 <memchr>
 8003c6e:	9b04      	ldr	r3, [sp, #16]
 8003c70:	bb78      	cbnz	r0, 8003cd2 <_vfiprintf_r+0xfe>
 8003c72:	06d9      	lsls	r1, r3, #27
 8003c74:	bf44      	itt	mi
 8003c76:	2220      	movmi	r2, #32
 8003c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c7c:	071a      	lsls	r2, r3, #28
 8003c7e:	bf44      	itt	mi
 8003c80:	222b      	movmi	r2, #43	; 0x2b
 8003c82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c86:	782a      	ldrb	r2, [r5, #0]
 8003c88:	2a2a      	cmp	r2, #42	; 0x2a
 8003c8a:	d02a      	beq.n	8003ce2 <_vfiprintf_r+0x10e>
 8003c8c:	9a07      	ldr	r2, [sp, #28]
 8003c8e:	46a8      	mov	r8, r5
 8003c90:	2000      	movs	r0, #0
 8003c92:	250a      	movs	r5, #10
 8003c94:	4641      	mov	r1, r8
 8003c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c9a:	3b30      	subs	r3, #48	; 0x30
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d969      	bls.n	8003d74 <_vfiprintf_r+0x1a0>
 8003ca0:	b360      	cbz	r0, 8003cfc <_vfiprintf_r+0x128>
 8003ca2:	e024      	b.n	8003cee <_vfiprintf_r+0x11a>
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <_vfiprintf_r+0x214>)
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d101      	bne.n	8003cae <_vfiprintf_r+0xda>
 8003caa:	68b4      	ldr	r4, [r6, #8]
 8003cac:	e7a2      	b.n	8003bf4 <_vfiprintf_r+0x20>
 8003cae:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <_vfiprintf_r+0x218>)
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	bf08      	it	eq
 8003cb4:	68f4      	ldreq	r4, [r6, #12]
 8003cb6:	e79d      	b.n	8003bf4 <_vfiprintf_r+0x20>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 f958 	bl	8003f70 <__swsetup_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d09d      	beq.n	8003c00 <_vfiprintf_r+0x2c>
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	b01d      	add	sp, #116	; 0x74
 8003cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cce:	46a8      	mov	r8, r5
 8003cd0:	e7a2      	b.n	8003c18 <_vfiprintf_r+0x44>
 8003cd2:	4a44      	ldr	r2, [pc, #272]	; (8003de4 <_vfiprintf_r+0x210>)
 8003cd4:	1a80      	subs	r0, r0, r2
 8003cd6:	fa0b f000 	lsl.w	r0, fp, r0
 8003cda:	4318      	orrs	r0, r3
 8003cdc:	9004      	str	r0, [sp, #16]
 8003cde:	4645      	mov	r5, r8
 8003ce0:	e7be      	b.n	8003c60 <_vfiprintf_r+0x8c>
 8003ce2:	9a03      	ldr	r2, [sp, #12]
 8003ce4:	1d11      	adds	r1, r2, #4
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	9103      	str	r1, [sp, #12]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	db01      	blt.n	8003cf2 <_vfiprintf_r+0x11e>
 8003cee:	9207      	str	r2, [sp, #28]
 8003cf0:	e004      	b.n	8003cfc <_vfiprintf_r+0x128>
 8003cf2:	4252      	negs	r2, r2
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	9207      	str	r2, [sp, #28]
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	f898 3000 	ldrb.w	r3, [r8]
 8003d00:	2b2e      	cmp	r3, #46	; 0x2e
 8003d02:	d10e      	bne.n	8003d22 <_vfiprintf_r+0x14e>
 8003d04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d08:	2b2a      	cmp	r3, #42	; 0x2a
 8003d0a:	d138      	bne.n	8003d7e <_vfiprintf_r+0x1aa>
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	1d1a      	adds	r2, r3, #4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	9203      	str	r2, [sp, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bfb8      	it	lt
 8003d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d1c:	f108 0802 	add.w	r8, r8, #2
 8003d20:	9305      	str	r3, [sp, #20]
 8003d22:	4d33      	ldr	r5, [pc, #204]	; (8003df0 <_vfiprintf_r+0x21c>)
 8003d24:	f898 1000 	ldrb.w	r1, [r8]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f7fc fa90 	bl	8000250 <memchr>
 8003d30:	b140      	cbz	r0, 8003d44 <_vfiprintf_r+0x170>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	1b40      	subs	r0, r0, r5
 8003d36:	fa03 f000 	lsl.w	r0, r3, r0
 8003d3a:	9b04      	ldr	r3, [sp, #16]
 8003d3c:	4303      	orrs	r3, r0
 8003d3e:	f108 0801 	add.w	r8, r8, #1
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	f898 1000 	ldrb.w	r1, [r8]
 8003d48:	482a      	ldr	r0, [pc, #168]	; (8003df4 <_vfiprintf_r+0x220>)
 8003d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d4e:	2206      	movs	r2, #6
 8003d50:	f108 0701 	add.w	r7, r8, #1
 8003d54:	f7fc fa7c 	bl	8000250 <memchr>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d037      	beq.n	8003dcc <_vfiprintf_r+0x1f8>
 8003d5c:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <_vfiprintf_r+0x224>)
 8003d5e:	bb1b      	cbnz	r3, 8003da8 <_vfiprintf_r+0x1d4>
 8003d60:	9b03      	ldr	r3, [sp, #12]
 8003d62:	3307      	adds	r3, #7
 8003d64:	f023 0307 	bic.w	r3, r3, #7
 8003d68:	3308      	adds	r3, #8
 8003d6a:	9303      	str	r3, [sp, #12]
 8003d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6e:	444b      	add	r3, r9
 8003d70:	9309      	str	r3, [sp, #36]	; 0x24
 8003d72:	e750      	b.n	8003c16 <_vfiprintf_r+0x42>
 8003d74:	fb05 3202 	mla	r2, r5, r2, r3
 8003d78:	2001      	movs	r0, #1
 8003d7a:	4688      	mov	r8, r1
 8003d7c:	e78a      	b.n	8003c94 <_vfiprintf_r+0xc0>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f108 0801 	add.w	r8, r8, #1
 8003d84:	9305      	str	r3, [sp, #20]
 8003d86:	4619      	mov	r1, r3
 8003d88:	250a      	movs	r5, #10
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d90:	3a30      	subs	r2, #48	; 0x30
 8003d92:	2a09      	cmp	r2, #9
 8003d94:	d903      	bls.n	8003d9e <_vfiprintf_r+0x1ca>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0c3      	beq.n	8003d22 <_vfiprintf_r+0x14e>
 8003d9a:	9105      	str	r1, [sp, #20]
 8003d9c:	e7c1      	b.n	8003d22 <_vfiprintf_r+0x14e>
 8003d9e:	fb05 2101 	mla	r1, r5, r1, r2
 8003da2:	2301      	movs	r3, #1
 8003da4:	4680      	mov	r8, r0
 8003da6:	e7f0      	b.n	8003d8a <_vfiprintf_r+0x1b6>
 8003da8:	ab03      	add	r3, sp, #12
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4622      	mov	r2, r4
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <_vfiprintf_r+0x228>)
 8003db0:	a904      	add	r1, sp, #16
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7fe f8c4 	bl	8001f40 <_printf_float>
 8003db8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003dbc:	4681      	mov	r9, r0
 8003dbe:	d1d5      	bne.n	8003d6c <_vfiprintf_r+0x198>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	065b      	lsls	r3, r3, #25
 8003dc4:	f53f af7e 	bmi.w	8003cc4 <_vfiprintf_r+0xf0>
 8003dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dca:	e77d      	b.n	8003cc8 <_vfiprintf_r+0xf4>
 8003dcc:	ab03      	add	r3, sp, #12
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <_vfiprintf_r+0x228>)
 8003dd4:	a904      	add	r1, sp, #16
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7fe fb54 	bl	8002484 <_printf_i>
 8003ddc:	e7ec      	b.n	8003db8 <_vfiprintf_r+0x1e4>
 8003dde:	bf00      	nop
 8003de0:	08004460 	.word	0x08004460
 8003de4:	0800459c 	.word	0x0800459c
 8003de8:	08004480 	.word	0x08004480
 8003dec:	08004440 	.word	0x08004440
 8003df0:	080045a2 	.word	0x080045a2
 8003df4:	080045a6 	.word	0x080045a6
 8003df8:	08001f41 	.word	0x08001f41
 8003dfc:	08003baf 	.word	0x08003baf

08003e00 <_sbrk_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4c06      	ldr	r4, [pc, #24]	; (8003e1c <_sbrk_r+0x1c>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4605      	mov	r5, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	f000 faca 	bl	80043a4 <_sbrk>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_sbrk_r+0x1a>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_sbrk_r+0x1a>
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	200002d0 	.word	0x200002d0

08003e20 <__sread>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	460c      	mov	r4, r1
 8003e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e28:	f000 fa5a 	bl	80042e0 <_read_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	bfab      	itete	ge
 8003e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e32:	89a3      	ldrhlt	r3, [r4, #12]
 8003e34:	181b      	addge	r3, r3, r0
 8003e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e3a:	bfac      	ite	ge
 8003e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e3e:	81a3      	strhlt	r3, [r4, #12]
 8003e40:	bd10      	pop	{r4, pc}

08003e42 <__swrite>:
 8003e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e46:	461f      	mov	r7, r3
 8003e48:	898b      	ldrh	r3, [r1, #12]
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	4616      	mov	r6, r2
 8003e52:	d505      	bpl.n	8003e60 <__swrite+0x1e>
 8003e54:	2302      	movs	r3, #2
 8003e56:	2200      	movs	r2, #0
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	f000 f9b6 	bl	80041cc <_lseek_r>
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	463b      	mov	r3, r7
 8003e70:	4628      	mov	r0, r5
 8003e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e76:	f000 b869 	b.w	8003f4c <_write_r>

08003e7a <__sseek>:
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e82:	f000 f9a3 	bl	80041cc <_lseek_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	bf15      	itete	ne
 8003e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e96:	81a3      	strheq	r3, [r4, #12]
 8003e98:	bf18      	it	ne
 8003e9a:	81a3      	strhne	r3, [r4, #12]
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <__sclose>:
 8003e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea2:	f000 b8d3 	b.w	800404c <_close_r>
	...

08003ea8 <__swbuf_r>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	460e      	mov	r6, r1
 8003eac:	4614      	mov	r4, r2
 8003eae:	4605      	mov	r5, r0
 8003eb0:	b118      	cbz	r0, 8003eba <__swbuf_r+0x12>
 8003eb2:	6983      	ldr	r3, [r0, #24]
 8003eb4:	b90b      	cbnz	r3, 8003eba <__swbuf_r+0x12>
 8003eb6:	f7ff fa27 	bl	8003308 <__sinit>
 8003eba:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <__swbuf_r+0x98>)
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	d12a      	bne.n	8003f16 <__swbuf_r+0x6e>
 8003ec0:	686c      	ldr	r4, [r5, #4]
 8003ec2:	69a3      	ldr	r3, [r4, #24]
 8003ec4:	60a3      	str	r3, [r4, #8]
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	071a      	lsls	r2, r3, #28
 8003eca:	d52e      	bpl.n	8003f2a <__swbuf_r+0x82>
 8003ecc:	6923      	ldr	r3, [r4, #16]
 8003ece:	b363      	cbz	r3, 8003f2a <__swbuf_r+0x82>
 8003ed0:	6923      	ldr	r3, [r4, #16]
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1ac0      	subs	r0, r0, r3
 8003ed6:	6963      	ldr	r3, [r4, #20]
 8003ed8:	b2f6      	uxtb	r6, r6
 8003eda:	4283      	cmp	r3, r0
 8003edc:	4637      	mov	r7, r6
 8003ede:	dc04      	bgt.n	8003eea <__swbuf_r+0x42>
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 f948 	bl	8004178 <_fflush_r>
 8003ee8:	bb28      	cbnz	r0, 8003f36 <__swbuf_r+0x8e>
 8003eea:	68a3      	ldr	r3, [r4, #8]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	60a3      	str	r3, [r4, #8]
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	6022      	str	r2, [r4, #0]
 8003ef6:	701e      	strb	r6, [r3, #0]
 8003ef8:	6963      	ldr	r3, [r4, #20]
 8003efa:	3001      	adds	r0, #1
 8003efc:	4283      	cmp	r3, r0
 8003efe:	d004      	beq.n	8003f0a <__swbuf_r+0x62>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	07db      	lsls	r3, r3, #31
 8003f04:	d519      	bpl.n	8003f3a <__swbuf_r+0x92>
 8003f06:	2e0a      	cmp	r6, #10
 8003f08:	d117      	bne.n	8003f3a <__swbuf_r+0x92>
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 f933 	bl	8004178 <_fflush_r>
 8003f12:	b190      	cbz	r0, 8003f3a <__swbuf_r+0x92>
 8003f14:	e00f      	b.n	8003f36 <__swbuf_r+0x8e>
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <__swbuf_r+0x9c>)
 8003f18:	429c      	cmp	r4, r3
 8003f1a:	d101      	bne.n	8003f20 <__swbuf_r+0x78>
 8003f1c:	68ac      	ldr	r4, [r5, #8]
 8003f1e:	e7d0      	b.n	8003ec2 <__swbuf_r+0x1a>
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <__swbuf_r+0xa0>)
 8003f22:	429c      	cmp	r4, r3
 8003f24:	bf08      	it	eq
 8003f26:	68ec      	ldreq	r4, [r5, #12]
 8003f28:	e7cb      	b.n	8003ec2 <__swbuf_r+0x1a>
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	f000 f81f 	bl	8003f70 <__swsetup_r>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d0cc      	beq.n	8003ed0 <__swbuf_r+0x28>
 8003f36:	f04f 37ff 	mov.w	r7, #4294967295
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	08004460 	.word	0x08004460
 8003f44:	08004480 	.word	0x08004480
 8003f48:	08004440 	.word	0x08004440

08003f4c <_write_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	4c07      	ldr	r4, [pc, #28]	; (8003f6c <_write_r+0x20>)
 8003f50:	4605      	mov	r5, r0
 8003f52:	4608      	mov	r0, r1
 8003f54:	4611      	mov	r1, r2
 8003f56:	2200      	movs	r2, #0
 8003f58:	6022      	str	r2, [r4, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f7fc fcae 	bl	80008bc <_write>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d102      	bne.n	8003f6a <_write_r+0x1e>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	b103      	cbz	r3, 8003f6a <_write_r+0x1e>
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	200002d0 	.word	0x200002d0

08003f70 <__swsetup_r>:
 8003f70:	4b32      	ldr	r3, [pc, #200]	; (800403c <__swsetup_r+0xcc>)
 8003f72:	b570      	push	{r4, r5, r6, lr}
 8003f74:	681d      	ldr	r5, [r3, #0]
 8003f76:	4606      	mov	r6, r0
 8003f78:	460c      	mov	r4, r1
 8003f7a:	b125      	cbz	r5, 8003f86 <__swsetup_r+0x16>
 8003f7c:	69ab      	ldr	r3, [r5, #24]
 8003f7e:	b913      	cbnz	r3, 8003f86 <__swsetup_r+0x16>
 8003f80:	4628      	mov	r0, r5
 8003f82:	f7ff f9c1 	bl	8003308 <__sinit>
 8003f86:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <__swsetup_r+0xd0>)
 8003f88:	429c      	cmp	r4, r3
 8003f8a:	d10f      	bne.n	8003fac <__swsetup_r+0x3c>
 8003f8c:	686c      	ldr	r4, [r5, #4]
 8003f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	0715      	lsls	r5, r2, #28
 8003f96:	d42c      	bmi.n	8003ff2 <__swsetup_r+0x82>
 8003f98:	06d0      	lsls	r0, r2, #27
 8003f9a:	d411      	bmi.n	8003fc0 <__swsetup_r+0x50>
 8003f9c:	2209      	movs	r2, #9
 8003f9e:	6032      	str	r2, [r6, #0]
 8003fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	e03e      	b.n	800402a <__swsetup_r+0xba>
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <__swsetup_r+0xd4>)
 8003fae:	429c      	cmp	r4, r3
 8003fb0:	d101      	bne.n	8003fb6 <__swsetup_r+0x46>
 8003fb2:	68ac      	ldr	r4, [r5, #8]
 8003fb4:	e7eb      	b.n	8003f8e <__swsetup_r+0x1e>
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <__swsetup_r+0xd8>)
 8003fb8:	429c      	cmp	r4, r3
 8003fba:	bf08      	it	eq
 8003fbc:	68ec      	ldreq	r4, [r5, #12]
 8003fbe:	e7e6      	b.n	8003f8e <__swsetup_r+0x1e>
 8003fc0:	0751      	lsls	r1, r2, #29
 8003fc2:	d512      	bpl.n	8003fea <__swsetup_r+0x7a>
 8003fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc6:	b141      	cbz	r1, 8003fda <__swsetup_r+0x6a>
 8003fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fcc:	4299      	cmp	r1, r3
 8003fce:	d002      	beq.n	8003fd6 <__swsetup_r+0x66>
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f7ff fd2d 	bl	8003a30 <_free_r>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe0:	81a3      	strh	r3, [r4, #12]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6063      	str	r3, [r4, #4]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f043 0308 	orr.w	r3, r3, #8
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	b94b      	cbnz	r3, 800400a <__swsetup_r+0x9a>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d003      	beq.n	800400a <__swsetup_r+0x9a>
 8004002:	4621      	mov	r1, r4
 8004004:	4630      	mov	r0, r6
 8004006:	f000 f917 	bl	8004238 <__smakebuf_r>
 800400a:	89a2      	ldrh	r2, [r4, #12]
 800400c:	f012 0301 	ands.w	r3, r2, #1
 8004010:	d00c      	beq.n	800402c <__swsetup_r+0xbc>
 8004012:	2300      	movs	r3, #0
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	6963      	ldr	r3, [r4, #20]
 8004018:	425b      	negs	r3, r3
 800401a:	61a3      	str	r3, [r4, #24]
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	b953      	cbnz	r3, 8004036 <__swsetup_r+0xc6>
 8004020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004024:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004028:	d1ba      	bne.n	8003fa0 <__swsetup_r+0x30>
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	0792      	lsls	r2, r2, #30
 800402e:	bf58      	it	pl
 8004030:	6963      	ldrpl	r3, [r4, #20]
 8004032:	60a3      	str	r3, [r4, #8]
 8004034:	e7f2      	b.n	800401c <__swsetup_r+0xac>
 8004036:	2000      	movs	r0, #0
 8004038:	e7f7      	b.n	800402a <__swsetup_r+0xba>
 800403a:	bf00      	nop
 800403c:	2000000c 	.word	0x2000000c
 8004040:	08004460 	.word	0x08004460
 8004044:	08004480 	.word	0x08004480
 8004048:	08004440 	.word	0x08004440

0800404c <_close_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4c06      	ldr	r4, [pc, #24]	; (8004068 <_close_r+0x1c>)
 8004050:	2300      	movs	r3, #0
 8004052:	4605      	mov	r5, r0
 8004054:	4608      	mov	r0, r1
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	f000 f984 	bl	8004364 <_close>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d102      	bne.n	8004066 <_close_r+0x1a>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	b103      	cbz	r3, 8004066 <_close_r+0x1a>
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	bd38      	pop	{r3, r4, r5, pc}
 8004068:	200002d0 	.word	0x200002d0

0800406c <__sflush_r>:
 800406c:	898a      	ldrh	r2, [r1, #12]
 800406e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004072:	4605      	mov	r5, r0
 8004074:	0710      	lsls	r0, r2, #28
 8004076:	460c      	mov	r4, r1
 8004078:	d458      	bmi.n	800412c <__sflush_r+0xc0>
 800407a:	684b      	ldr	r3, [r1, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	dc05      	bgt.n	800408c <__sflush_r+0x20>
 8004080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	dc02      	bgt.n	800408c <__sflush_r+0x20>
 8004086:	2000      	movs	r0, #0
 8004088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800408c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800408e:	2e00      	cmp	r6, #0
 8004090:	d0f9      	beq.n	8004086 <__sflush_r+0x1a>
 8004092:	2300      	movs	r3, #0
 8004094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004098:	682f      	ldr	r7, [r5, #0]
 800409a:	6a21      	ldr	r1, [r4, #32]
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	d032      	beq.n	8004106 <__sflush_r+0x9a>
 80040a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	075a      	lsls	r2, r3, #29
 80040a6:	d505      	bpl.n	80040b4 <__sflush_r+0x48>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	1ac0      	subs	r0, r0, r3
 80040ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040ae:	b10b      	cbz	r3, 80040b4 <__sflush_r+0x48>
 80040b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b2:	1ac0      	subs	r0, r0, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	4602      	mov	r2, r0
 80040b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ba:	6a21      	ldr	r1, [r4, #32]
 80040bc:	4628      	mov	r0, r5
 80040be:	47b0      	blx	r6
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	d106      	bne.n	80040d4 <__sflush_r+0x68>
 80040c6:	6829      	ldr	r1, [r5, #0]
 80040c8:	291d      	cmp	r1, #29
 80040ca:	d848      	bhi.n	800415e <__sflush_r+0xf2>
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <__sflush_r+0x108>)
 80040ce:	40ca      	lsrs	r2, r1
 80040d0:	07d6      	lsls	r6, r2, #31
 80040d2:	d544      	bpl.n	800415e <__sflush_r+0xf2>
 80040d4:	2200      	movs	r2, #0
 80040d6:	6062      	str	r2, [r4, #4]
 80040d8:	04d9      	lsls	r1, r3, #19
 80040da:	6922      	ldr	r2, [r4, #16]
 80040dc:	6022      	str	r2, [r4, #0]
 80040de:	d504      	bpl.n	80040ea <__sflush_r+0x7e>
 80040e0:	1c42      	adds	r2, r0, #1
 80040e2:	d101      	bne.n	80040e8 <__sflush_r+0x7c>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	b903      	cbnz	r3, 80040ea <__sflush_r+0x7e>
 80040e8:	6560      	str	r0, [r4, #84]	; 0x54
 80040ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ec:	602f      	str	r7, [r5, #0]
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d0c9      	beq.n	8004086 <__sflush_r+0x1a>
 80040f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040f6:	4299      	cmp	r1, r3
 80040f8:	d002      	beq.n	8004100 <__sflush_r+0x94>
 80040fa:	4628      	mov	r0, r5
 80040fc:	f7ff fc98 	bl	8003a30 <_free_r>
 8004100:	2000      	movs	r0, #0
 8004102:	6360      	str	r0, [r4, #52]	; 0x34
 8004104:	e7c0      	b.n	8004088 <__sflush_r+0x1c>
 8004106:	2301      	movs	r3, #1
 8004108:	4628      	mov	r0, r5
 800410a:	47b0      	blx	r6
 800410c:	1c41      	adds	r1, r0, #1
 800410e:	d1c8      	bne.n	80040a2 <__sflush_r+0x36>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0c5      	beq.n	80040a2 <__sflush_r+0x36>
 8004116:	2b1d      	cmp	r3, #29
 8004118:	d001      	beq.n	800411e <__sflush_r+0xb2>
 800411a:	2b16      	cmp	r3, #22
 800411c:	d101      	bne.n	8004122 <__sflush_r+0xb6>
 800411e:	602f      	str	r7, [r5, #0]
 8004120:	e7b1      	b.n	8004086 <__sflush_r+0x1a>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	e7ad      	b.n	8004088 <__sflush_r+0x1c>
 800412c:	690f      	ldr	r7, [r1, #16]
 800412e:	2f00      	cmp	r7, #0
 8004130:	d0a9      	beq.n	8004086 <__sflush_r+0x1a>
 8004132:	0793      	lsls	r3, r2, #30
 8004134:	680e      	ldr	r6, [r1, #0]
 8004136:	bf08      	it	eq
 8004138:	694b      	ldreq	r3, [r1, #20]
 800413a:	600f      	str	r7, [r1, #0]
 800413c:	bf18      	it	ne
 800413e:	2300      	movne	r3, #0
 8004140:	eba6 0807 	sub.w	r8, r6, r7
 8004144:	608b      	str	r3, [r1, #8]
 8004146:	f1b8 0f00 	cmp.w	r8, #0
 800414a:	dd9c      	ble.n	8004086 <__sflush_r+0x1a>
 800414c:	4643      	mov	r3, r8
 800414e:	463a      	mov	r2, r7
 8004150:	6a21      	ldr	r1, [r4, #32]
 8004152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004154:	4628      	mov	r0, r5
 8004156:	47b0      	blx	r6
 8004158:	2800      	cmp	r0, #0
 800415a:	dc06      	bgt.n	800416a <__sflush_r+0xfe>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e78e      	b.n	8004088 <__sflush_r+0x1c>
 800416a:	4407      	add	r7, r0
 800416c:	eba8 0800 	sub.w	r8, r8, r0
 8004170:	e7e9      	b.n	8004146 <__sflush_r+0xda>
 8004172:	bf00      	nop
 8004174:	20400001 	.word	0x20400001

08004178 <_fflush_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	4605      	mov	r5, r0
 800417e:	460c      	mov	r4, r1
 8004180:	b1db      	cbz	r3, 80041ba <_fflush_r+0x42>
 8004182:	b118      	cbz	r0, 800418c <_fflush_r+0x14>
 8004184:	6983      	ldr	r3, [r0, #24]
 8004186:	b90b      	cbnz	r3, 800418c <_fflush_r+0x14>
 8004188:	f7ff f8be 	bl	8003308 <__sinit>
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <_fflush_r+0x48>)
 800418e:	429c      	cmp	r4, r3
 8004190:	d109      	bne.n	80041a6 <_fflush_r+0x2e>
 8004192:	686c      	ldr	r4, [r5, #4]
 8004194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004198:	b17b      	cbz	r3, 80041ba <_fflush_r+0x42>
 800419a:	4621      	mov	r1, r4
 800419c:	4628      	mov	r0, r5
 800419e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a2:	f7ff bf63 	b.w	800406c <__sflush_r>
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <_fflush_r+0x4c>)
 80041a8:	429c      	cmp	r4, r3
 80041aa:	d101      	bne.n	80041b0 <_fflush_r+0x38>
 80041ac:	68ac      	ldr	r4, [r5, #8]
 80041ae:	e7f1      	b.n	8004194 <_fflush_r+0x1c>
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <_fflush_r+0x50>)
 80041b2:	429c      	cmp	r4, r3
 80041b4:	bf08      	it	eq
 80041b6:	68ec      	ldreq	r4, [r5, #12]
 80041b8:	e7ec      	b.n	8004194 <_fflush_r+0x1c>
 80041ba:	2000      	movs	r0, #0
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
 80041be:	bf00      	nop
 80041c0:	08004460 	.word	0x08004460
 80041c4:	08004480 	.word	0x08004480
 80041c8:	08004440 	.word	0x08004440

080041cc <_lseek_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4c07      	ldr	r4, [pc, #28]	; (80041ec <_lseek_r+0x20>)
 80041d0:	4605      	mov	r5, r0
 80041d2:	4608      	mov	r0, r1
 80041d4:	4611      	mov	r1, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f000 f8da 	bl	8004394 <_lseek>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_lseek_r+0x1e>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_lseek_r+0x1e>
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	200002d0 	.word	0x200002d0

080041f0 <__swhatbuf_r>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	460e      	mov	r6, r1
 80041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f8:	2900      	cmp	r1, #0
 80041fa:	b096      	sub	sp, #88	; 0x58
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	da07      	bge.n	8004212 <__swhatbuf_r+0x22>
 8004202:	2300      	movs	r3, #0
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	89b3      	ldrh	r3, [r6, #12]
 8004208:	061a      	lsls	r2, r3, #24
 800420a:	d410      	bmi.n	800422e <__swhatbuf_r+0x3e>
 800420c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004210:	e00e      	b.n	8004230 <__swhatbuf_r+0x40>
 8004212:	466a      	mov	r2, sp
 8004214:	f000 f884 	bl	8004320 <_fstat_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	dbf2      	blt.n	8004202 <__swhatbuf_r+0x12>
 800421c:	9a01      	ldr	r2, [sp, #4]
 800421e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004226:	425a      	negs	r2, r3
 8004228:	415a      	adcs	r2, r3
 800422a:	602a      	str	r2, [r5, #0]
 800422c:	e7ee      	b.n	800420c <__swhatbuf_r+0x1c>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	2000      	movs	r0, #0
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	b016      	add	sp, #88	; 0x58
 8004236:	bd70      	pop	{r4, r5, r6, pc}

08004238 <__smakebuf_r>:
 8004238:	898b      	ldrh	r3, [r1, #12]
 800423a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800423c:	079d      	lsls	r5, r3, #30
 800423e:	4606      	mov	r6, r0
 8004240:	460c      	mov	r4, r1
 8004242:	d507      	bpl.n	8004254 <__smakebuf_r+0x1c>
 8004244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	2301      	movs	r3, #1
 800424e:	6163      	str	r3, [r4, #20]
 8004250:	b002      	add	sp, #8
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	ab01      	add	r3, sp, #4
 8004256:	466a      	mov	r2, sp
 8004258:	f7ff ffca 	bl	80041f0 <__swhatbuf_r>
 800425c:	9900      	ldr	r1, [sp, #0]
 800425e:	4605      	mov	r5, r0
 8004260:	4630      	mov	r0, r6
 8004262:	f7ff fc33 	bl	8003acc <_malloc_r>
 8004266:	b948      	cbnz	r0, 800427c <__smakebuf_r+0x44>
 8004268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800426c:	059a      	lsls	r2, r3, #22
 800426e:	d4ef      	bmi.n	8004250 <__smakebuf_r+0x18>
 8004270:	f023 0303 	bic.w	r3, r3, #3
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	e7e3      	b.n	8004244 <__smakebuf_r+0xc>
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <__smakebuf_r+0x7c>)
 800427e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	6020      	str	r0, [r4, #0]
 8004284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	9b00      	ldr	r3, [sp, #0]
 800428c:	6163      	str	r3, [r4, #20]
 800428e:	9b01      	ldr	r3, [sp, #4]
 8004290:	6120      	str	r0, [r4, #16]
 8004292:	b15b      	cbz	r3, 80042ac <__smakebuf_r+0x74>
 8004294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004298:	4630      	mov	r0, r6
 800429a:	f000 f853 	bl	8004344 <_isatty_r>
 800429e:	b128      	cbz	r0, 80042ac <__smakebuf_r+0x74>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	431d      	orrs	r5, r3
 80042b0:	81a5      	strh	r5, [r4, #12]
 80042b2:	e7cd      	b.n	8004250 <__smakebuf_r+0x18>
 80042b4:	080032d1 	.word	0x080032d1

080042b8 <__ascii_mbtowc>:
 80042b8:	b082      	sub	sp, #8
 80042ba:	b901      	cbnz	r1, 80042be <__ascii_mbtowc+0x6>
 80042bc:	a901      	add	r1, sp, #4
 80042be:	b142      	cbz	r2, 80042d2 <__ascii_mbtowc+0x1a>
 80042c0:	b14b      	cbz	r3, 80042d6 <__ascii_mbtowc+0x1e>
 80042c2:	7813      	ldrb	r3, [r2, #0]
 80042c4:	600b      	str	r3, [r1, #0]
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	1c10      	adds	r0, r2, #0
 80042ca:	bf18      	it	ne
 80042cc:	2001      	movne	r0, #1
 80042ce:	b002      	add	sp, #8
 80042d0:	4770      	bx	lr
 80042d2:	4610      	mov	r0, r2
 80042d4:	e7fb      	b.n	80042ce <__ascii_mbtowc+0x16>
 80042d6:	f06f 0001 	mvn.w	r0, #1
 80042da:	e7f8      	b.n	80042ce <__ascii_mbtowc+0x16>

080042dc <__malloc_lock>:
 80042dc:	4770      	bx	lr

080042de <__malloc_unlock>:
 80042de:	4770      	bx	lr

080042e0 <_read_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	4c07      	ldr	r4, [pc, #28]	; (8004300 <_read_r+0x20>)
 80042e4:	4605      	mov	r5, r0
 80042e6:	4608      	mov	r0, r1
 80042e8:	4611      	mov	r1, r2
 80042ea:	2200      	movs	r2, #0
 80042ec:	6022      	str	r2, [r4, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f7fc faf0 	bl	80008d4 <_read>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_read_r+0x1e>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_read_r+0x1e>
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200002d0 	.word	0x200002d0

08004304 <__ascii_wctomb>:
 8004304:	b149      	cbz	r1, 800431a <__ascii_wctomb+0x16>
 8004306:	2aff      	cmp	r2, #255	; 0xff
 8004308:	bf85      	ittet	hi
 800430a:	238a      	movhi	r3, #138	; 0x8a
 800430c:	6003      	strhi	r3, [r0, #0]
 800430e:	700a      	strbls	r2, [r1, #0]
 8004310:	f04f 30ff 	movhi.w	r0, #4294967295
 8004314:	bf98      	it	ls
 8004316:	2001      	movls	r0, #1
 8004318:	4770      	bx	lr
 800431a:	4608      	mov	r0, r1
 800431c:	4770      	bx	lr
	...

08004320 <_fstat_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4c07      	ldr	r4, [pc, #28]	; (8004340 <_fstat_r+0x20>)
 8004324:	2300      	movs	r3, #0
 8004326:	4605      	mov	r5, r0
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	f000 f821 	bl	8004374 <_fstat>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d102      	bne.n	800433c <_fstat_r+0x1c>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	b103      	cbz	r3, 800433c <_fstat_r+0x1c>
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	bf00      	nop
 8004340:	200002d0 	.word	0x200002d0

08004344 <_isatty_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4c06      	ldr	r4, [pc, #24]	; (8004360 <_isatty_r+0x1c>)
 8004348:	2300      	movs	r3, #0
 800434a:	4605      	mov	r5, r0
 800434c:	4608      	mov	r0, r1
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	f000 f818 	bl	8004384 <_isatty>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_isatty_r+0x1a>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b103      	cbz	r3, 800435e <_isatty_r+0x1a>
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	200002d0 	.word	0x200002d0

08004364 <_close>:
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <_close+0xc>)
 8004366:	2258      	movs	r2, #88	; 0x58
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f04f 30ff 	mov.w	r0, #4294967295
 800436e:	4770      	bx	lr
 8004370:	200002d0 	.word	0x200002d0

08004374 <_fstat>:
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <_fstat+0xc>)
 8004376:	2258      	movs	r2, #88	; 0x58
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f04f 30ff 	mov.w	r0, #4294967295
 800437e:	4770      	bx	lr
 8004380:	200002d0 	.word	0x200002d0

08004384 <_isatty>:
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <_isatty+0xc>)
 8004386:	2258      	movs	r2, #88	; 0x58
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	2000      	movs	r0, #0
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	200002d0 	.word	0x200002d0

08004394 <_lseek>:
 8004394:	4b02      	ldr	r3, [pc, #8]	; (80043a0 <_lseek+0xc>)
 8004396:	2258      	movs	r2, #88	; 0x58
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f04f 30ff 	mov.w	r0, #4294967295
 800439e:	4770      	bx	lr
 80043a0:	200002d0 	.word	0x200002d0

080043a4 <_sbrk>:
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <_sbrk+0x14>)
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	4602      	mov	r2, r0
 80043aa:	b909      	cbnz	r1, 80043b0 <_sbrk+0xc>
 80043ac:	4903      	ldr	r1, [pc, #12]	; (80043bc <_sbrk+0x18>)
 80043ae:	6019      	str	r1, [r3, #0]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	4402      	add	r2, r0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	4770      	bx	lr
 80043b8:	20000208 	.word	0x20000208
 80043bc:	200002d8 	.word	0x200002d8

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
